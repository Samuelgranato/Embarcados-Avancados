
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000049f0 memsz 0x000049f0 flags r-x
    LOAD off    0x00005a10 vaddr 0x0000ca10 paddr 0x0000d43c align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006e68 vaddr 0x0000de68 paddr 0x0000de68 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  0000643c  2**0
                  CONTENTS
  2 .text         000049a4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  0000c9c4  0000c9c4  000059c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  0000ca10  0000d43c  00005a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  0000de68  0000de68  00006e68  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000deac  0000deac  0000643c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000643c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000008c8  00000000  00000000  00006460  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00014948  00000000  00000000  00006d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005385  00000000  00000000  0001b670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000602e  00000000  00000000  000209f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001298  00000000  00000000  00026a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001fcd  00000000  00000000  00027cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  00029c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0002e764  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d0  00000000  00000000  0002e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00030d1e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00030d21  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00030d2d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00030d2e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00030d2f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00030d3a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00030d45  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00030d50  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  00030d58  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e87  00000000  00000000  00030d93  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000447a9  00000000  00000000  00035c1a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000c9c4 l    d  .rodata	00000000 .rodata
0000ca10 l    d  .rwdata	00000000 .rwdata
0000de68 l    d  .bss	00000000 .bss
0000deac l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab2_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00008350 l     F .text	00000008 __fp_unlock
00008364 l     F .text	0000019c __sinit.part.1
00008500 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000ca10 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0000aff0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b104 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b130 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b224 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b30c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b3f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b5d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000d438 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b878 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b9b4 l     F .text	00000034 alt_dev_reg
0000d3e4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000be0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bfcc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000c12c l     F .text	0000003c alt_get_errno
0000c168 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000adc0 g     F .text	00000054 _isatty_r
0000b510 g     F .text	0000007c alt_main
000081e4 g     F .text	000000c0 _puts_r
0000aae8 g     F .text	00000060 _lseek_r
0000d43c g       *ABS*	00000000 __flash_rwdata_start
0000deac g       *ABS*	00000000 __alt_heap_start
0000a09c g     F .text	0000005c __sseek
000086b0 g     F .text	00000010 __sinit
00008508 g     F .text	00000078 __sfmoreglue
0000b5b0 g     F .text	00000024 __malloc_unlock
00009788 g     F .text	0000015c memmove
00008698 g     F .text	00000018 _cleanup
0000c3b0 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ad64 g     F .text	0000005c _fstat_r
0000de74 g     O .bss	00000004 errno
0000a018 g     F .text	00000008 __seofread
0000de7c g     O .bss	00000004 alt_argv
00015410 g       *ABS*	00000000 _gp
0000b848 g     F .text	00000030 usleep
0000d264 g     O .rwdata	00000180 alt_fd_list
0000c3d4 g     F .text	00000090 alt_find_dev
00009640 g     F .text	00000148 memcpy
00008358 g     F .text	0000000c _cleanup_r
0000c0b0 g     F .text	0000007c alt_io_redirect
0000c9c4 g       *ABS*	00000000 __DTOR_END__
000082a4 g     F .text	00000014 puts
0000bb14 g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000af0c g     F .text	00000064 .hidden __udivsi3
0000b260 g     F .text	000000ac isatty
0000de70 g     O .bss	00000004 __malloc_top_pad
00008700 g     F .text	000004c8 __sfvwrite_r
00009f70 g     F .text	00000054 _sbrk_r
0000ad04 g     F .text	00000060 _read_r
0000d430 g     O .rwdata	00000004 alt_max_fd
0000a308 g     F .text	000000f0 _fclose_r
0000a684 g     F .text	00000030 fflush
0000de6c g     O .bss	00000004 __malloc_max_sbrked_mem
0000b434 g     F .text	000000dc lseek
0000d410 g     O .rwdata	00000004 _global_impure_ptr
00009a0c g     F .text	00000564 _realloc_r
0000deac g       *ABS*	00000000 __bss_end
000086d0 g     F .text	00000018 __fp_lock_all
0000d23c g     O .rwdata	00000028 alt_dev_null
0000bdec g     F .text	00000020 alt_dcache_flush_all
0000d43c g       *ABS*	00000000 __ram_rwdata_end
0000d428 g     O .rwdata	00000008 alt_dev_list
0000b8b4 g     F .text	00000100 write
0000ca10 g       *ABS*	00000000 __ram_rodata_end
0000b16c g     F .text	000000b8 fstat
0000af70 g     F .text	00000058 .hidden __umodsi3
0000deac g       *ABS*	00000000 end
0000c9c4 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000bc00 g     F .text	00000094 altera_avalon_jtag_uart_write
000086c0 g     F .text	00000004 __sfp_lock_acquire
0000955c g     F .text	000000e4 memchr
0000a7d8 g     F .text	00000310 _free_r
0000c810 g     F .text	00000180 __call_exitprocs
0000d418 g     O .rwdata	00000004 __malloc_sbrk_base
00008020 g     F .text	0000003c _start
0000b610 g     F .text	00000104 read
0000ba20 g     F .text	00000034 alt_sys_init
0000c6f8 g     F .text	00000118 __register_exitproc
0000afc8 g     F .text	00000028 .hidden __mulsi3
0000ca10 g       *ABS*	00000000 __ram_rwdata_start
0000c9c4 g       *ABS*	00000000 __ram_rodata_start
0000de84 g     O .bss	00000028 __malloc_current_mallinfo
0000ba54 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c56c g     F .text	000000c4 alt_get_fd
0000bc94 g     F .text	00000158 alt_busy_sleep
0000a2b4 g     F .text	00000054 _close_r
0000c67c g     F .text	0000007c memcmp
0000deac g       *ABS*	00000000 __alt_stack_base
0000a160 g     F .text	00000154 __swsetup_r
00008580 g     F .text	00000118 __sfp
0000ce34 g     O .rwdata	00000408 __malloc_av_
000086cc g     F .text	00000004 __sinit_lock_release
00009fc4 g     F .text	00000054 __sread
0000c464 g     F .text	00000108 alt_find_file
0000be48 g     F .text	000000a4 alt_dev_llist_insert
0000b58c g     F .text	00000024 __malloc_lock
0000b798 g     F .text	000000b0 sbrk
0000a628 g     F .text	0000005c _fflush_r
0000de68 g       *ABS*	00000000 __bss_start
000098e4 g     F .text	00000128 memset
000080a0 g     F .text	00000144 main
0000de80 g     O .bss	00000004 alt_envp
0000de68 g     O .bss	00000004 __malloc_max_total_mem
0000bab4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a0f8 g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
0000a3f8 g     F .text	00000014 fclose
00008d50 g     F .text	0000080c _malloc_r
0000d434 g     O .rwdata	00000004 alt_errno
00008bc8 g     F .text	000000c4 _fwalk
0000ae14 g     F .text	00000084 .hidden __divsi3
0000a6b4 g     F .text	00000124 _malloc_trim_r
0000c9c4 g       *ABS*	00000000 __CTOR_END__
0000c9c4 g       *ABS*	00000000 __flash_rodata_start
0000c9c4 g       *ABS*	00000000 __DTOR_LIST__
0000805c g     F .text	00000044 delay
0000b9e8 g     F .text	00000038 alt_irq_init
0000b714 g     F .text	00000084 alt_release_fd
0000c630 g     F .text	00000014 atexit
0000a100 g     F .text	00000060 _write_r
0000d414 g     O .rwdata	00000004 _impure_ptr
0000de78 g     O .bss	00000004 alt_argc
0000a40c g     F .text	0000021c __sflush_r
0000bf4c g     F .text	00000060 _do_dtors
000086e8 g     F .text	00000018 __fp_unlock_all
0000d420 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000d43c g       *ABS*	00000000 _edata
0000deac g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000a020 g     F .text	0000007c __swrite
0000d41c g     O .rwdata	00000004 __malloc_trim_threshold
0000c644 g     F .text	00000038 exit
00008c8c g     F .text	000000c4 _fwalk_reent
0000ae98 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
000086c4 g     F .text	00000004 __sfp_lock_release
0000c990 g     F .text	00000034 _exit
0000ab48 g     F .text	000001bc __smakebuf_r
000082b8 g     F .text	00000098 strlen
0000c254 g     F .text	0000015c open
0000bfac g     F .text	00000020 alt_icache_flush_all
0000beec g     F .text	00000060 _do_ctors
0000b02c g     F .text	000000d8 close
0000b374 g     F .text	00000084 alt_load
000086c8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6950414 	ori	gp,gp,21520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10b79a14 	ori	r2,r2,56936

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18f7ab14 	ori	r3,r3,57004

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000b3740 	call	b374 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000b5100 	call	b510 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <delay>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
    805c:	defffd04 	addi	sp,sp,-12
    8060:	df000215 	stw	fp,8(sp)
    8064:	df000204 	addi	fp,sp,8
    8068:	e13fff15 	stw	r4,-4(fp)
      unsigned int delay = 0 ;
    806c:	e03ffe15 	stw	zero,-8(fp)
      while(delay < n){
    8070:	00000306 	br	8080 <delay+0x24>
          delay++;
    8074:	e0bffe17 	ldw	r2,-8(fp)
    8078:	10800044 	addi	r2,r2,1
    807c:	e0bffe15 	stw	r2,-8(fp)
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
      unsigned int delay = 0 ;
      while(delay < n){
    8080:	e0bfff17 	ldw	r2,-4(fp)
    8084:	e0fffe17 	ldw	r3,-8(fp)
    8088:	18bffa36 	bltu	r3,r2,8074 <delay+0x18>
          delay++;
      }
}
    808c:	0001883a 	nop
    8090:	e037883a 	mov	sp,fp
    8094:	df000017 	ldw	fp,0(sp)
    8098:	dec00104 	addi	sp,sp,4
    809c:	f800283a 	ret

000080a0 <main>:

int main(void){
    80a0:	defff604 	addi	sp,sp,-40
    80a4:	dfc00915 	stw	ra,36(sp)
    80a8:	df000815 	stw	fp,32(sp)
    80ac:	df000804 	addi	fp,sp,32
  unsigned int led = 0;
    80b0:	e03ffa15 	stw	zero,-24(fp)

  printf("Embarcados++ \n");
    80b4:	01000074 	movhi	r4,1
    80b8:	21327104 	addi	r4,r4,-13884
    80bc:	00082a40 	call	82a4 <puts>
  int enable;
  int dir;
  int vel_1;
  int vel_2;

  int phase = 0;
    80c0:	e03ff815 	stw	zero,-32(fp)
  int sleep = 100000;
    80c4:	008000b4 	movhi	r2,2
    80c8:	10a1a804 	addi	r2,r2,-31072
    80cc:	e0bff915 	stw	r2,-28(fp)
  while(1){
	  sw 		= IORD_32DIRECT(PIO_1_BASE, 0);
    80d0:	00800074 	movhi	r2,1
    80d4:	10840004 	addi	r2,r2,4096
    80d8:	10800037 	ldwio	r2,0(r2)
    80dc:	e0bffb15 	stw	r2,-20(fp)
	  enable 	= sw & 0x01;
    80e0:	e0bffb17 	ldw	r2,-20(fp)
    80e4:	1080004c 	andi	r2,r2,1
    80e8:	e0bffc15 	stw	r2,-16(fp)
	  dir 		= sw & 0x02;
    80ec:	e0bffb17 	ldw	r2,-20(fp)
    80f0:	1080008c 	andi	r2,r2,2
    80f4:	e0bffd15 	stw	r2,-12(fp)

	  vel_1 	= sw & 0x04;
    80f8:	e0bffb17 	ldw	r2,-20(fp)
    80fc:	1080010c 	andi	r2,r2,4
    8100:	e0bffe15 	stw	r2,-8(fp)
	  vel_2		= sw & 0x08;
    8104:	e0bffb17 	ldw	r2,-20(fp)
    8108:	1080020c 	andi	r2,r2,8
    810c:	e0bfff15 	stw	r2,-4(fp)

	  if(dir){
    8110:	e0bffd17 	ldw	r2,-12(fp)
    8114:	10000826 	beq	r2,zero,8138 <main+0x98>
		  phase++;
    8118:	e0bff817 	ldw	r2,-32(fp)
    811c:	10800044 	addi	r2,r2,1
    8120:	e0bff815 	stw	r2,-32(fp)

		  if(phase > 3){
    8124:	e0bff817 	ldw	r2,-32(fp)
    8128:	10800110 	cmplti	r2,r2,4
    812c:	1000091e 	bne	r2,zero,8154 <main+0xb4>
			  phase = 0;
    8130:	e03ff815 	stw	zero,-32(fp)
    8134:	00000706 	br	8154 <main+0xb4>
		  }
	  }else{
		  phase--;
    8138:	e0bff817 	ldw	r2,-32(fp)
    813c:	10bfffc4 	addi	r2,r2,-1
    8140:	e0bff815 	stw	r2,-32(fp)

		  if(phase < 0){
    8144:	e0bff817 	ldw	r2,-32(fp)
    8148:	1000020e 	bge	r2,zero,8154 <main+0xb4>
			  phase = 3;
    814c:	008000c4 	movi	r2,3
    8150:	e0bff815 	stw	r2,-32(fp)
		  }
	  }


	  if(enable){
    8154:	e0bffc17 	ldw	r2,-16(fp)
    8158:	10000c26 	beq	r2,zero,818c <main+0xec>
		  IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << phase);
    815c:	00c00044 	movi	r3,1
    8160:	e0bff817 	ldw	r2,-32(fp)
    8164:	1886983a 	sll	r3,r3,r2
    8168:	00800074 	movhi	r2,1
    816c:	10840c04 	addi	r2,r2,4144
    8170:	10c00035 	stwio	r3,0(r2)
		  IOWR_32DIRECT(PIO_3_BASE, 0, 0x01 << phase);
    8174:	00c00044 	movi	r3,1
    8178:	e0bff817 	ldw	r2,-32(fp)
    817c:	1886983a 	sll	r3,r3,r2
    8180:	00800074 	movhi	r2,1
    8184:	10840404 	addi	r2,r2,4112
    8188:	10c00035 	stwio	r3,0(r2)
	  }


	  if(vel_1 && vel_2){
    818c:	e0bffe17 	ldw	r2,-8(fp)
    8190:	10000526 	beq	r2,zero,81a8 <main+0x108>
    8194:	e0bfff17 	ldw	r2,-4(fp)
    8198:	10000326 	beq	r2,zero,81a8 <main+0x108>
		  sleep = 2000;
    819c:	0081f404 	movi	r2,2000
    81a0:	e0bff915 	stw	r2,-28(fp)
    81a4:	00000c06 	br	81d8 <main+0x138>
	  }else{
		  if(vel_2){
    81a8:	e0bfff17 	ldw	r2,-4(fp)
    81ac:	10000326 	beq	r2,zero,81bc <main+0x11c>
			  sleep = 10000;
    81b0:	0089c404 	movi	r2,10000
    81b4:	e0bff915 	stw	r2,-28(fp)
    81b8:	00000706 	br	81d8 <main+0x138>
		  }else{
			  if(vel_1){
    81bc:	e0bffe17 	ldw	r2,-8(fp)
    81c0:	10000326 	beq	r2,zero,81d0 <main+0x130>
				  sleep = 20000;
    81c4:	00938804 	movi	r2,20000
    81c8:	e0bff915 	stw	r2,-28(fp)
    81cc:	00000206 	br	81d8 <main+0x138>
			  }else{
				  sleep = 50000;
    81d0:	00b0d414 	movui	r2,50000
    81d4:	e0bff915 	stw	r2,-28(fp)
		  }
	  }



	  usleep(sleep);
    81d8:	e13ff917 	ldw	r4,-28(fp)
    81dc:	000b8480 	call	b848 <usleep>
  };
    81e0:	003fbb06 	br	80d0 <main+0x30>

000081e4 <_puts_r>:
    81e4:	defff604 	addi	sp,sp,-40
    81e8:	dc000715 	stw	r16,28(sp)
    81ec:	2021883a 	mov	r16,r4
    81f0:	2809883a 	mov	r4,r5
    81f4:	dc400815 	stw	r17,32(sp)
    81f8:	dfc00915 	stw	ra,36(sp)
    81fc:	2823883a 	mov	r17,r5
    8200:	00082b80 	call	82b8 <strlen>
    8204:	10c00044 	addi	r3,r2,1
    8208:	d8800115 	stw	r2,4(sp)
    820c:	00800074 	movhi	r2,1
    8210:	10b27504 	addi	r2,r2,-13868
    8214:	d8800215 	stw	r2,8(sp)
    8218:	00800044 	movi	r2,1
    821c:	d8800315 	stw	r2,12(sp)
    8220:	00800084 	movi	r2,2
    8224:	dc400015 	stw	r17,0(sp)
    8228:	d8c00615 	stw	r3,24(sp)
    822c:	dec00415 	stw	sp,16(sp)
    8230:	d8800515 	stw	r2,20(sp)
    8234:	80000226 	beq	r16,zero,8240 <_puts_r+0x5c>
    8238:	80800e17 	ldw	r2,56(r16)
    823c:	10001426 	beq	r2,zero,8290 <_puts_r+0xac>
    8240:	81400217 	ldw	r5,8(r16)
    8244:	2880030b 	ldhu	r2,12(r5)
    8248:	10c8000c 	andi	r3,r2,8192
    824c:	1800061e 	bne	r3,zero,8268 <_puts_r+0x84>
    8250:	29001917 	ldw	r4,100(r5)
    8254:	00f7ffc4 	movi	r3,-8193
    8258:	10880014 	ori	r2,r2,8192
    825c:	20c6703a 	and	r3,r4,r3
    8260:	2880030d 	sth	r2,12(r5)
    8264:	28c01915 	stw	r3,100(r5)
    8268:	d9800404 	addi	r6,sp,16
    826c:	8009883a 	mov	r4,r16
    8270:	00087000 	call	8700 <__sfvwrite_r>
    8274:	1000091e 	bne	r2,zero,829c <_puts_r+0xb8>
    8278:	00800284 	movi	r2,10
    827c:	dfc00917 	ldw	ra,36(sp)
    8280:	dc400817 	ldw	r17,32(sp)
    8284:	dc000717 	ldw	r16,28(sp)
    8288:	dec00a04 	addi	sp,sp,40
    828c:	f800283a 	ret
    8290:	8009883a 	mov	r4,r16
    8294:	00086b00 	call	86b0 <__sinit>
    8298:	003fe906 	br	8240 <_puts_r+0x5c>
    829c:	00bfffc4 	movi	r2,-1
    82a0:	003ff606 	br	827c <_puts_r+0x98>

000082a4 <puts>:
    82a4:	00800074 	movhi	r2,1
    82a8:	10b50504 	addi	r2,r2,-11244
    82ac:	200b883a 	mov	r5,r4
    82b0:	11000017 	ldw	r4,0(r2)
    82b4:	00081e41 	jmpi	81e4 <_puts_r>

000082b8 <strlen>:
    82b8:	208000cc 	andi	r2,r4,3
    82bc:	10002026 	beq	r2,zero,8340 <strlen+0x88>
    82c0:	20800007 	ldb	r2,0(r4)
    82c4:	10002026 	beq	r2,zero,8348 <strlen+0x90>
    82c8:	2005883a 	mov	r2,r4
    82cc:	00000206 	br	82d8 <strlen+0x20>
    82d0:	10c00007 	ldb	r3,0(r2)
    82d4:	18001826 	beq	r3,zero,8338 <strlen+0x80>
    82d8:	10800044 	addi	r2,r2,1
    82dc:	10c000cc 	andi	r3,r2,3
    82e0:	183ffb1e 	bne	r3,zero,82d0 <strlen+0x18>
    82e4:	10c00017 	ldw	r3,0(r2)
    82e8:	01ffbff4 	movhi	r7,65279
    82ec:	39ffbfc4 	addi	r7,r7,-257
    82f0:	00ca303a 	nor	r5,zero,r3
    82f4:	01a02074 	movhi	r6,32897
    82f8:	19c7883a 	add	r3,r3,r7
    82fc:	31a02004 	addi	r6,r6,-32640
    8300:	1946703a 	and	r3,r3,r5
    8304:	1986703a 	and	r3,r3,r6
    8308:	1800091e 	bne	r3,zero,8330 <strlen+0x78>
    830c:	10800104 	addi	r2,r2,4
    8310:	10c00017 	ldw	r3,0(r2)
    8314:	19cb883a 	add	r5,r3,r7
    8318:	00c6303a 	nor	r3,zero,r3
    831c:	28c6703a 	and	r3,r5,r3
    8320:	1986703a 	and	r3,r3,r6
    8324:	183ff926 	beq	r3,zero,830c <strlen+0x54>
    8328:	00000106 	br	8330 <strlen+0x78>
    832c:	10800044 	addi	r2,r2,1
    8330:	10c00007 	ldb	r3,0(r2)
    8334:	183ffd1e 	bne	r3,zero,832c <strlen+0x74>
    8338:	1105c83a 	sub	r2,r2,r4
    833c:	f800283a 	ret
    8340:	2005883a 	mov	r2,r4
    8344:	003fe706 	br	82e4 <strlen+0x2c>
    8348:	0005883a 	mov	r2,zero
    834c:	f800283a 	ret

00008350 <__fp_unlock>:
    8350:	0005883a 	mov	r2,zero
    8354:	f800283a 	ret

00008358 <_cleanup_r>:
    8358:	01400074 	movhi	r5,1
    835c:	2968c204 	addi	r5,r5,-23800
    8360:	0008c8c1 	jmpi	8c8c <_fwalk_reent>

00008364 <__sinit.part.1>:
    8364:	defff704 	addi	sp,sp,-36
    8368:	00c00074 	movhi	r3,1
    836c:	dfc00815 	stw	ra,32(sp)
    8370:	ddc00715 	stw	r23,28(sp)
    8374:	dd800615 	stw	r22,24(sp)
    8378:	dd400515 	stw	r21,20(sp)
    837c:	dd000415 	stw	r20,16(sp)
    8380:	dcc00315 	stw	r19,12(sp)
    8384:	dc800215 	stw	r18,8(sp)
    8388:	dc400115 	stw	r17,4(sp)
    838c:	dc000015 	stw	r16,0(sp)
    8390:	18e0d604 	addi	r3,r3,-31912
    8394:	24000117 	ldw	r16,4(r4)
    8398:	20c00f15 	stw	r3,60(r4)
    839c:	2080bb04 	addi	r2,r4,748
    83a0:	00c000c4 	movi	r3,3
    83a4:	20c0b915 	stw	r3,740(r4)
    83a8:	2080ba15 	stw	r2,744(r4)
    83ac:	2000b815 	stw	zero,736(r4)
    83b0:	05c00204 	movi	r23,8
    83b4:	00800104 	movi	r2,4
    83b8:	2025883a 	mov	r18,r4
    83bc:	b80d883a 	mov	r6,r23
    83c0:	81001704 	addi	r4,r16,92
    83c4:	000b883a 	mov	r5,zero
    83c8:	80000015 	stw	zero,0(r16)
    83cc:	80000115 	stw	zero,4(r16)
    83d0:	80000215 	stw	zero,8(r16)
    83d4:	8080030d 	sth	r2,12(r16)
    83d8:	80001915 	stw	zero,100(r16)
    83dc:	8000038d 	sth	zero,14(r16)
    83e0:	80000415 	stw	zero,16(r16)
    83e4:	80000515 	stw	zero,20(r16)
    83e8:	80000615 	stw	zero,24(r16)
    83ec:	00098e40 	call	98e4 <memset>
    83f0:	05800074 	movhi	r22,1
    83f4:	94400217 	ldw	r17,8(r18)
    83f8:	05400074 	movhi	r21,1
    83fc:	05000074 	movhi	r20,1
    8400:	04c00074 	movhi	r19,1
    8404:	b5a7f104 	addi	r22,r22,-24636
    8408:	ad680804 	addi	r21,r21,-24544
    840c:	a5282704 	addi	r20,r20,-24420
    8410:	9ce83e04 	addi	r19,r19,-24328
    8414:	85800815 	stw	r22,32(r16)
    8418:	85400915 	stw	r21,36(r16)
    841c:	85000a15 	stw	r20,40(r16)
    8420:	84c00b15 	stw	r19,44(r16)
    8424:	84000715 	stw	r16,28(r16)
    8428:	00800284 	movi	r2,10
    842c:	8880030d 	sth	r2,12(r17)
    8430:	00800044 	movi	r2,1
    8434:	b80d883a 	mov	r6,r23
    8438:	89001704 	addi	r4,r17,92
    843c:	000b883a 	mov	r5,zero
    8440:	88000015 	stw	zero,0(r17)
    8444:	88000115 	stw	zero,4(r17)
    8448:	88000215 	stw	zero,8(r17)
    844c:	88001915 	stw	zero,100(r17)
    8450:	8880038d 	sth	r2,14(r17)
    8454:	88000415 	stw	zero,16(r17)
    8458:	88000515 	stw	zero,20(r17)
    845c:	88000615 	stw	zero,24(r17)
    8460:	00098e40 	call	98e4 <memset>
    8464:	94000317 	ldw	r16,12(r18)
    8468:	00800484 	movi	r2,18
    846c:	8c400715 	stw	r17,28(r17)
    8470:	8d800815 	stw	r22,32(r17)
    8474:	8d400915 	stw	r21,36(r17)
    8478:	8d000a15 	stw	r20,40(r17)
    847c:	8cc00b15 	stw	r19,44(r17)
    8480:	8080030d 	sth	r2,12(r16)
    8484:	00800084 	movi	r2,2
    8488:	80000015 	stw	zero,0(r16)
    848c:	80000115 	stw	zero,4(r16)
    8490:	80000215 	stw	zero,8(r16)
    8494:	80001915 	stw	zero,100(r16)
    8498:	8080038d 	sth	r2,14(r16)
    849c:	80000415 	stw	zero,16(r16)
    84a0:	80000515 	stw	zero,20(r16)
    84a4:	80000615 	stw	zero,24(r16)
    84a8:	b80d883a 	mov	r6,r23
    84ac:	000b883a 	mov	r5,zero
    84b0:	81001704 	addi	r4,r16,92
    84b4:	00098e40 	call	98e4 <memset>
    84b8:	00800044 	movi	r2,1
    84bc:	84000715 	stw	r16,28(r16)
    84c0:	85800815 	stw	r22,32(r16)
    84c4:	85400915 	stw	r21,36(r16)
    84c8:	85000a15 	stw	r20,40(r16)
    84cc:	84c00b15 	stw	r19,44(r16)
    84d0:	90800e15 	stw	r2,56(r18)
    84d4:	dfc00817 	ldw	ra,32(sp)
    84d8:	ddc00717 	ldw	r23,28(sp)
    84dc:	dd800617 	ldw	r22,24(sp)
    84e0:	dd400517 	ldw	r21,20(sp)
    84e4:	dd000417 	ldw	r20,16(sp)
    84e8:	dcc00317 	ldw	r19,12(sp)
    84ec:	dc800217 	ldw	r18,8(sp)
    84f0:	dc400117 	ldw	r17,4(sp)
    84f4:	dc000017 	ldw	r16,0(sp)
    84f8:	dec00904 	addi	sp,sp,36
    84fc:	f800283a 	ret

00008500 <__fp_lock>:
    8500:	0005883a 	mov	r2,zero
    8504:	f800283a 	ret

00008508 <__sfmoreglue>:
    8508:	defffc04 	addi	sp,sp,-16
    850c:	dc800215 	stw	r18,8(sp)
    8510:	2825883a 	mov	r18,r5
    8514:	dc000015 	stw	r16,0(sp)
    8518:	01401a04 	movi	r5,104
    851c:	2021883a 	mov	r16,r4
    8520:	913fffc4 	addi	r4,r18,-1
    8524:	dfc00315 	stw	ra,12(sp)
    8528:	dc400115 	stw	r17,4(sp)
    852c:	000afc80 	call	afc8 <__mulsi3>
    8530:	8009883a 	mov	r4,r16
    8534:	11401d04 	addi	r5,r2,116
    8538:	1023883a 	mov	r17,r2
    853c:	0008d500 	call	8d50 <_malloc_r>
    8540:	1021883a 	mov	r16,r2
    8544:	10000726 	beq	r2,zero,8564 <__sfmoreglue+0x5c>
    8548:	11000304 	addi	r4,r2,12
    854c:	10000015 	stw	zero,0(r2)
    8550:	14800115 	stw	r18,4(r2)
    8554:	11000215 	stw	r4,8(r2)
    8558:	89801a04 	addi	r6,r17,104
    855c:	000b883a 	mov	r5,zero
    8560:	00098e40 	call	98e4 <memset>
    8564:	8005883a 	mov	r2,r16
    8568:	dfc00317 	ldw	ra,12(sp)
    856c:	dc800217 	ldw	r18,8(sp)
    8570:	dc400117 	ldw	r17,4(sp)
    8574:	dc000017 	ldw	r16,0(sp)
    8578:	dec00404 	addi	sp,sp,16
    857c:	f800283a 	ret

00008580 <__sfp>:
    8580:	defffb04 	addi	sp,sp,-20
    8584:	dc000015 	stw	r16,0(sp)
    8588:	04000074 	movhi	r16,1
    858c:	84350404 	addi	r16,r16,-11248
    8590:	dcc00315 	stw	r19,12(sp)
    8594:	2027883a 	mov	r19,r4
    8598:	81000017 	ldw	r4,0(r16)
    859c:	dfc00415 	stw	ra,16(sp)
    85a0:	dc800215 	stw	r18,8(sp)
    85a4:	20800e17 	ldw	r2,56(r4)
    85a8:	dc400115 	stw	r17,4(sp)
    85ac:	1000021e 	bne	r2,zero,85b8 <__sfp+0x38>
    85b0:	00083640 	call	8364 <__sinit.part.1>
    85b4:	81000017 	ldw	r4,0(r16)
    85b8:	2480b804 	addi	r18,r4,736
    85bc:	047fffc4 	movi	r17,-1
    85c0:	91000117 	ldw	r4,4(r18)
    85c4:	94000217 	ldw	r16,8(r18)
    85c8:	213fffc4 	addi	r4,r4,-1
    85cc:	20000a16 	blt	r4,zero,85f8 <__sfp+0x78>
    85d0:	8080030f 	ldh	r2,12(r16)
    85d4:	10000c26 	beq	r2,zero,8608 <__sfp+0x88>
    85d8:	80c01d04 	addi	r3,r16,116
    85dc:	00000206 	br	85e8 <__sfp+0x68>
    85e0:	18bfe60f 	ldh	r2,-104(r3)
    85e4:	10000826 	beq	r2,zero,8608 <__sfp+0x88>
    85e8:	213fffc4 	addi	r4,r4,-1
    85ec:	1c3ffd04 	addi	r16,r3,-12
    85f0:	18c01a04 	addi	r3,r3,104
    85f4:	247ffa1e 	bne	r4,r17,85e0 <__sfp+0x60>
    85f8:	90800017 	ldw	r2,0(r18)
    85fc:	10001d26 	beq	r2,zero,8674 <__sfp+0xf4>
    8600:	1025883a 	mov	r18,r2
    8604:	003fee06 	br	85c0 <__sfp+0x40>
    8608:	00bfffc4 	movi	r2,-1
    860c:	8080038d 	sth	r2,14(r16)
    8610:	00800044 	movi	r2,1
    8614:	8080030d 	sth	r2,12(r16)
    8618:	80001915 	stw	zero,100(r16)
    861c:	80000015 	stw	zero,0(r16)
    8620:	80000215 	stw	zero,8(r16)
    8624:	80000115 	stw	zero,4(r16)
    8628:	80000415 	stw	zero,16(r16)
    862c:	80000515 	stw	zero,20(r16)
    8630:	80000615 	stw	zero,24(r16)
    8634:	01800204 	movi	r6,8
    8638:	000b883a 	mov	r5,zero
    863c:	81001704 	addi	r4,r16,92
    8640:	00098e40 	call	98e4 <memset>
    8644:	8005883a 	mov	r2,r16
    8648:	80000c15 	stw	zero,48(r16)
    864c:	80000d15 	stw	zero,52(r16)
    8650:	80001115 	stw	zero,68(r16)
    8654:	80001215 	stw	zero,72(r16)
    8658:	dfc00417 	ldw	ra,16(sp)
    865c:	dcc00317 	ldw	r19,12(sp)
    8660:	dc800217 	ldw	r18,8(sp)
    8664:	dc400117 	ldw	r17,4(sp)
    8668:	dc000017 	ldw	r16,0(sp)
    866c:	dec00504 	addi	sp,sp,20
    8670:	f800283a 	ret
    8674:	01400104 	movi	r5,4
    8678:	9809883a 	mov	r4,r19
    867c:	00085080 	call	8508 <__sfmoreglue>
    8680:	90800015 	stw	r2,0(r18)
    8684:	103fde1e 	bne	r2,zero,8600 <__sfp+0x80>
    8688:	00800304 	movi	r2,12
    868c:	98800015 	stw	r2,0(r19)
    8690:	0005883a 	mov	r2,zero
    8694:	003ff006 	br	8658 <__sfp+0xd8>

00008698 <_cleanup>:
    8698:	00800074 	movhi	r2,1
    869c:	10b50404 	addi	r2,r2,-11248
    86a0:	11000017 	ldw	r4,0(r2)
    86a4:	01400074 	movhi	r5,1
    86a8:	2968c204 	addi	r5,r5,-23800
    86ac:	0008c8c1 	jmpi	8c8c <_fwalk_reent>

000086b0 <__sinit>:
    86b0:	20800e17 	ldw	r2,56(r4)
    86b4:	10000126 	beq	r2,zero,86bc <__sinit+0xc>
    86b8:	f800283a 	ret
    86bc:	00083641 	jmpi	8364 <__sinit.part.1>

000086c0 <__sfp_lock_acquire>:
    86c0:	f800283a 	ret

000086c4 <__sfp_lock_release>:
    86c4:	f800283a 	ret

000086c8 <__sinit_lock_acquire>:
    86c8:	f800283a 	ret

000086cc <__sinit_lock_release>:
    86cc:	f800283a 	ret

000086d0 <__fp_lock_all>:
    86d0:	00800074 	movhi	r2,1
    86d4:	10b50504 	addi	r2,r2,-11244
    86d8:	11000017 	ldw	r4,0(r2)
    86dc:	01400074 	movhi	r5,1
    86e0:	29614004 	addi	r5,r5,-31488
    86e4:	0008bc81 	jmpi	8bc8 <_fwalk>

000086e8 <__fp_unlock_all>:
    86e8:	00800074 	movhi	r2,1
    86ec:	10b50504 	addi	r2,r2,-11244
    86f0:	11000017 	ldw	r4,0(r2)
    86f4:	01400074 	movhi	r5,1
    86f8:	2960d404 	addi	r5,r5,-31920
    86fc:	0008bc81 	jmpi	8bc8 <_fwalk>

00008700 <__sfvwrite_r>:
    8700:	30800217 	ldw	r2,8(r6)
    8704:	10006726 	beq	r2,zero,88a4 <__sfvwrite_r+0x1a4>
    8708:	28c0030b 	ldhu	r3,12(r5)
    870c:	defff404 	addi	sp,sp,-48
    8710:	dd400715 	stw	r21,28(sp)
    8714:	dd000615 	stw	r20,24(sp)
    8718:	dc000215 	stw	r16,8(sp)
    871c:	dfc00b15 	stw	ra,44(sp)
    8720:	df000a15 	stw	fp,40(sp)
    8724:	ddc00915 	stw	r23,36(sp)
    8728:	dd800815 	stw	r22,32(sp)
    872c:	dcc00515 	stw	r19,20(sp)
    8730:	dc800415 	stw	r18,16(sp)
    8734:	dc400315 	stw	r17,12(sp)
    8738:	1880020c 	andi	r2,r3,8
    873c:	2821883a 	mov	r16,r5
    8740:	202b883a 	mov	r21,r4
    8744:	3029883a 	mov	r20,r6
    8748:	10002726 	beq	r2,zero,87e8 <__sfvwrite_r+0xe8>
    874c:	28800417 	ldw	r2,16(r5)
    8750:	10002526 	beq	r2,zero,87e8 <__sfvwrite_r+0xe8>
    8754:	1880008c 	andi	r2,r3,2
    8758:	a4400017 	ldw	r17,0(r20)
    875c:	10002a26 	beq	r2,zero,8808 <__sfvwrite_r+0x108>
    8760:	05a00034 	movhi	r22,32768
    8764:	0027883a 	mov	r19,zero
    8768:	0025883a 	mov	r18,zero
    876c:	b5bf0004 	addi	r22,r22,-1024
    8770:	980d883a 	mov	r6,r19
    8774:	a809883a 	mov	r4,r21
    8778:	90004626 	beq	r18,zero,8894 <__sfvwrite_r+0x194>
    877c:	900f883a 	mov	r7,r18
    8780:	b480022e 	bgeu	r22,r18,878c <__sfvwrite_r+0x8c>
    8784:	01e00034 	movhi	r7,32768
    8788:	39ff0004 	addi	r7,r7,-1024
    878c:	80800917 	ldw	r2,36(r16)
    8790:	81400717 	ldw	r5,28(r16)
    8794:	103ee83a 	callr	r2
    8798:	00805a0e 	bge	zero,r2,8904 <__sfvwrite_r+0x204>
    879c:	a0c00217 	ldw	r3,8(r20)
    87a0:	98a7883a 	add	r19,r19,r2
    87a4:	90a5c83a 	sub	r18,r18,r2
    87a8:	1885c83a 	sub	r2,r3,r2
    87ac:	a0800215 	stw	r2,8(r20)
    87b0:	103fef1e 	bne	r2,zero,8770 <__sfvwrite_r+0x70>
    87b4:	0005883a 	mov	r2,zero
    87b8:	dfc00b17 	ldw	ra,44(sp)
    87bc:	df000a17 	ldw	fp,40(sp)
    87c0:	ddc00917 	ldw	r23,36(sp)
    87c4:	dd800817 	ldw	r22,32(sp)
    87c8:	dd400717 	ldw	r21,28(sp)
    87cc:	dd000617 	ldw	r20,24(sp)
    87d0:	dcc00517 	ldw	r19,20(sp)
    87d4:	dc800417 	ldw	r18,16(sp)
    87d8:	dc400317 	ldw	r17,12(sp)
    87dc:	dc000217 	ldw	r16,8(sp)
    87e0:	dec00c04 	addi	sp,sp,48
    87e4:	f800283a 	ret
    87e8:	800b883a 	mov	r5,r16
    87ec:	a809883a 	mov	r4,r21
    87f0:	000a1600 	call	a160 <__swsetup_r>
    87f4:	1000ee1e 	bne	r2,zero,8bb0 <__sfvwrite_r+0x4b0>
    87f8:	80c0030b 	ldhu	r3,12(r16)
    87fc:	a4400017 	ldw	r17,0(r20)
    8800:	1880008c 	andi	r2,r3,2
    8804:	103fd61e 	bne	r2,zero,8760 <__sfvwrite_r+0x60>
    8808:	1880004c 	andi	r2,r3,1
    880c:	1000421e 	bne	r2,zero,8918 <__sfvwrite_r+0x218>
    8810:	0039883a 	mov	fp,zero
    8814:	0025883a 	mov	r18,zero
    8818:	90001a26 	beq	r18,zero,8884 <__sfvwrite_r+0x184>
    881c:	1880800c 	andi	r2,r3,512
    8820:	84c00217 	ldw	r19,8(r16)
    8824:	10002126 	beq	r2,zero,88ac <__sfvwrite_r+0x1ac>
    8828:	982f883a 	mov	r23,r19
    882c:	94c09636 	bltu	r18,r19,8a88 <__sfvwrite_r+0x388>
    8830:	1881200c 	andi	r2,r3,1152
    8834:	1000a11e 	bne	r2,zero,8abc <__sfvwrite_r+0x3bc>
    8838:	81000017 	ldw	r4,0(r16)
    883c:	b80d883a 	mov	r6,r23
    8840:	e00b883a 	mov	r5,fp
    8844:	00097880 	call	9788 <memmove>
    8848:	80c00217 	ldw	r3,8(r16)
    884c:	81000017 	ldw	r4,0(r16)
    8850:	9005883a 	mov	r2,r18
    8854:	1ce7c83a 	sub	r19,r3,r19
    8858:	25cf883a 	add	r7,r4,r23
    885c:	84c00215 	stw	r19,8(r16)
    8860:	81c00015 	stw	r7,0(r16)
    8864:	a0c00217 	ldw	r3,8(r20)
    8868:	e0b9883a 	add	fp,fp,r2
    886c:	90a5c83a 	sub	r18,r18,r2
    8870:	18a7c83a 	sub	r19,r3,r2
    8874:	a4c00215 	stw	r19,8(r20)
    8878:	983fce26 	beq	r19,zero,87b4 <__sfvwrite_r+0xb4>
    887c:	80c0030b 	ldhu	r3,12(r16)
    8880:	903fe61e 	bne	r18,zero,881c <__sfvwrite_r+0x11c>
    8884:	8f000017 	ldw	fp,0(r17)
    8888:	8c800117 	ldw	r18,4(r17)
    888c:	8c400204 	addi	r17,r17,8
    8890:	003fe106 	br	8818 <__sfvwrite_r+0x118>
    8894:	8cc00017 	ldw	r19,0(r17)
    8898:	8c800117 	ldw	r18,4(r17)
    889c:	8c400204 	addi	r17,r17,8
    88a0:	003fb306 	br	8770 <__sfvwrite_r+0x70>
    88a4:	0005883a 	mov	r2,zero
    88a8:	f800283a 	ret
    88ac:	81000017 	ldw	r4,0(r16)
    88b0:	80800417 	ldw	r2,16(r16)
    88b4:	11005a36 	bltu	r2,r4,8a20 <__sfvwrite_r+0x320>
    88b8:	85c00517 	ldw	r23,20(r16)
    88bc:	95c05836 	bltu	r18,r23,8a20 <__sfvwrite_r+0x320>
    88c0:	00a00034 	movhi	r2,32768
    88c4:	10bfffc4 	addi	r2,r2,-1
    88c8:	9009883a 	mov	r4,r18
    88cc:	1480012e 	bgeu	r2,r18,88d4 <__sfvwrite_r+0x1d4>
    88d0:	1009883a 	mov	r4,r2
    88d4:	b80b883a 	mov	r5,r23
    88d8:	000ae140 	call	ae14 <__divsi3>
    88dc:	b80b883a 	mov	r5,r23
    88e0:	1009883a 	mov	r4,r2
    88e4:	000afc80 	call	afc8 <__mulsi3>
    88e8:	81400717 	ldw	r5,28(r16)
    88ec:	80c00917 	ldw	r3,36(r16)
    88f0:	100f883a 	mov	r7,r2
    88f4:	e00d883a 	mov	r6,fp
    88f8:	a809883a 	mov	r4,r21
    88fc:	183ee83a 	callr	r3
    8900:	00bfd816 	blt	zero,r2,8864 <__sfvwrite_r+0x164>
    8904:	8080030b 	ldhu	r2,12(r16)
    8908:	10801014 	ori	r2,r2,64
    890c:	8080030d 	sth	r2,12(r16)
    8910:	00bfffc4 	movi	r2,-1
    8914:	003fa806 	br	87b8 <__sfvwrite_r+0xb8>
    8918:	0027883a 	mov	r19,zero
    891c:	0011883a 	mov	r8,zero
    8920:	0039883a 	mov	fp,zero
    8924:	0025883a 	mov	r18,zero
    8928:	90001f26 	beq	r18,zero,89a8 <__sfvwrite_r+0x2a8>
    892c:	40005a26 	beq	r8,zero,8a98 <__sfvwrite_r+0x398>
    8930:	982d883a 	mov	r22,r19
    8934:	94c0012e 	bgeu	r18,r19,893c <__sfvwrite_r+0x23c>
    8938:	902d883a 	mov	r22,r18
    893c:	81000017 	ldw	r4,0(r16)
    8940:	80800417 	ldw	r2,16(r16)
    8944:	b02f883a 	mov	r23,r22
    8948:	81c00517 	ldw	r7,20(r16)
    894c:	1100032e 	bgeu	r2,r4,895c <__sfvwrite_r+0x25c>
    8950:	80c00217 	ldw	r3,8(r16)
    8954:	38c7883a 	add	r3,r7,r3
    8958:	1d801816 	blt	r3,r22,89bc <__sfvwrite_r+0x2bc>
    895c:	b1c03e16 	blt	r22,r7,8a58 <__sfvwrite_r+0x358>
    8960:	80800917 	ldw	r2,36(r16)
    8964:	81400717 	ldw	r5,28(r16)
    8968:	e00d883a 	mov	r6,fp
    896c:	da000115 	stw	r8,4(sp)
    8970:	a809883a 	mov	r4,r21
    8974:	103ee83a 	callr	r2
    8978:	102f883a 	mov	r23,r2
    897c:	da000117 	ldw	r8,4(sp)
    8980:	00bfe00e 	bge	zero,r2,8904 <__sfvwrite_r+0x204>
    8984:	9de7c83a 	sub	r19,r19,r23
    8988:	98001f26 	beq	r19,zero,8a08 <__sfvwrite_r+0x308>
    898c:	a0800217 	ldw	r2,8(r20)
    8990:	e5f9883a 	add	fp,fp,r23
    8994:	95e5c83a 	sub	r18,r18,r23
    8998:	15efc83a 	sub	r23,r2,r23
    899c:	a5c00215 	stw	r23,8(r20)
    89a0:	b83f8426 	beq	r23,zero,87b4 <__sfvwrite_r+0xb4>
    89a4:	903fe11e 	bne	r18,zero,892c <__sfvwrite_r+0x22c>
    89a8:	8f000017 	ldw	fp,0(r17)
    89ac:	8c800117 	ldw	r18,4(r17)
    89b0:	0011883a 	mov	r8,zero
    89b4:	8c400204 	addi	r17,r17,8
    89b8:	003fdb06 	br	8928 <__sfvwrite_r+0x228>
    89bc:	180d883a 	mov	r6,r3
    89c0:	e00b883a 	mov	r5,fp
    89c4:	da000115 	stw	r8,4(sp)
    89c8:	d8c00015 	stw	r3,0(sp)
    89cc:	00097880 	call	9788 <memmove>
    89d0:	d8c00017 	ldw	r3,0(sp)
    89d4:	80800017 	ldw	r2,0(r16)
    89d8:	800b883a 	mov	r5,r16
    89dc:	a809883a 	mov	r4,r21
    89e0:	10c5883a 	add	r2,r2,r3
    89e4:	80800015 	stw	r2,0(r16)
    89e8:	d8c00015 	stw	r3,0(sp)
    89ec:	000a6280 	call	a628 <_fflush_r>
    89f0:	d8c00017 	ldw	r3,0(sp)
    89f4:	da000117 	ldw	r8,4(sp)
    89f8:	103fc21e 	bne	r2,zero,8904 <__sfvwrite_r+0x204>
    89fc:	182f883a 	mov	r23,r3
    8a00:	9de7c83a 	sub	r19,r19,r23
    8a04:	983fe11e 	bne	r19,zero,898c <__sfvwrite_r+0x28c>
    8a08:	800b883a 	mov	r5,r16
    8a0c:	a809883a 	mov	r4,r21
    8a10:	000a6280 	call	a628 <_fflush_r>
    8a14:	103fbb1e 	bne	r2,zero,8904 <__sfvwrite_r+0x204>
    8a18:	0011883a 	mov	r8,zero
    8a1c:	003fdb06 	br	898c <__sfvwrite_r+0x28c>
    8a20:	94c0012e 	bgeu	r18,r19,8a28 <__sfvwrite_r+0x328>
    8a24:	9027883a 	mov	r19,r18
    8a28:	980d883a 	mov	r6,r19
    8a2c:	e00b883a 	mov	r5,fp
    8a30:	00097880 	call	9788 <memmove>
    8a34:	80800217 	ldw	r2,8(r16)
    8a38:	80c00017 	ldw	r3,0(r16)
    8a3c:	14c5c83a 	sub	r2,r2,r19
    8a40:	1cc7883a 	add	r3,r3,r19
    8a44:	80800215 	stw	r2,8(r16)
    8a48:	80c00015 	stw	r3,0(r16)
    8a4c:	10004326 	beq	r2,zero,8b5c <__sfvwrite_r+0x45c>
    8a50:	9805883a 	mov	r2,r19
    8a54:	003f8306 	br	8864 <__sfvwrite_r+0x164>
    8a58:	b00d883a 	mov	r6,r22
    8a5c:	e00b883a 	mov	r5,fp
    8a60:	da000115 	stw	r8,4(sp)
    8a64:	00097880 	call	9788 <memmove>
    8a68:	80800217 	ldw	r2,8(r16)
    8a6c:	80c00017 	ldw	r3,0(r16)
    8a70:	da000117 	ldw	r8,4(sp)
    8a74:	1585c83a 	sub	r2,r2,r22
    8a78:	1dad883a 	add	r22,r3,r22
    8a7c:	80800215 	stw	r2,8(r16)
    8a80:	85800015 	stw	r22,0(r16)
    8a84:	003fbf06 	br	8984 <__sfvwrite_r+0x284>
    8a88:	81000017 	ldw	r4,0(r16)
    8a8c:	9027883a 	mov	r19,r18
    8a90:	902f883a 	mov	r23,r18
    8a94:	003f6906 	br	883c <__sfvwrite_r+0x13c>
    8a98:	900d883a 	mov	r6,r18
    8a9c:	01400284 	movi	r5,10
    8aa0:	e009883a 	mov	r4,fp
    8aa4:	000955c0 	call	955c <memchr>
    8aa8:	10003e26 	beq	r2,zero,8ba4 <__sfvwrite_r+0x4a4>
    8aac:	10800044 	addi	r2,r2,1
    8ab0:	1727c83a 	sub	r19,r2,fp
    8ab4:	02000044 	movi	r8,1
    8ab8:	003f9d06 	br	8930 <__sfvwrite_r+0x230>
    8abc:	80800517 	ldw	r2,20(r16)
    8ac0:	81400417 	ldw	r5,16(r16)
    8ac4:	81c00017 	ldw	r7,0(r16)
    8ac8:	10a7883a 	add	r19,r2,r2
    8acc:	9885883a 	add	r2,r19,r2
    8ad0:	1026d7fa 	srli	r19,r2,31
    8ad4:	396dc83a 	sub	r22,r7,r5
    8ad8:	b1000044 	addi	r4,r22,1
    8adc:	9885883a 	add	r2,r19,r2
    8ae0:	1027d07a 	srai	r19,r2,1
    8ae4:	2485883a 	add	r2,r4,r18
    8ae8:	980d883a 	mov	r6,r19
    8aec:	9880022e 	bgeu	r19,r2,8af8 <__sfvwrite_r+0x3f8>
    8af0:	1027883a 	mov	r19,r2
    8af4:	100d883a 	mov	r6,r2
    8af8:	18c1000c 	andi	r3,r3,1024
    8afc:	18001c26 	beq	r3,zero,8b70 <__sfvwrite_r+0x470>
    8b00:	300b883a 	mov	r5,r6
    8b04:	a809883a 	mov	r4,r21
    8b08:	0008d500 	call	8d50 <_malloc_r>
    8b0c:	102f883a 	mov	r23,r2
    8b10:	10002926 	beq	r2,zero,8bb8 <__sfvwrite_r+0x4b8>
    8b14:	81400417 	ldw	r5,16(r16)
    8b18:	b00d883a 	mov	r6,r22
    8b1c:	1009883a 	mov	r4,r2
    8b20:	00096400 	call	9640 <memcpy>
    8b24:	8080030b 	ldhu	r2,12(r16)
    8b28:	00fedfc4 	movi	r3,-1153
    8b2c:	10c4703a 	and	r2,r2,r3
    8b30:	10802014 	ori	r2,r2,128
    8b34:	8080030d 	sth	r2,12(r16)
    8b38:	bd89883a 	add	r4,r23,r22
    8b3c:	9d8fc83a 	sub	r7,r19,r22
    8b40:	85c00415 	stw	r23,16(r16)
    8b44:	84c00515 	stw	r19,20(r16)
    8b48:	81000015 	stw	r4,0(r16)
    8b4c:	9027883a 	mov	r19,r18
    8b50:	81c00215 	stw	r7,8(r16)
    8b54:	902f883a 	mov	r23,r18
    8b58:	003f3806 	br	883c <__sfvwrite_r+0x13c>
    8b5c:	800b883a 	mov	r5,r16
    8b60:	a809883a 	mov	r4,r21
    8b64:	000a6280 	call	a628 <_fflush_r>
    8b68:	103fb926 	beq	r2,zero,8a50 <__sfvwrite_r+0x350>
    8b6c:	003f6506 	br	8904 <__sfvwrite_r+0x204>
    8b70:	a809883a 	mov	r4,r21
    8b74:	0009a0c0 	call	9a0c <_realloc_r>
    8b78:	102f883a 	mov	r23,r2
    8b7c:	103fee1e 	bne	r2,zero,8b38 <__sfvwrite_r+0x438>
    8b80:	81400417 	ldw	r5,16(r16)
    8b84:	a809883a 	mov	r4,r21
    8b88:	000a7d80 	call	a7d8 <_free_r>
    8b8c:	8080030b 	ldhu	r2,12(r16)
    8b90:	00ffdfc4 	movi	r3,-129
    8b94:	1884703a 	and	r2,r3,r2
    8b98:	00c00304 	movi	r3,12
    8b9c:	a8c00015 	stw	r3,0(r21)
    8ba0:	003f5906 	br	8908 <__sfvwrite_r+0x208>
    8ba4:	94c00044 	addi	r19,r18,1
    8ba8:	02000044 	movi	r8,1
    8bac:	003f6006 	br	8930 <__sfvwrite_r+0x230>
    8bb0:	00bfffc4 	movi	r2,-1
    8bb4:	003f0006 	br	87b8 <__sfvwrite_r+0xb8>
    8bb8:	00800304 	movi	r2,12
    8bbc:	a8800015 	stw	r2,0(r21)
    8bc0:	8080030b 	ldhu	r2,12(r16)
    8bc4:	003f5006 	br	8908 <__sfvwrite_r+0x208>

00008bc8 <_fwalk>:
    8bc8:	defff704 	addi	sp,sp,-36
    8bcc:	dd000415 	stw	r20,16(sp)
    8bd0:	dfc00815 	stw	ra,32(sp)
    8bd4:	ddc00715 	stw	r23,28(sp)
    8bd8:	dd800615 	stw	r22,24(sp)
    8bdc:	dd400515 	stw	r21,20(sp)
    8be0:	dcc00315 	stw	r19,12(sp)
    8be4:	dc800215 	stw	r18,8(sp)
    8be8:	dc400115 	stw	r17,4(sp)
    8bec:	dc000015 	stw	r16,0(sp)
    8bf0:	2500b804 	addi	r20,r4,736
    8bf4:	a0002326 	beq	r20,zero,8c84 <_fwalk+0xbc>
    8bf8:	282b883a 	mov	r21,r5
    8bfc:	002f883a 	mov	r23,zero
    8c00:	05800044 	movi	r22,1
    8c04:	04ffffc4 	movi	r19,-1
    8c08:	a4400117 	ldw	r17,4(r20)
    8c0c:	a4800217 	ldw	r18,8(r20)
    8c10:	8c7fffc4 	addi	r17,r17,-1
    8c14:	88000d16 	blt	r17,zero,8c4c <_fwalk+0x84>
    8c18:	94000304 	addi	r16,r18,12
    8c1c:	94800384 	addi	r18,r18,14
    8c20:	8080000b 	ldhu	r2,0(r16)
    8c24:	8c7fffc4 	addi	r17,r17,-1
    8c28:	813ffd04 	addi	r4,r16,-12
    8c2c:	b080042e 	bgeu	r22,r2,8c40 <_fwalk+0x78>
    8c30:	9080000f 	ldh	r2,0(r18)
    8c34:	14c00226 	beq	r2,r19,8c40 <_fwalk+0x78>
    8c38:	a83ee83a 	callr	r21
    8c3c:	b8aeb03a 	or	r23,r23,r2
    8c40:	84001a04 	addi	r16,r16,104
    8c44:	94801a04 	addi	r18,r18,104
    8c48:	8cfff51e 	bne	r17,r19,8c20 <_fwalk+0x58>
    8c4c:	a5000017 	ldw	r20,0(r20)
    8c50:	a03fed1e 	bne	r20,zero,8c08 <_fwalk+0x40>
    8c54:	b805883a 	mov	r2,r23
    8c58:	dfc00817 	ldw	ra,32(sp)
    8c5c:	ddc00717 	ldw	r23,28(sp)
    8c60:	dd800617 	ldw	r22,24(sp)
    8c64:	dd400517 	ldw	r21,20(sp)
    8c68:	dd000417 	ldw	r20,16(sp)
    8c6c:	dcc00317 	ldw	r19,12(sp)
    8c70:	dc800217 	ldw	r18,8(sp)
    8c74:	dc400117 	ldw	r17,4(sp)
    8c78:	dc000017 	ldw	r16,0(sp)
    8c7c:	dec00904 	addi	sp,sp,36
    8c80:	f800283a 	ret
    8c84:	002f883a 	mov	r23,zero
    8c88:	003ff206 	br	8c54 <_fwalk+0x8c>

00008c8c <_fwalk_reent>:
    8c8c:	defff704 	addi	sp,sp,-36
    8c90:	dd000415 	stw	r20,16(sp)
    8c94:	dfc00815 	stw	ra,32(sp)
    8c98:	ddc00715 	stw	r23,28(sp)
    8c9c:	dd800615 	stw	r22,24(sp)
    8ca0:	dd400515 	stw	r21,20(sp)
    8ca4:	dcc00315 	stw	r19,12(sp)
    8ca8:	dc800215 	stw	r18,8(sp)
    8cac:	dc400115 	stw	r17,4(sp)
    8cb0:	dc000015 	stw	r16,0(sp)
    8cb4:	2500b804 	addi	r20,r4,736
    8cb8:	a0002326 	beq	r20,zero,8d48 <_fwalk_reent+0xbc>
    8cbc:	282b883a 	mov	r21,r5
    8cc0:	2027883a 	mov	r19,r4
    8cc4:	002f883a 	mov	r23,zero
    8cc8:	05800044 	movi	r22,1
    8ccc:	04bfffc4 	movi	r18,-1
    8cd0:	a4400117 	ldw	r17,4(r20)
    8cd4:	a4000217 	ldw	r16,8(r20)
    8cd8:	8c7fffc4 	addi	r17,r17,-1
    8cdc:	88000c16 	blt	r17,zero,8d10 <_fwalk_reent+0x84>
    8ce0:	84000304 	addi	r16,r16,12
    8ce4:	8080000b 	ldhu	r2,0(r16)
    8ce8:	8c7fffc4 	addi	r17,r17,-1
    8cec:	817ffd04 	addi	r5,r16,-12
    8cf0:	b080052e 	bgeu	r22,r2,8d08 <_fwalk_reent+0x7c>
    8cf4:	8080008f 	ldh	r2,2(r16)
    8cf8:	9809883a 	mov	r4,r19
    8cfc:	14800226 	beq	r2,r18,8d08 <_fwalk_reent+0x7c>
    8d00:	a83ee83a 	callr	r21
    8d04:	b8aeb03a 	or	r23,r23,r2
    8d08:	84001a04 	addi	r16,r16,104
    8d0c:	8cbff51e 	bne	r17,r18,8ce4 <_fwalk_reent+0x58>
    8d10:	a5000017 	ldw	r20,0(r20)
    8d14:	a03fee1e 	bne	r20,zero,8cd0 <_fwalk_reent+0x44>
    8d18:	b805883a 	mov	r2,r23
    8d1c:	dfc00817 	ldw	ra,32(sp)
    8d20:	ddc00717 	ldw	r23,28(sp)
    8d24:	dd800617 	ldw	r22,24(sp)
    8d28:	dd400517 	ldw	r21,20(sp)
    8d2c:	dd000417 	ldw	r20,16(sp)
    8d30:	dcc00317 	ldw	r19,12(sp)
    8d34:	dc800217 	ldw	r18,8(sp)
    8d38:	dc400117 	ldw	r17,4(sp)
    8d3c:	dc000017 	ldw	r16,0(sp)
    8d40:	dec00904 	addi	sp,sp,36
    8d44:	f800283a 	ret
    8d48:	002f883a 	mov	r23,zero
    8d4c:	003ff206 	br	8d18 <_fwalk_reent+0x8c>

00008d50 <_malloc_r>:
    8d50:	defff504 	addi	sp,sp,-44
    8d54:	dc800315 	stw	r18,12(sp)
    8d58:	dfc00a15 	stw	ra,40(sp)
    8d5c:	df000915 	stw	fp,36(sp)
    8d60:	ddc00815 	stw	r23,32(sp)
    8d64:	dd800715 	stw	r22,28(sp)
    8d68:	dd400615 	stw	r21,24(sp)
    8d6c:	dd000515 	stw	r20,20(sp)
    8d70:	dcc00415 	stw	r19,16(sp)
    8d74:	dc400215 	stw	r17,8(sp)
    8d78:	dc000115 	stw	r16,4(sp)
    8d7c:	288002c4 	addi	r2,r5,11
    8d80:	00c00584 	movi	r3,22
    8d84:	2025883a 	mov	r18,r4
    8d88:	18807f2e 	bgeu	r3,r2,8f88 <_malloc_r+0x238>
    8d8c:	047ffe04 	movi	r17,-8
    8d90:	1462703a 	and	r17,r2,r17
    8d94:	8800a316 	blt	r17,zero,9024 <_malloc_r+0x2d4>
    8d98:	8940a236 	bltu	r17,r5,9024 <_malloc_r+0x2d4>
    8d9c:	000b58c0 	call	b58c <__malloc_lock>
    8da0:	00807dc4 	movi	r2,503
    8da4:	1441e92e 	bgeu	r2,r17,954c <_malloc_r+0x7fc>
    8da8:	8804d27a 	srli	r2,r17,9
    8dac:	1000a126 	beq	r2,zero,9034 <_malloc_r+0x2e4>
    8db0:	00c00104 	movi	r3,4
    8db4:	18811e36 	bltu	r3,r2,9230 <_malloc_r+0x4e0>
    8db8:	8804d1ba 	srli	r2,r17,6
    8dbc:	12000e44 	addi	r8,r2,57
    8dc0:	11c00e04 	addi	r7,r2,56
    8dc4:	4209883a 	add	r4,r8,r8
    8dc8:	04c00074 	movhi	r19,1
    8dcc:	2109883a 	add	r4,r4,r4
    8dd0:	9cf38d04 	addi	r19,r19,-12748
    8dd4:	2109883a 	add	r4,r4,r4
    8dd8:	9909883a 	add	r4,r19,r4
    8ddc:	24000117 	ldw	r16,4(r4)
    8de0:	213ffe04 	addi	r4,r4,-8
    8de4:	24009726 	beq	r4,r16,9044 <_malloc_r+0x2f4>
    8de8:	80800117 	ldw	r2,4(r16)
    8dec:	01bfff04 	movi	r6,-4
    8df0:	014003c4 	movi	r5,15
    8df4:	1184703a 	and	r2,r2,r6
    8df8:	1447c83a 	sub	r3,r2,r17
    8dfc:	28c00716 	blt	r5,r3,8e1c <_malloc_r+0xcc>
    8e00:	1800920e 	bge	r3,zero,904c <_malloc_r+0x2fc>
    8e04:	84000317 	ldw	r16,12(r16)
    8e08:	24008e26 	beq	r4,r16,9044 <_malloc_r+0x2f4>
    8e0c:	80800117 	ldw	r2,4(r16)
    8e10:	1184703a 	and	r2,r2,r6
    8e14:	1447c83a 	sub	r3,r2,r17
    8e18:	28fff90e 	bge	r5,r3,8e00 <_malloc_r+0xb0>
    8e1c:	3809883a 	mov	r4,r7
    8e20:	01800074 	movhi	r6,1
    8e24:	9c000417 	ldw	r16,16(r19)
    8e28:	31b38d04 	addi	r6,r6,-12748
    8e2c:	32000204 	addi	r8,r6,8
    8e30:	82013426 	beq	r16,r8,9304 <_malloc_r+0x5b4>
    8e34:	80c00117 	ldw	r3,4(r16)
    8e38:	00bfff04 	movi	r2,-4
    8e3c:	188e703a 	and	r7,r3,r2
    8e40:	3c45c83a 	sub	r2,r7,r17
    8e44:	00c003c4 	movi	r3,15
    8e48:	18811f16 	blt	r3,r2,92c8 <_malloc_r+0x578>
    8e4c:	32000515 	stw	r8,20(r6)
    8e50:	32000415 	stw	r8,16(r6)
    8e54:	10007f0e 	bge	r2,zero,9054 <_malloc_r+0x304>
    8e58:	00807fc4 	movi	r2,511
    8e5c:	11c0fd36 	bltu	r2,r7,9254 <_malloc_r+0x504>
    8e60:	3806d0fa 	srli	r3,r7,3
    8e64:	01c00044 	movi	r7,1
    8e68:	30800117 	ldw	r2,4(r6)
    8e6c:	19400044 	addi	r5,r3,1
    8e70:	294b883a 	add	r5,r5,r5
    8e74:	1807d0ba 	srai	r3,r3,2
    8e78:	294b883a 	add	r5,r5,r5
    8e7c:	294b883a 	add	r5,r5,r5
    8e80:	298b883a 	add	r5,r5,r6
    8e84:	38c6983a 	sll	r3,r7,r3
    8e88:	29c00017 	ldw	r7,0(r5)
    8e8c:	2a7ffe04 	addi	r9,r5,-8
    8e90:	1886b03a 	or	r3,r3,r2
    8e94:	82400315 	stw	r9,12(r16)
    8e98:	81c00215 	stw	r7,8(r16)
    8e9c:	30c00115 	stw	r3,4(r6)
    8ea0:	2c000015 	stw	r16,0(r5)
    8ea4:	3c000315 	stw	r16,12(r7)
    8ea8:	2005d0ba 	srai	r2,r4,2
    8eac:	01400044 	movi	r5,1
    8eb0:	288a983a 	sll	r5,r5,r2
    8eb4:	19406f36 	bltu	r3,r5,9074 <_malloc_r+0x324>
    8eb8:	28c4703a 	and	r2,r5,r3
    8ebc:	10000a1e 	bne	r2,zero,8ee8 <_malloc_r+0x198>
    8ec0:	00bfff04 	movi	r2,-4
    8ec4:	294b883a 	add	r5,r5,r5
    8ec8:	2088703a 	and	r4,r4,r2
    8ecc:	28c4703a 	and	r2,r5,r3
    8ed0:	21000104 	addi	r4,r4,4
    8ed4:	1000041e 	bne	r2,zero,8ee8 <_malloc_r+0x198>
    8ed8:	294b883a 	add	r5,r5,r5
    8edc:	28c4703a 	and	r2,r5,r3
    8ee0:	21000104 	addi	r4,r4,4
    8ee4:	103ffc26 	beq	r2,zero,8ed8 <_malloc_r+0x188>
    8ee8:	02bfff04 	movi	r10,-4
    8eec:	024003c4 	movi	r9,15
    8ef0:	21800044 	addi	r6,r4,1
    8ef4:	318d883a 	add	r6,r6,r6
    8ef8:	318d883a 	add	r6,r6,r6
    8efc:	318d883a 	add	r6,r6,r6
    8f00:	998d883a 	add	r6,r19,r6
    8f04:	333ffe04 	addi	r12,r6,-8
    8f08:	2017883a 	mov	r11,r4
    8f0c:	31800104 	addi	r6,r6,4
    8f10:	34000017 	ldw	r16,0(r6)
    8f14:	31fffd04 	addi	r7,r6,-12
    8f18:	81c0041e 	bne	r16,r7,8f2c <_malloc_r+0x1dc>
    8f1c:	0000fb06 	br	930c <_malloc_r+0x5bc>
    8f20:	1801030e 	bge	r3,zero,9330 <_malloc_r+0x5e0>
    8f24:	84000317 	ldw	r16,12(r16)
    8f28:	81c0f826 	beq	r16,r7,930c <_malloc_r+0x5bc>
    8f2c:	80800117 	ldw	r2,4(r16)
    8f30:	1284703a 	and	r2,r2,r10
    8f34:	1447c83a 	sub	r3,r2,r17
    8f38:	48fff90e 	bge	r9,r3,8f20 <_malloc_r+0x1d0>
    8f3c:	80800317 	ldw	r2,12(r16)
    8f40:	81000217 	ldw	r4,8(r16)
    8f44:	89400054 	ori	r5,r17,1
    8f48:	81400115 	stw	r5,4(r16)
    8f4c:	20800315 	stw	r2,12(r4)
    8f50:	11000215 	stw	r4,8(r2)
    8f54:	8463883a 	add	r17,r16,r17
    8f58:	9c400515 	stw	r17,20(r19)
    8f5c:	9c400415 	stw	r17,16(r19)
    8f60:	18800054 	ori	r2,r3,1
    8f64:	88800115 	stw	r2,4(r17)
    8f68:	8a000315 	stw	r8,12(r17)
    8f6c:	8a000215 	stw	r8,8(r17)
    8f70:	88e3883a 	add	r17,r17,r3
    8f74:	88c00015 	stw	r3,0(r17)
    8f78:	9009883a 	mov	r4,r18
    8f7c:	000b5b00 	call	b5b0 <__malloc_unlock>
    8f80:	80800204 	addi	r2,r16,8
    8f84:	00001b06 	br	8ff4 <_malloc_r+0x2a4>
    8f88:	04400404 	movi	r17,16
    8f8c:	89402536 	bltu	r17,r5,9024 <_malloc_r+0x2d4>
    8f90:	000b58c0 	call	b58c <__malloc_lock>
    8f94:	00800184 	movi	r2,6
    8f98:	01000084 	movi	r4,2
    8f9c:	04c00074 	movhi	r19,1
    8fa0:	1085883a 	add	r2,r2,r2
    8fa4:	9cf38d04 	addi	r19,r19,-12748
    8fa8:	1085883a 	add	r2,r2,r2
    8fac:	9885883a 	add	r2,r19,r2
    8fb0:	14000117 	ldw	r16,4(r2)
    8fb4:	10fffe04 	addi	r3,r2,-8
    8fb8:	80c0d926 	beq	r16,r3,9320 <_malloc_r+0x5d0>
    8fbc:	80c00117 	ldw	r3,4(r16)
    8fc0:	81000317 	ldw	r4,12(r16)
    8fc4:	00bfff04 	movi	r2,-4
    8fc8:	1884703a 	and	r2,r3,r2
    8fcc:	81400217 	ldw	r5,8(r16)
    8fd0:	8085883a 	add	r2,r16,r2
    8fd4:	10c00117 	ldw	r3,4(r2)
    8fd8:	29000315 	stw	r4,12(r5)
    8fdc:	21400215 	stw	r5,8(r4)
    8fe0:	18c00054 	ori	r3,r3,1
    8fe4:	10c00115 	stw	r3,4(r2)
    8fe8:	9009883a 	mov	r4,r18
    8fec:	000b5b00 	call	b5b0 <__malloc_unlock>
    8ff0:	80800204 	addi	r2,r16,8
    8ff4:	dfc00a17 	ldw	ra,40(sp)
    8ff8:	df000917 	ldw	fp,36(sp)
    8ffc:	ddc00817 	ldw	r23,32(sp)
    9000:	dd800717 	ldw	r22,28(sp)
    9004:	dd400617 	ldw	r21,24(sp)
    9008:	dd000517 	ldw	r20,20(sp)
    900c:	dcc00417 	ldw	r19,16(sp)
    9010:	dc800317 	ldw	r18,12(sp)
    9014:	dc400217 	ldw	r17,8(sp)
    9018:	dc000117 	ldw	r16,4(sp)
    901c:	dec00b04 	addi	sp,sp,44
    9020:	f800283a 	ret
    9024:	00800304 	movi	r2,12
    9028:	90800015 	stw	r2,0(r18)
    902c:	0005883a 	mov	r2,zero
    9030:	003ff006 	br	8ff4 <_malloc_r+0x2a4>
    9034:	01002004 	movi	r4,128
    9038:	02001004 	movi	r8,64
    903c:	01c00fc4 	movi	r7,63
    9040:	003f6106 	br	8dc8 <_malloc_r+0x78>
    9044:	4009883a 	mov	r4,r8
    9048:	003f7506 	br	8e20 <_malloc_r+0xd0>
    904c:	81000317 	ldw	r4,12(r16)
    9050:	003fde06 	br	8fcc <_malloc_r+0x27c>
    9054:	81c5883a 	add	r2,r16,r7
    9058:	11400117 	ldw	r5,4(r2)
    905c:	9009883a 	mov	r4,r18
    9060:	29400054 	ori	r5,r5,1
    9064:	11400115 	stw	r5,4(r2)
    9068:	000b5b00 	call	b5b0 <__malloc_unlock>
    906c:	80800204 	addi	r2,r16,8
    9070:	003fe006 	br	8ff4 <_malloc_r+0x2a4>
    9074:	9c000217 	ldw	r16,8(r19)
    9078:	00bfff04 	movi	r2,-4
    907c:	85800117 	ldw	r22,4(r16)
    9080:	b0ac703a 	and	r22,r22,r2
    9084:	b4400336 	bltu	r22,r17,9094 <_malloc_r+0x344>
    9088:	b445c83a 	sub	r2,r22,r17
    908c:	00c003c4 	movi	r3,15
    9090:	18805d16 	blt	r3,r2,9208 <_malloc_r+0x4b8>
    9094:	05c00074 	movhi	r23,1
    9098:	00800074 	movhi	r2,1
    909c:	10b79c04 	addi	r2,r2,-8592
    90a0:	bdf50604 	addi	r23,r23,-11240
    90a4:	15400017 	ldw	r21,0(r2)
    90a8:	b8c00017 	ldw	r3,0(r23)
    90ac:	00bfffc4 	movi	r2,-1
    90b0:	858d883a 	add	r6,r16,r22
    90b4:	8d6b883a 	add	r21,r17,r21
    90b8:	1880ea26 	beq	r3,r2,9464 <_malloc_r+0x714>
    90bc:	ad4403c4 	addi	r21,r21,4111
    90c0:	00bc0004 	movi	r2,-4096
    90c4:	a8aa703a 	and	r21,r21,r2
    90c8:	a80b883a 	mov	r5,r21
    90cc:	9009883a 	mov	r4,r18
    90d0:	d9800015 	stw	r6,0(sp)
    90d4:	0009f700 	call	9f70 <_sbrk_r>
    90d8:	1029883a 	mov	r20,r2
    90dc:	00bfffc4 	movi	r2,-1
    90e0:	d9800017 	ldw	r6,0(sp)
    90e4:	a080e826 	beq	r20,r2,9488 <_malloc_r+0x738>
    90e8:	a180a636 	bltu	r20,r6,9384 <_malloc_r+0x634>
    90ec:	07000074 	movhi	fp,1
    90f0:	e737a104 	addi	fp,fp,-8572
    90f4:	e0800017 	ldw	r2,0(fp)
    90f8:	a887883a 	add	r3,r21,r2
    90fc:	e0c00015 	stw	r3,0(fp)
    9100:	3500e626 	beq	r6,r20,949c <_malloc_r+0x74c>
    9104:	b9000017 	ldw	r4,0(r23)
    9108:	00bfffc4 	movi	r2,-1
    910c:	2080ee26 	beq	r4,r2,94c8 <_malloc_r+0x778>
    9110:	a185c83a 	sub	r2,r20,r6
    9114:	10c5883a 	add	r2,r2,r3
    9118:	e0800015 	stw	r2,0(fp)
    911c:	a0c001cc 	andi	r3,r20,7
    9120:	1800bc26 	beq	r3,zero,9414 <_malloc_r+0x6c4>
    9124:	a0e9c83a 	sub	r20,r20,r3
    9128:	00840204 	movi	r2,4104
    912c:	a5000204 	addi	r20,r20,8
    9130:	10c7c83a 	sub	r3,r2,r3
    9134:	a545883a 	add	r2,r20,r21
    9138:	1083ffcc 	andi	r2,r2,4095
    913c:	18abc83a 	sub	r21,r3,r2
    9140:	a80b883a 	mov	r5,r21
    9144:	9009883a 	mov	r4,r18
    9148:	0009f700 	call	9f70 <_sbrk_r>
    914c:	00ffffc4 	movi	r3,-1
    9150:	10c0e126 	beq	r2,r3,94d8 <_malloc_r+0x788>
    9154:	1505c83a 	sub	r2,r2,r20
    9158:	1545883a 	add	r2,r2,r21
    915c:	10800054 	ori	r2,r2,1
    9160:	e0c00017 	ldw	r3,0(fp)
    9164:	9d000215 	stw	r20,8(r19)
    9168:	a0800115 	stw	r2,4(r20)
    916c:	a8c7883a 	add	r3,r21,r3
    9170:	e0c00015 	stw	r3,0(fp)
    9174:	84c00e26 	beq	r16,r19,91b0 <_malloc_r+0x460>
    9178:	018003c4 	movi	r6,15
    917c:	3580a72e 	bgeu	r6,r22,941c <_malloc_r+0x6cc>
    9180:	81400117 	ldw	r5,4(r16)
    9184:	013ffe04 	movi	r4,-8
    9188:	b0bffd04 	addi	r2,r22,-12
    918c:	1104703a 	and	r2,r2,r4
    9190:	2900004c 	andi	r4,r5,1
    9194:	2088b03a 	or	r4,r4,r2
    9198:	81000115 	stw	r4,4(r16)
    919c:	01400144 	movi	r5,5
    91a0:	8089883a 	add	r4,r16,r2
    91a4:	21400115 	stw	r5,4(r4)
    91a8:	21400215 	stw	r5,8(r4)
    91ac:	3080cd36 	bltu	r6,r2,94e4 <_malloc_r+0x794>
    91b0:	00800074 	movhi	r2,1
    91b4:	10b79b04 	addi	r2,r2,-8596
    91b8:	11000017 	ldw	r4,0(r2)
    91bc:	20c0012e 	bgeu	r4,r3,91c4 <_malloc_r+0x474>
    91c0:	10c00015 	stw	r3,0(r2)
    91c4:	00800074 	movhi	r2,1
    91c8:	10b79a04 	addi	r2,r2,-8600
    91cc:	11000017 	ldw	r4,0(r2)
    91d0:	9c000217 	ldw	r16,8(r19)
    91d4:	20c0012e 	bgeu	r4,r3,91dc <_malloc_r+0x48c>
    91d8:	10c00015 	stw	r3,0(r2)
    91dc:	80c00117 	ldw	r3,4(r16)
    91e0:	00bfff04 	movi	r2,-4
    91e4:	1886703a 	and	r3,r3,r2
    91e8:	1c45c83a 	sub	r2,r3,r17
    91ec:	1c400236 	bltu	r3,r17,91f8 <_malloc_r+0x4a8>
    91f0:	00c003c4 	movi	r3,15
    91f4:	18800416 	blt	r3,r2,9208 <_malloc_r+0x4b8>
    91f8:	9009883a 	mov	r4,r18
    91fc:	000b5b00 	call	b5b0 <__malloc_unlock>
    9200:	0005883a 	mov	r2,zero
    9204:	003f7b06 	br	8ff4 <_malloc_r+0x2a4>
    9208:	88c00054 	ori	r3,r17,1
    920c:	80c00115 	stw	r3,4(r16)
    9210:	8463883a 	add	r17,r16,r17
    9214:	10800054 	ori	r2,r2,1
    9218:	9c400215 	stw	r17,8(r19)
    921c:	88800115 	stw	r2,4(r17)
    9220:	9009883a 	mov	r4,r18
    9224:	000b5b00 	call	b5b0 <__malloc_unlock>
    9228:	80800204 	addi	r2,r16,8
    922c:	003f7106 	br	8ff4 <_malloc_r+0x2a4>
    9230:	00c00504 	movi	r3,20
    9234:	18804a2e 	bgeu	r3,r2,9360 <_malloc_r+0x610>
    9238:	00c01504 	movi	r3,84
    923c:	18806e36 	bltu	r3,r2,93f8 <_malloc_r+0x6a8>
    9240:	8804d33a 	srli	r2,r17,12
    9244:	12001bc4 	addi	r8,r2,111
    9248:	11c01b84 	addi	r7,r2,110
    924c:	4209883a 	add	r4,r8,r8
    9250:	003edd06 	br	8dc8 <_malloc_r+0x78>
    9254:	3804d27a 	srli	r2,r7,9
    9258:	00c00104 	movi	r3,4
    925c:	1880442e 	bgeu	r3,r2,9370 <_malloc_r+0x620>
    9260:	00c00504 	movi	r3,20
    9264:	18808136 	bltu	r3,r2,946c <_malloc_r+0x71c>
    9268:	11401704 	addi	r5,r2,92
    926c:	10c016c4 	addi	r3,r2,91
    9270:	294b883a 	add	r5,r5,r5
    9274:	294b883a 	add	r5,r5,r5
    9278:	294b883a 	add	r5,r5,r5
    927c:	994b883a 	add	r5,r19,r5
    9280:	28800017 	ldw	r2,0(r5)
    9284:	01800074 	movhi	r6,1
    9288:	297ffe04 	addi	r5,r5,-8
    928c:	31b38d04 	addi	r6,r6,-12748
    9290:	28806526 	beq	r5,r2,9428 <_malloc_r+0x6d8>
    9294:	01bfff04 	movi	r6,-4
    9298:	10c00117 	ldw	r3,4(r2)
    929c:	1986703a 	and	r3,r3,r6
    92a0:	38c0022e 	bgeu	r7,r3,92ac <_malloc_r+0x55c>
    92a4:	10800217 	ldw	r2,8(r2)
    92a8:	28bffb1e 	bne	r5,r2,9298 <_malloc_r+0x548>
    92ac:	11400317 	ldw	r5,12(r2)
    92b0:	98c00117 	ldw	r3,4(r19)
    92b4:	81400315 	stw	r5,12(r16)
    92b8:	80800215 	stw	r2,8(r16)
    92bc:	2c000215 	stw	r16,8(r5)
    92c0:	14000315 	stw	r16,12(r2)
    92c4:	003ef806 	br	8ea8 <_malloc_r+0x158>
    92c8:	88c00054 	ori	r3,r17,1
    92cc:	80c00115 	stw	r3,4(r16)
    92d0:	8463883a 	add	r17,r16,r17
    92d4:	34400515 	stw	r17,20(r6)
    92d8:	34400415 	stw	r17,16(r6)
    92dc:	10c00054 	ori	r3,r2,1
    92e0:	8a000315 	stw	r8,12(r17)
    92e4:	8a000215 	stw	r8,8(r17)
    92e8:	88c00115 	stw	r3,4(r17)
    92ec:	88a3883a 	add	r17,r17,r2
    92f0:	88800015 	stw	r2,0(r17)
    92f4:	9009883a 	mov	r4,r18
    92f8:	000b5b00 	call	b5b0 <__malloc_unlock>
    92fc:	80800204 	addi	r2,r16,8
    9300:	003f3c06 	br	8ff4 <_malloc_r+0x2a4>
    9304:	30c00117 	ldw	r3,4(r6)
    9308:	003ee706 	br	8ea8 <_malloc_r+0x158>
    930c:	5ac00044 	addi	r11,r11,1
    9310:	588000cc 	andi	r2,r11,3
    9314:	31800204 	addi	r6,r6,8
    9318:	103efd1e 	bne	r2,zero,8f10 <_malloc_r+0x1c0>
    931c:	00002406 	br	93b0 <_malloc_r+0x660>
    9320:	14000317 	ldw	r16,12(r2)
    9324:	143f251e 	bne	r2,r16,8fbc <_malloc_r+0x26c>
    9328:	21000084 	addi	r4,r4,2
    932c:	003ebc06 	br	8e20 <_malloc_r+0xd0>
    9330:	8085883a 	add	r2,r16,r2
    9334:	10c00117 	ldw	r3,4(r2)
    9338:	81000317 	ldw	r4,12(r16)
    933c:	81400217 	ldw	r5,8(r16)
    9340:	18c00054 	ori	r3,r3,1
    9344:	10c00115 	stw	r3,4(r2)
    9348:	29000315 	stw	r4,12(r5)
    934c:	21400215 	stw	r5,8(r4)
    9350:	9009883a 	mov	r4,r18
    9354:	000b5b00 	call	b5b0 <__malloc_unlock>
    9358:	80800204 	addi	r2,r16,8
    935c:	003f2506 	br	8ff4 <_malloc_r+0x2a4>
    9360:	12001704 	addi	r8,r2,92
    9364:	11c016c4 	addi	r7,r2,91
    9368:	4209883a 	add	r4,r8,r8
    936c:	003e9606 	br	8dc8 <_malloc_r+0x78>
    9370:	3804d1ba 	srli	r2,r7,6
    9374:	11400e44 	addi	r5,r2,57
    9378:	10c00e04 	addi	r3,r2,56
    937c:	294b883a 	add	r5,r5,r5
    9380:	003fbc06 	br	9274 <_malloc_r+0x524>
    9384:	84ff5926 	beq	r16,r19,90ec <_malloc_r+0x39c>
    9388:	00800074 	movhi	r2,1
    938c:	10b38d04 	addi	r2,r2,-12748
    9390:	14000217 	ldw	r16,8(r2)
    9394:	00bfff04 	movi	r2,-4
    9398:	80c00117 	ldw	r3,4(r16)
    939c:	1886703a 	and	r3,r3,r2
    93a0:	003f9106 	br	91e8 <_malloc_r+0x498>
    93a4:	60800217 	ldw	r2,8(r12)
    93a8:	213fffc4 	addi	r4,r4,-1
    93ac:	1300651e 	bne	r2,r12,9544 <_malloc_r+0x7f4>
    93b0:	208000cc 	andi	r2,r4,3
    93b4:	633ffe04 	addi	r12,r12,-8
    93b8:	103ffa1e 	bne	r2,zero,93a4 <_malloc_r+0x654>
    93bc:	98800117 	ldw	r2,4(r19)
    93c0:	0146303a 	nor	r3,zero,r5
    93c4:	1884703a 	and	r2,r3,r2
    93c8:	98800115 	stw	r2,4(r19)
    93cc:	294b883a 	add	r5,r5,r5
    93d0:	117f2836 	bltu	r2,r5,9074 <_malloc_r+0x324>
    93d4:	283f2726 	beq	r5,zero,9074 <_malloc_r+0x324>
    93d8:	2886703a 	and	r3,r5,r2
    93dc:	5809883a 	mov	r4,r11
    93e0:	183ec31e 	bne	r3,zero,8ef0 <_malloc_r+0x1a0>
    93e4:	294b883a 	add	r5,r5,r5
    93e8:	2886703a 	and	r3,r5,r2
    93ec:	21000104 	addi	r4,r4,4
    93f0:	183ffc26 	beq	r3,zero,93e4 <_malloc_r+0x694>
    93f4:	003ebe06 	br	8ef0 <_malloc_r+0x1a0>
    93f8:	00c05504 	movi	r3,340
    93fc:	18801236 	bltu	r3,r2,9448 <_malloc_r+0x6f8>
    9400:	8804d3fa 	srli	r2,r17,15
    9404:	12001e04 	addi	r8,r2,120
    9408:	11c01dc4 	addi	r7,r2,119
    940c:	4209883a 	add	r4,r8,r8
    9410:	003e6d06 	br	8dc8 <_malloc_r+0x78>
    9414:	00c40004 	movi	r3,4096
    9418:	003f4606 	br	9134 <_malloc_r+0x3e4>
    941c:	00800044 	movi	r2,1
    9420:	a0800115 	stw	r2,4(r20)
    9424:	003f7406 	br	91f8 <_malloc_r+0x4a8>
    9428:	1805d0ba 	srai	r2,r3,2
    942c:	01c00044 	movi	r7,1
    9430:	30c00117 	ldw	r3,4(r6)
    9434:	388e983a 	sll	r7,r7,r2
    9438:	2805883a 	mov	r2,r5
    943c:	38c6b03a 	or	r3,r7,r3
    9440:	30c00115 	stw	r3,4(r6)
    9444:	003f9b06 	br	92b4 <_malloc_r+0x564>
    9448:	00c15504 	movi	r3,1364
    944c:	18801a36 	bltu	r3,r2,94b8 <_malloc_r+0x768>
    9450:	8804d4ba 	srli	r2,r17,18
    9454:	12001f44 	addi	r8,r2,125
    9458:	11c01f04 	addi	r7,r2,124
    945c:	4209883a 	add	r4,r8,r8
    9460:	003e5906 	br	8dc8 <_malloc_r+0x78>
    9464:	ad400404 	addi	r21,r21,16
    9468:	003f1706 	br	90c8 <_malloc_r+0x378>
    946c:	00c01504 	movi	r3,84
    9470:	18802336 	bltu	r3,r2,9500 <_malloc_r+0x7b0>
    9474:	3804d33a 	srli	r2,r7,12
    9478:	11401bc4 	addi	r5,r2,111
    947c:	10c01b84 	addi	r3,r2,110
    9480:	294b883a 	add	r5,r5,r5
    9484:	003f7b06 	br	9274 <_malloc_r+0x524>
    9488:	9c000217 	ldw	r16,8(r19)
    948c:	00bfff04 	movi	r2,-4
    9490:	80c00117 	ldw	r3,4(r16)
    9494:	1886703a 	and	r3,r3,r2
    9498:	003f5306 	br	91e8 <_malloc_r+0x498>
    949c:	3083ffcc 	andi	r2,r6,4095
    94a0:	103f181e 	bne	r2,zero,9104 <_malloc_r+0x3b4>
    94a4:	99000217 	ldw	r4,8(r19)
    94a8:	b545883a 	add	r2,r22,r21
    94ac:	10800054 	ori	r2,r2,1
    94b0:	20800115 	stw	r2,4(r4)
    94b4:	003f3e06 	br	91b0 <_malloc_r+0x460>
    94b8:	01003f84 	movi	r4,254
    94bc:	02001fc4 	movi	r8,127
    94c0:	01c01f84 	movi	r7,126
    94c4:	003e4006 	br	8dc8 <_malloc_r+0x78>
    94c8:	00800074 	movhi	r2,1
    94cc:	10b50604 	addi	r2,r2,-11240
    94d0:	15000015 	stw	r20,0(r2)
    94d4:	003f1106 	br	911c <_malloc_r+0x3cc>
    94d8:	00800044 	movi	r2,1
    94dc:	002b883a 	mov	r21,zero
    94e0:	003f1f06 	br	9160 <_malloc_r+0x410>
    94e4:	81400204 	addi	r5,r16,8
    94e8:	9009883a 	mov	r4,r18
    94ec:	000a7d80 	call	a7d8 <_free_r>
    94f0:	00800074 	movhi	r2,1
    94f4:	10b7a104 	addi	r2,r2,-8572
    94f8:	10c00017 	ldw	r3,0(r2)
    94fc:	003f2c06 	br	91b0 <_malloc_r+0x460>
    9500:	00c05504 	movi	r3,340
    9504:	18800536 	bltu	r3,r2,951c <_malloc_r+0x7cc>
    9508:	3804d3fa 	srli	r2,r7,15
    950c:	11401e04 	addi	r5,r2,120
    9510:	10c01dc4 	addi	r3,r2,119
    9514:	294b883a 	add	r5,r5,r5
    9518:	003f5606 	br	9274 <_malloc_r+0x524>
    951c:	00c15504 	movi	r3,1364
    9520:	18800536 	bltu	r3,r2,9538 <_malloc_r+0x7e8>
    9524:	3804d4ba 	srli	r2,r7,18
    9528:	11401f44 	addi	r5,r2,125
    952c:	10c01f04 	addi	r3,r2,124
    9530:	294b883a 	add	r5,r5,r5
    9534:	003f4f06 	br	9274 <_malloc_r+0x524>
    9538:	01403f84 	movi	r5,254
    953c:	00c01f84 	movi	r3,126
    9540:	003f4c06 	br	9274 <_malloc_r+0x524>
    9544:	98800117 	ldw	r2,4(r19)
    9548:	003fa006 	br	93cc <_malloc_r+0x67c>
    954c:	8808d0fa 	srli	r4,r17,3
    9550:	20800044 	addi	r2,r4,1
    9554:	1085883a 	add	r2,r2,r2
    9558:	003e9006 	br	8f9c <_malloc_r+0x24c>

0000955c <memchr>:
    955c:	208000cc 	andi	r2,r4,3
    9560:	280f883a 	mov	r7,r5
    9564:	10003426 	beq	r2,zero,9638 <memchr+0xdc>
    9568:	30bfffc4 	addi	r2,r6,-1
    956c:	30001a26 	beq	r6,zero,95d8 <memchr+0x7c>
    9570:	20c00003 	ldbu	r3,0(r4)
    9574:	29803fcc 	andi	r6,r5,255
    9578:	30c0051e 	bne	r6,r3,9590 <memchr+0x34>
    957c:	00001806 	br	95e0 <memchr+0x84>
    9580:	10001526 	beq	r2,zero,95d8 <memchr+0x7c>
    9584:	20c00003 	ldbu	r3,0(r4)
    9588:	10bfffc4 	addi	r2,r2,-1
    958c:	30c01426 	beq	r6,r3,95e0 <memchr+0x84>
    9590:	21000044 	addi	r4,r4,1
    9594:	20c000cc 	andi	r3,r4,3
    9598:	183ff91e 	bne	r3,zero,9580 <memchr+0x24>
    959c:	020000c4 	movi	r8,3
    95a0:	40801136 	bltu	r8,r2,95e8 <memchr+0x8c>
    95a4:	10000c26 	beq	r2,zero,95d8 <memchr+0x7c>
    95a8:	20c00003 	ldbu	r3,0(r4)
    95ac:	29403fcc 	andi	r5,r5,255
    95b0:	28c00b26 	beq	r5,r3,95e0 <memchr+0x84>
    95b4:	20c00044 	addi	r3,r4,1
    95b8:	39803fcc 	andi	r6,r7,255
    95bc:	2089883a 	add	r4,r4,r2
    95c0:	00000306 	br	95d0 <memchr+0x74>
    95c4:	18c00044 	addi	r3,r3,1
    95c8:	197fffc3 	ldbu	r5,-1(r3)
    95cc:	31400526 	beq	r6,r5,95e4 <memchr+0x88>
    95d0:	1805883a 	mov	r2,r3
    95d4:	20fffb1e 	bne	r4,r3,95c4 <memchr+0x68>
    95d8:	0005883a 	mov	r2,zero
    95dc:	f800283a 	ret
    95e0:	2005883a 	mov	r2,r4
    95e4:	f800283a 	ret
    95e8:	28c03fcc 	andi	r3,r5,255
    95ec:	1812923a 	slli	r9,r3,8
    95f0:	02ffbff4 	movhi	r11,65279
    95f4:	02a02074 	movhi	r10,32897
    95f8:	48d2b03a 	or	r9,r9,r3
    95fc:	4806943a 	slli	r3,r9,16
    9600:	5affbfc4 	addi	r11,r11,-257
    9604:	52a02004 	addi	r10,r10,-32640
    9608:	48d2b03a 	or	r9,r9,r3
    960c:	20c00017 	ldw	r3,0(r4)
    9610:	48c6f03a 	xor	r3,r9,r3
    9614:	1acd883a 	add	r6,r3,r11
    9618:	00c6303a 	nor	r3,zero,r3
    961c:	30c6703a 	and	r3,r6,r3
    9620:	1a86703a 	and	r3,r3,r10
    9624:	183fe01e 	bne	r3,zero,95a8 <memchr+0x4c>
    9628:	10bfff04 	addi	r2,r2,-4
    962c:	21000104 	addi	r4,r4,4
    9630:	40bff636 	bltu	r8,r2,960c <memchr+0xb0>
    9634:	003fdb06 	br	95a4 <memchr+0x48>
    9638:	3005883a 	mov	r2,r6
    963c:	003fd706 	br	959c <memchr+0x40>

00009640 <memcpy>:
    9640:	defffd04 	addi	sp,sp,-12
    9644:	dfc00215 	stw	ra,8(sp)
    9648:	dc400115 	stw	r17,4(sp)
    964c:	dc000015 	stw	r16,0(sp)
    9650:	00c003c4 	movi	r3,15
    9654:	2005883a 	mov	r2,r4
    9658:	1980452e 	bgeu	r3,r6,9770 <memcpy+0x130>
    965c:	2906b03a 	or	r3,r5,r4
    9660:	18c000cc 	andi	r3,r3,3
    9664:	1800441e 	bne	r3,zero,9778 <memcpy+0x138>
    9668:	347ffc04 	addi	r17,r6,-16
    966c:	8822d13a 	srli	r17,r17,4
    9670:	28c00104 	addi	r3,r5,4
    9674:	23400104 	addi	r13,r4,4
    9678:	8820913a 	slli	r16,r17,4
    967c:	2b000204 	addi	r12,r5,8
    9680:	22c00204 	addi	r11,r4,8
    9684:	84000504 	addi	r16,r16,20
    9688:	2a800304 	addi	r10,r5,12
    968c:	22400304 	addi	r9,r4,12
    9690:	2c21883a 	add	r16,r5,r16
    9694:	2811883a 	mov	r8,r5
    9698:	200f883a 	mov	r7,r4
    969c:	41000017 	ldw	r4,0(r8)
    96a0:	1fc00017 	ldw	ra,0(r3)
    96a4:	63c00017 	ldw	r15,0(r12)
    96a8:	39000015 	stw	r4,0(r7)
    96ac:	53800017 	ldw	r14,0(r10)
    96b0:	6fc00015 	stw	ra,0(r13)
    96b4:	5bc00015 	stw	r15,0(r11)
    96b8:	4b800015 	stw	r14,0(r9)
    96bc:	18c00404 	addi	r3,r3,16
    96c0:	39c00404 	addi	r7,r7,16
    96c4:	42000404 	addi	r8,r8,16
    96c8:	6b400404 	addi	r13,r13,16
    96cc:	63000404 	addi	r12,r12,16
    96d0:	5ac00404 	addi	r11,r11,16
    96d4:	52800404 	addi	r10,r10,16
    96d8:	4a400404 	addi	r9,r9,16
    96dc:	1c3fef1e 	bne	r3,r16,969c <memcpy+0x5c>
    96e0:	89c00044 	addi	r7,r17,1
    96e4:	380e913a 	slli	r7,r7,4
    96e8:	310003cc 	andi	r4,r6,15
    96ec:	02c000c4 	movi	r11,3
    96f0:	11c7883a 	add	r3,r2,r7
    96f4:	29cb883a 	add	r5,r5,r7
    96f8:	5900212e 	bgeu	r11,r4,9780 <memcpy+0x140>
    96fc:	1813883a 	mov	r9,r3
    9700:	2811883a 	mov	r8,r5
    9704:	200f883a 	mov	r7,r4
    9708:	42800017 	ldw	r10,0(r8)
    970c:	4a400104 	addi	r9,r9,4
    9710:	39ffff04 	addi	r7,r7,-4
    9714:	4abfff15 	stw	r10,-4(r9)
    9718:	42000104 	addi	r8,r8,4
    971c:	59fffa36 	bltu	r11,r7,9708 <memcpy+0xc8>
    9720:	213fff04 	addi	r4,r4,-4
    9724:	2008d0ba 	srli	r4,r4,2
    9728:	318000cc 	andi	r6,r6,3
    972c:	21000044 	addi	r4,r4,1
    9730:	2109883a 	add	r4,r4,r4
    9734:	2109883a 	add	r4,r4,r4
    9738:	1907883a 	add	r3,r3,r4
    973c:	290b883a 	add	r5,r5,r4
    9740:	30000626 	beq	r6,zero,975c <memcpy+0x11c>
    9744:	198d883a 	add	r6,r3,r6
    9748:	29c00003 	ldbu	r7,0(r5)
    974c:	18c00044 	addi	r3,r3,1
    9750:	29400044 	addi	r5,r5,1
    9754:	19ffffc5 	stb	r7,-1(r3)
    9758:	19bffb1e 	bne	r3,r6,9748 <memcpy+0x108>
    975c:	dfc00217 	ldw	ra,8(sp)
    9760:	dc400117 	ldw	r17,4(sp)
    9764:	dc000017 	ldw	r16,0(sp)
    9768:	dec00304 	addi	sp,sp,12
    976c:	f800283a 	ret
    9770:	2007883a 	mov	r3,r4
    9774:	003ff206 	br	9740 <memcpy+0x100>
    9778:	2007883a 	mov	r3,r4
    977c:	003ff106 	br	9744 <memcpy+0x104>
    9780:	200d883a 	mov	r6,r4
    9784:	003fee06 	br	9740 <memcpy+0x100>

00009788 <memmove>:
    9788:	2005883a 	mov	r2,r4
    978c:	29000b2e 	bgeu	r5,r4,97bc <memmove+0x34>
    9790:	298f883a 	add	r7,r5,r6
    9794:	21c0092e 	bgeu	r4,r7,97bc <memmove+0x34>
    9798:	2187883a 	add	r3,r4,r6
    979c:	198bc83a 	sub	r5,r3,r6
    97a0:	30004826 	beq	r6,zero,98c4 <memmove+0x13c>
    97a4:	39ffffc4 	addi	r7,r7,-1
    97a8:	39000003 	ldbu	r4,0(r7)
    97ac:	18ffffc4 	addi	r3,r3,-1
    97b0:	19000005 	stb	r4,0(r3)
    97b4:	28fffb1e 	bne	r5,r3,97a4 <memmove+0x1c>
    97b8:	f800283a 	ret
    97bc:	00c003c4 	movi	r3,15
    97c0:	1980412e 	bgeu	r3,r6,98c8 <memmove+0x140>
    97c4:	2886b03a 	or	r3,r5,r2
    97c8:	18c000cc 	andi	r3,r3,3
    97cc:	1800401e 	bne	r3,zero,98d0 <memmove+0x148>
    97d0:	33fffc04 	addi	r15,r6,-16
    97d4:	781ed13a 	srli	r15,r15,4
    97d8:	28c00104 	addi	r3,r5,4
    97dc:	13400104 	addi	r13,r2,4
    97e0:	781c913a 	slli	r14,r15,4
    97e4:	2b000204 	addi	r12,r5,8
    97e8:	12c00204 	addi	r11,r2,8
    97ec:	73800504 	addi	r14,r14,20
    97f0:	2a800304 	addi	r10,r5,12
    97f4:	12400304 	addi	r9,r2,12
    97f8:	2b9d883a 	add	r14,r5,r14
    97fc:	2811883a 	mov	r8,r5
    9800:	100f883a 	mov	r7,r2
    9804:	41000017 	ldw	r4,0(r8)
    9808:	39c00404 	addi	r7,r7,16
    980c:	18c00404 	addi	r3,r3,16
    9810:	393ffc15 	stw	r4,-16(r7)
    9814:	193ffc17 	ldw	r4,-16(r3)
    9818:	6b400404 	addi	r13,r13,16
    981c:	5ac00404 	addi	r11,r11,16
    9820:	693ffc15 	stw	r4,-16(r13)
    9824:	61000017 	ldw	r4,0(r12)
    9828:	4a400404 	addi	r9,r9,16
    982c:	42000404 	addi	r8,r8,16
    9830:	593ffc15 	stw	r4,-16(r11)
    9834:	51000017 	ldw	r4,0(r10)
    9838:	63000404 	addi	r12,r12,16
    983c:	52800404 	addi	r10,r10,16
    9840:	493ffc15 	stw	r4,-16(r9)
    9844:	1bbfef1e 	bne	r3,r14,9804 <memmove+0x7c>
    9848:	79000044 	addi	r4,r15,1
    984c:	2008913a 	slli	r4,r4,4
    9850:	328003cc 	andi	r10,r6,15
    9854:	02c000c4 	movi	r11,3
    9858:	1107883a 	add	r3,r2,r4
    985c:	290b883a 	add	r5,r5,r4
    9860:	5a801e2e 	bgeu	r11,r10,98dc <memmove+0x154>
    9864:	1813883a 	mov	r9,r3
    9868:	2811883a 	mov	r8,r5
    986c:	500f883a 	mov	r7,r10
    9870:	41000017 	ldw	r4,0(r8)
    9874:	4a400104 	addi	r9,r9,4
    9878:	39ffff04 	addi	r7,r7,-4
    987c:	493fff15 	stw	r4,-4(r9)
    9880:	42000104 	addi	r8,r8,4
    9884:	59fffa36 	bltu	r11,r7,9870 <memmove+0xe8>
    9888:	513fff04 	addi	r4,r10,-4
    988c:	2008d0ba 	srli	r4,r4,2
    9890:	318000cc 	andi	r6,r6,3
    9894:	21000044 	addi	r4,r4,1
    9898:	2109883a 	add	r4,r4,r4
    989c:	2109883a 	add	r4,r4,r4
    98a0:	1907883a 	add	r3,r3,r4
    98a4:	290b883a 	add	r5,r5,r4
    98a8:	30000b26 	beq	r6,zero,98d8 <memmove+0x150>
    98ac:	198d883a 	add	r6,r3,r6
    98b0:	29c00003 	ldbu	r7,0(r5)
    98b4:	18c00044 	addi	r3,r3,1
    98b8:	29400044 	addi	r5,r5,1
    98bc:	19ffffc5 	stb	r7,-1(r3)
    98c0:	19bffb1e 	bne	r3,r6,98b0 <memmove+0x128>
    98c4:	f800283a 	ret
    98c8:	1007883a 	mov	r3,r2
    98cc:	003ff606 	br	98a8 <memmove+0x120>
    98d0:	1007883a 	mov	r3,r2
    98d4:	003ff506 	br	98ac <memmove+0x124>
    98d8:	f800283a 	ret
    98dc:	500d883a 	mov	r6,r10
    98e0:	003ff106 	br	98a8 <memmove+0x120>

000098e4 <memset>:
    98e4:	20c000cc 	andi	r3,r4,3
    98e8:	2005883a 	mov	r2,r4
    98ec:	18004426 	beq	r3,zero,9a00 <memset+0x11c>
    98f0:	31ffffc4 	addi	r7,r6,-1
    98f4:	30004026 	beq	r6,zero,99f8 <memset+0x114>
    98f8:	2813883a 	mov	r9,r5
    98fc:	200d883a 	mov	r6,r4
    9900:	2007883a 	mov	r3,r4
    9904:	00000406 	br	9918 <memset+0x34>
    9908:	3a3fffc4 	addi	r8,r7,-1
    990c:	31800044 	addi	r6,r6,1
    9910:	38003926 	beq	r7,zero,99f8 <memset+0x114>
    9914:	400f883a 	mov	r7,r8
    9918:	18c00044 	addi	r3,r3,1
    991c:	32400005 	stb	r9,0(r6)
    9920:	1a0000cc 	andi	r8,r3,3
    9924:	403ff81e 	bne	r8,zero,9908 <memset+0x24>
    9928:	010000c4 	movi	r4,3
    992c:	21c02d2e 	bgeu	r4,r7,99e4 <memset+0x100>
    9930:	29003fcc 	andi	r4,r5,255
    9934:	200c923a 	slli	r6,r4,8
    9938:	3108b03a 	or	r4,r6,r4
    993c:	200c943a 	slli	r6,r4,16
    9940:	218cb03a 	or	r6,r4,r6
    9944:	010003c4 	movi	r4,15
    9948:	21c0182e 	bgeu	r4,r7,99ac <memset+0xc8>
    994c:	3b3ffc04 	addi	r12,r7,-16
    9950:	6018d13a 	srli	r12,r12,4
    9954:	1a000104 	addi	r8,r3,4
    9958:	1ac00204 	addi	r11,r3,8
    995c:	6008913a 	slli	r4,r12,4
    9960:	1a800304 	addi	r10,r3,12
    9964:	1813883a 	mov	r9,r3
    9968:	21000504 	addi	r4,r4,20
    996c:	1909883a 	add	r4,r3,r4
    9970:	49800015 	stw	r6,0(r9)
    9974:	41800015 	stw	r6,0(r8)
    9978:	59800015 	stw	r6,0(r11)
    997c:	51800015 	stw	r6,0(r10)
    9980:	42000404 	addi	r8,r8,16
    9984:	4a400404 	addi	r9,r9,16
    9988:	5ac00404 	addi	r11,r11,16
    998c:	52800404 	addi	r10,r10,16
    9990:	413ff71e 	bne	r8,r4,9970 <memset+0x8c>
    9994:	63000044 	addi	r12,r12,1
    9998:	6018913a 	slli	r12,r12,4
    999c:	39c003cc 	andi	r7,r7,15
    99a0:	010000c4 	movi	r4,3
    99a4:	1b07883a 	add	r3,r3,r12
    99a8:	21c00e2e 	bgeu	r4,r7,99e4 <memset+0x100>
    99ac:	1813883a 	mov	r9,r3
    99b0:	3811883a 	mov	r8,r7
    99b4:	010000c4 	movi	r4,3
    99b8:	49800015 	stw	r6,0(r9)
    99bc:	423fff04 	addi	r8,r8,-4
    99c0:	4a400104 	addi	r9,r9,4
    99c4:	223ffc36 	bltu	r4,r8,99b8 <memset+0xd4>
    99c8:	393fff04 	addi	r4,r7,-4
    99cc:	2008d0ba 	srli	r4,r4,2
    99d0:	39c000cc 	andi	r7,r7,3
    99d4:	21000044 	addi	r4,r4,1
    99d8:	2109883a 	add	r4,r4,r4
    99dc:	2109883a 	add	r4,r4,r4
    99e0:	1907883a 	add	r3,r3,r4
    99e4:	38000526 	beq	r7,zero,99fc <memset+0x118>
    99e8:	19cf883a 	add	r7,r3,r7
    99ec:	19400005 	stb	r5,0(r3)
    99f0:	18c00044 	addi	r3,r3,1
    99f4:	38fffd1e 	bne	r7,r3,99ec <memset+0x108>
    99f8:	f800283a 	ret
    99fc:	f800283a 	ret
    9a00:	2007883a 	mov	r3,r4
    9a04:	300f883a 	mov	r7,r6
    9a08:	003fc706 	br	9928 <memset+0x44>

00009a0c <_realloc_r>:
    9a0c:	defff604 	addi	sp,sp,-40
    9a10:	dc800215 	stw	r18,8(sp)
    9a14:	dfc00915 	stw	ra,36(sp)
    9a18:	df000815 	stw	fp,32(sp)
    9a1c:	ddc00715 	stw	r23,28(sp)
    9a20:	dd800615 	stw	r22,24(sp)
    9a24:	dd400515 	stw	r21,20(sp)
    9a28:	dd000415 	stw	r20,16(sp)
    9a2c:	dcc00315 	stw	r19,12(sp)
    9a30:	dc400115 	stw	r17,4(sp)
    9a34:	dc000015 	stw	r16,0(sp)
    9a38:	3025883a 	mov	r18,r6
    9a3c:	2800b726 	beq	r5,zero,9d1c <_realloc_r+0x310>
    9a40:	282b883a 	mov	r21,r5
    9a44:	2029883a 	mov	r20,r4
    9a48:	000b58c0 	call	b58c <__malloc_lock>
    9a4c:	a8bfff17 	ldw	r2,-4(r21)
    9a50:	043fff04 	movi	r16,-4
    9a54:	90c002c4 	addi	r3,r18,11
    9a58:	01000584 	movi	r4,22
    9a5c:	acfffe04 	addi	r19,r21,-8
    9a60:	1420703a 	and	r16,r2,r16
    9a64:	20c0332e 	bgeu	r4,r3,9b34 <_realloc_r+0x128>
    9a68:	047ffe04 	movi	r17,-8
    9a6c:	1c62703a 	and	r17,r3,r17
    9a70:	8807883a 	mov	r3,r17
    9a74:	88005816 	blt	r17,zero,9bd8 <_realloc_r+0x1cc>
    9a78:	8c805736 	bltu	r17,r18,9bd8 <_realloc_r+0x1cc>
    9a7c:	80c0300e 	bge	r16,r3,9b40 <_realloc_r+0x134>
    9a80:	07000074 	movhi	fp,1
    9a84:	e7338d04 	addi	fp,fp,-12748
    9a88:	e1c00217 	ldw	r7,8(fp)
    9a8c:	9c09883a 	add	r4,r19,r16
    9a90:	22000117 	ldw	r8,4(r4)
    9a94:	21c06326 	beq	r4,r7,9c24 <_realloc_r+0x218>
    9a98:	017fff84 	movi	r5,-2
    9a9c:	414a703a 	and	r5,r8,r5
    9aa0:	214b883a 	add	r5,r4,r5
    9aa4:	29800117 	ldw	r6,4(r5)
    9aa8:	3180004c 	andi	r6,r6,1
    9aac:	30003f26 	beq	r6,zero,9bac <_realloc_r+0x1a0>
    9ab0:	1080004c 	andi	r2,r2,1
    9ab4:	10008326 	beq	r2,zero,9cc4 <_realloc_r+0x2b8>
    9ab8:	900b883a 	mov	r5,r18
    9abc:	a009883a 	mov	r4,r20
    9ac0:	0008d500 	call	8d50 <_malloc_r>
    9ac4:	1025883a 	mov	r18,r2
    9ac8:	10011e26 	beq	r2,zero,9f44 <_realloc_r+0x538>
    9acc:	a93fff17 	ldw	r4,-4(r21)
    9ad0:	10fffe04 	addi	r3,r2,-8
    9ad4:	00bfff84 	movi	r2,-2
    9ad8:	2084703a 	and	r2,r4,r2
    9adc:	9885883a 	add	r2,r19,r2
    9ae0:	1880ee26 	beq	r3,r2,9e9c <_realloc_r+0x490>
    9ae4:	81bfff04 	addi	r6,r16,-4
    9ae8:	00800904 	movi	r2,36
    9aec:	1180b836 	bltu	r2,r6,9dd0 <_realloc_r+0x3c4>
    9af0:	00c004c4 	movi	r3,19
    9af4:	19809636 	bltu	r3,r6,9d50 <_realloc_r+0x344>
    9af8:	9005883a 	mov	r2,r18
    9afc:	a807883a 	mov	r3,r21
    9b00:	19000017 	ldw	r4,0(r3)
    9b04:	11000015 	stw	r4,0(r2)
    9b08:	19000117 	ldw	r4,4(r3)
    9b0c:	11000115 	stw	r4,4(r2)
    9b10:	18c00217 	ldw	r3,8(r3)
    9b14:	10c00215 	stw	r3,8(r2)
    9b18:	a80b883a 	mov	r5,r21
    9b1c:	a009883a 	mov	r4,r20
    9b20:	000a7d80 	call	a7d8 <_free_r>
    9b24:	a009883a 	mov	r4,r20
    9b28:	000b5b00 	call	b5b0 <__malloc_unlock>
    9b2c:	9005883a 	mov	r2,r18
    9b30:	00001206 	br	9b7c <_realloc_r+0x170>
    9b34:	00c00404 	movi	r3,16
    9b38:	1823883a 	mov	r17,r3
    9b3c:	003fce06 	br	9a78 <_realloc_r+0x6c>
    9b40:	a825883a 	mov	r18,r21
    9b44:	8445c83a 	sub	r2,r16,r17
    9b48:	00c003c4 	movi	r3,15
    9b4c:	18802636 	bltu	r3,r2,9be8 <_realloc_r+0x1dc>
    9b50:	99800117 	ldw	r6,4(r19)
    9b54:	9c07883a 	add	r3,r19,r16
    9b58:	3180004c 	andi	r6,r6,1
    9b5c:	3420b03a 	or	r16,r6,r16
    9b60:	9c000115 	stw	r16,4(r19)
    9b64:	18800117 	ldw	r2,4(r3)
    9b68:	10800054 	ori	r2,r2,1
    9b6c:	18800115 	stw	r2,4(r3)
    9b70:	a009883a 	mov	r4,r20
    9b74:	000b5b00 	call	b5b0 <__malloc_unlock>
    9b78:	9005883a 	mov	r2,r18
    9b7c:	dfc00917 	ldw	ra,36(sp)
    9b80:	df000817 	ldw	fp,32(sp)
    9b84:	ddc00717 	ldw	r23,28(sp)
    9b88:	dd800617 	ldw	r22,24(sp)
    9b8c:	dd400517 	ldw	r21,20(sp)
    9b90:	dd000417 	ldw	r20,16(sp)
    9b94:	dcc00317 	ldw	r19,12(sp)
    9b98:	dc800217 	ldw	r18,8(sp)
    9b9c:	dc400117 	ldw	r17,4(sp)
    9ba0:	dc000017 	ldw	r16,0(sp)
    9ba4:	dec00a04 	addi	sp,sp,40
    9ba8:	f800283a 	ret
    9bac:	017fff04 	movi	r5,-4
    9bb0:	414a703a 	and	r5,r8,r5
    9bb4:	814d883a 	add	r6,r16,r5
    9bb8:	30c01f16 	blt	r6,r3,9c38 <_realloc_r+0x22c>
    9bbc:	20800317 	ldw	r2,12(r4)
    9bc0:	20c00217 	ldw	r3,8(r4)
    9bc4:	a825883a 	mov	r18,r21
    9bc8:	3021883a 	mov	r16,r6
    9bcc:	18800315 	stw	r2,12(r3)
    9bd0:	10c00215 	stw	r3,8(r2)
    9bd4:	003fdb06 	br	9b44 <_realloc_r+0x138>
    9bd8:	00800304 	movi	r2,12
    9bdc:	a0800015 	stw	r2,0(r20)
    9be0:	0005883a 	mov	r2,zero
    9be4:	003fe506 	br	9b7c <_realloc_r+0x170>
    9be8:	98c00117 	ldw	r3,4(r19)
    9bec:	9c4b883a 	add	r5,r19,r17
    9bf0:	11000054 	ori	r4,r2,1
    9bf4:	18c0004c 	andi	r3,r3,1
    9bf8:	1c62b03a 	or	r17,r3,r17
    9bfc:	9c400115 	stw	r17,4(r19)
    9c00:	29000115 	stw	r4,4(r5)
    9c04:	2885883a 	add	r2,r5,r2
    9c08:	10c00117 	ldw	r3,4(r2)
    9c0c:	29400204 	addi	r5,r5,8
    9c10:	a009883a 	mov	r4,r20
    9c14:	18c00054 	ori	r3,r3,1
    9c18:	10c00115 	stw	r3,4(r2)
    9c1c:	000a7d80 	call	a7d8 <_free_r>
    9c20:	003fd306 	br	9b70 <_realloc_r+0x164>
    9c24:	017fff04 	movi	r5,-4
    9c28:	414a703a 	and	r5,r8,r5
    9c2c:	89800404 	addi	r6,r17,16
    9c30:	8151883a 	add	r8,r16,r5
    9c34:	4180590e 	bge	r8,r6,9d9c <_realloc_r+0x390>
    9c38:	1080004c 	andi	r2,r2,1
    9c3c:	103f9e1e 	bne	r2,zero,9ab8 <_realloc_r+0xac>
    9c40:	adbffe17 	ldw	r22,-8(r21)
    9c44:	00bfff04 	movi	r2,-4
    9c48:	9dadc83a 	sub	r22,r19,r22
    9c4c:	b1800117 	ldw	r6,4(r22)
    9c50:	3084703a 	and	r2,r6,r2
    9c54:	20002026 	beq	r4,zero,9cd8 <_realloc_r+0x2cc>
    9c58:	80af883a 	add	r23,r16,r2
    9c5c:	b96f883a 	add	r23,r23,r5
    9c60:	21c05f26 	beq	r4,r7,9de0 <_realloc_r+0x3d4>
    9c64:	b8c01c16 	blt	r23,r3,9cd8 <_realloc_r+0x2cc>
    9c68:	20800317 	ldw	r2,12(r4)
    9c6c:	20c00217 	ldw	r3,8(r4)
    9c70:	81bfff04 	addi	r6,r16,-4
    9c74:	01000904 	movi	r4,36
    9c78:	18800315 	stw	r2,12(r3)
    9c7c:	10c00215 	stw	r3,8(r2)
    9c80:	b0c00217 	ldw	r3,8(r22)
    9c84:	b0800317 	ldw	r2,12(r22)
    9c88:	b4800204 	addi	r18,r22,8
    9c8c:	18800315 	stw	r2,12(r3)
    9c90:	10c00215 	stw	r3,8(r2)
    9c94:	21801b36 	bltu	r4,r6,9d04 <_realloc_r+0x2f8>
    9c98:	008004c4 	movi	r2,19
    9c9c:	1180352e 	bgeu	r2,r6,9d74 <_realloc_r+0x368>
    9ca0:	a8800017 	ldw	r2,0(r21)
    9ca4:	b0800215 	stw	r2,8(r22)
    9ca8:	a8800117 	ldw	r2,4(r21)
    9cac:	b0800315 	stw	r2,12(r22)
    9cb0:	008006c4 	movi	r2,27
    9cb4:	11807f36 	bltu	r2,r6,9eb4 <_realloc_r+0x4a8>
    9cb8:	b0800404 	addi	r2,r22,16
    9cbc:	ad400204 	addi	r21,r21,8
    9cc0:	00002d06 	br	9d78 <_realloc_r+0x36c>
    9cc4:	adbffe17 	ldw	r22,-8(r21)
    9cc8:	00bfff04 	movi	r2,-4
    9ccc:	9dadc83a 	sub	r22,r19,r22
    9cd0:	b1000117 	ldw	r4,4(r22)
    9cd4:	2084703a 	and	r2,r4,r2
    9cd8:	b03f7726 	beq	r22,zero,9ab8 <_realloc_r+0xac>
    9cdc:	80af883a 	add	r23,r16,r2
    9ce0:	b8ff7516 	blt	r23,r3,9ab8 <_realloc_r+0xac>
    9ce4:	b0800317 	ldw	r2,12(r22)
    9ce8:	b0c00217 	ldw	r3,8(r22)
    9cec:	81bfff04 	addi	r6,r16,-4
    9cf0:	01000904 	movi	r4,36
    9cf4:	18800315 	stw	r2,12(r3)
    9cf8:	10c00215 	stw	r3,8(r2)
    9cfc:	b4800204 	addi	r18,r22,8
    9d00:	21bfe52e 	bgeu	r4,r6,9c98 <_realloc_r+0x28c>
    9d04:	a80b883a 	mov	r5,r21
    9d08:	9009883a 	mov	r4,r18
    9d0c:	00097880 	call	9788 <memmove>
    9d10:	b821883a 	mov	r16,r23
    9d14:	b027883a 	mov	r19,r22
    9d18:	003f8a06 	br	9b44 <_realloc_r+0x138>
    9d1c:	300b883a 	mov	r5,r6
    9d20:	dfc00917 	ldw	ra,36(sp)
    9d24:	df000817 	ldw	fp,32(sp)
    9d28:	ddc00717 	ldw	r23,28(sp)
    9d2c:	dd800617 	ldw	r22,24(sp)
    9d30:	dd400517 	ldw	r21,20(sp)
    9d34:	dd000417 	ldw	r20,16(sp)
    9d38:	dcc00317 	ldw	r19,12(sp)
    9d3c:	dc800217 	ldw	r18,8(sp)
    9d40:	dc400117 	ldw	r17,4(sp)
    9d44:	dc000017 	ldw	r16,0(sp)
    9d48:	dec00a04 	addi	sp,sp,40
    9d4c:	0008d501 	jmpi	8d50 <_malloc_r>
    9d50:	a8c00017 	ldw	r3,0(r21)
    9d54:	90c00015 	stw	r3,0(r18)
    9d58:	a8c00117 	ldw	r3,4(r21)
    9d5c:	90c00115 	stw	r3,4(r18)
    9d60:	00c006c4 	movi	r3,27
    9d64:	19804536 	bltu	r3,r6,9e7c <_realloc_r+0x470>
    9d68:	90800204 	addi	r2,r18,8
    9d6c:	a8c00204 	addi	r3,r21,8
    9d70:	003f6306 	br	9b00 <_realloc_r+0xf4>
    9d74:	9005883a 	mov	r2,r18
    9d78:	a8c00017 	ldw	r3,0(r21)
    9d7c:	b821883a 	mov	r16,r23
    9d80:	b027883a 	mov	r19,r22
    9d84:	10c00015 	stw	r3,0(r2)
    9d88:	a8c00117 	ldw	r3,4(r21)
    9d8c:	10c00115 	stw	r3,4(r2)
    9d90:	a8c00217 	ldw	r3,8(r21)
    9d94:	10c00215 	stw	r3,8(r2)
    9d98:	003f6a06 	br	9b44 <_realloc_r+0x138>
    9d9c:	9c67883a 	add	r19,r19,r17
    9da0:	4445c83a 	sub	r2,r8,r17
    9da4:	e4c00215 	stw	r19,8(fp)
    9da8:	10800054 	ori	r2,r2,1
    9dac:	98800115 	stw	r2,4(r19)
    9db0:	a8bfff17 	ldw	r2,-4(r21)
    9db4:	a009883a 	mov	r4,r20
    9db8:	1080004c 	andi	r2,r2,1
    9dbc:	1462b03a 	or	r17,r2,r17
    9dc0:	ac7fff15 	stw	r17,-4(r21)
    9dc4:	000b5b00 	call	b5b0 <__malloc_unlock>
    9dc8:	a805883a 	mov	r2,r21
    9dcc:	003f6b06 	br	9b7c <_realloc_r+0x170>
    9dd0:	a80b883a 	mov	r5,r21
    9dd4:	9009883a 	mov	r4,r18
    9dd8:	00097880 	call	9788 <memmove>
    9ddc:	003f4e06 	br	9b18 <_realloc_r+0x10c>
    9de0:	89000404 	addi	r4,r17,16
    9de4:	b93fbc16 	blt	r23,r4,9cd8 <_realloc_r+0x2cc>
    9de8:	b0800317 	ldw	r2,12(r22)
    9dec:	b0c00217 	ldw	r3,8(r22)
    9df0:	81bfff04 	addi	r6,r16,-4
    9df4:	01000904 	movi	r4,36
    9df8:	18800315 	stw	r2,12(r3)
    9dfc:	10c00215 	stw	r3,8(r2)
    9e00:	b4800204 	addi	r18,r22,8
    9e04:	21804336 	bltu	r4,r6,9f14 <_realloc_r+0x508>
    9e08:	008004c4 	movi	r2,19
    9e0c:	11803f2e 	bgeu	r2,r6,9f0c <_realloc_r+0x500>
    9e10:	a8800017 	ldw	r2,0(r21)
    9e14:	b0800215 	stw	r2,8(r22)
    9e18:	a8800117 	ldw	r2,4(r21)
    9e1c:	b0800315 	stw	r2,12(r22)
    9e20:	008006c4 	movi	r2,27
    9e24:	11803f36 	bltu	r2,r6,9f24 <_realloc_r+0x518>
    9e28:	b0800404 	addi	r2,r22,16
    9e2c:	ad400204 	addi	r21,r21,8
    9e30:	a8c00017 	ldw	r3,0(r21)
    9e34:	10c00015 	stw	r3,0(r2)
    9e38:	a8c00117 	ldw	r3,4(r21)
    9e3c:	10c00115 	stw	r3,4(r2)
    9e40:	a8c00217 	ldw	r3,8(r21)
    9e44:	10c00215 	stw	r3,8(r2)
    9e48:	b447883a 	add	r3,r22,r17
    9e4c:	bc45c83a 	sub	r2,r23,r17
    9e50:	e0c00215 	stw	r3,8(fp)
    9e54:	10800054 	ori	r2,r2,1
    9e58:	18800115 	stw	r2,4(r3)
    9e5c:	b0800117 	ldw	r2,4(r22)
    9e60:	a009883a 	mov	r4,r20
    9e64:	1080004c 	andi	r2,r2,1
    9e68:	1462b03a 	or	r17,r2,r17
    9e6c:	b4400115 	stw	r17,4(r22)
    9e70:	000b5b00 	call	b5b0 <__malloc_unlock>
    9e74:	9005883a 	mov	r2,r18
    9e78:	003f4006 	br	9b7c <_realloc_r+0x170>
    9e7c:	a8c00217 	ldw	r3,8(r21)
    9e80:	90c00215 	stw	r3,8(r18)
    9e84:	a8c00317 	ldw	r3,12(r21)
    9e88:	90c00315 	stw	r3,12(r18)
    9e8c:	30801126 	beq	r6,r2,9ed4 <_realloc_r+0x4c8>
    9e90:	90800404 	addi	r2,r18,16
    9e94:	a8c00404 	addi	r3,r21,16
    9e98:	003f1906 	br	9b00 <_realloc_r+0xf4>
    9e9c:	90ffff17 	ldw	r3,-4(r18)
    9ea0:	00bfff04 	movi	r2,-4
    9ea4:	a825883a 	mov	r18,r21
    9ea8:	1884703a 	and	r2,r3,r2
    9eac:	80a1883a 	add	r16,r16,r2
    9eb0:	003f2406 	br	9b44 <_realloc_r+0x138>
    9eb4:	a8800217 	ldw	r2,8(r21)
    9eb8:	b0800415 	stw	r2,16(r22)
    9ebc:	a8800317 	ldw	r2,12(r21)
    9ec0:	b0800515 	stw	r2,20(r22)
    9ec4:	31000a26 	beq	r6,r4,9ef0 <_realloc_r+0x4e4>
    9ec8:	b0800604 	addi	r2,r22,24
    9ecc:	ad400404 	addi	r21,r21,16
    9ed0:	003fa906 	br	9d78 <_realloc_r+0x36c>
    9ed4:	a9000417 	ldw	r4,16(r21)
    9ed8:	90800604 	addi	r2,r18,24
    9edc:	a8c00604 	addi	r3,r21,24
    9ee0:	91000415 	stw	r4,16(r18)
    9ee4:	a9000517 	ldw	r4,20(r21)
    9ee8:	91000515 	stw	r4,20(r18)
    9eec:	003f0406 	br	9b00 <_realloc_r+0xf4>
    9ef0:	a8c00417 	ldw	r3,16(r21)
    9ef4:	ad400604 	addi	r21,r21,24
    9ef8:	b0800804 	addi	r2,r22,32
    9efc:	b0c00615 	stw	r3,24(r22)
    9f00:	a8ffff17 	ldw	r3,-4(r21)
    9f04:	b0c00715 	stw	r3,28(r22)
    9f08:	003f9b06 	br	9d78 <_realloc_r+0x36c>
    9f0c:	9005883a 	mov	r2,r18
    9f10:	003fc706 	br	9e30 <_realloc_r+0x424>
    9f14:	a80b883a 	mov	r5,r21
    9f18:	9009883a 	mov	r4,r18
    9f1c:	00097880 	call	9788 <memmove>
    9f20:	003fc906 	br	9e48 <_realloc_r+0x43c>
    9f24:	a8800217 	ldw	r2,8(r21)
    9f28:	b0800415 	stw	r2,16(r22)
    9f2c:	a8800317 	ldw	r2,12(r21)
    9f30:	b0800515 	stw	r2,20(r22)
    9f34:	31000726 	beq	r6,r4,9f54 <_realloc_r+0x548>
    9f38:	b0800604 	addi	r2,r22,24
    9f3c:	ad400404 	addi	r21,r21,16
    9f40:	003fbb06 	br	9e30 <_realloc_r+0x424>
    9f44:	a009883a 	mov	r4,r20
    9f48:	000b5b00 	call	b5b0 <__malloc_unlock>
    9f4c:	0005883a 	mov	r2,zero
    9f50:	003f0a06 	br	9b7c <_realloc_r+0x170>
    9f54:	a8c00417 	ldw	r3,16(r21)
    9f58:	ad400604 	addi	r21,r21,24
    9f5c:	b0800804 	addi	r2,r22,32
    9f60:	b0c00615 	stw	r3,24(r22)
    9f64:	a8ffff17 	ldw	r3,-4(r21)
    9f68:	b0c00715 	stw	r3,28(r22)
    9f6c:	003fb006 	br	9e30 <_realloc_r+0x424>

00009f70 <_sbrk_r>:
    9f70:	defffd04 	addi	sp,sp,-12
    9f74:	dc000015 	stw	r16,0(sp)
    9f78:	04000074 	movhi	r16,1
    9f7c:	dc400115 	stw	r17,4(sp)
    9f80:	84379d04 	addi	r16,r16,-8588
    9f84:	2023883a 	mov	r17,r4
    9f88:	2809883a 	mov	r4,r5
    9f8c:	dfc00215 	stw	ra,8(sp)
    9f90:	80000015 	stw	zero,0(r16)
    9f94:	000b7980 	call	b798 <sbrk>
    9f98:	00ffffc4 	movi	r3,-1
    9f9c:	10c00526 	beq	r2,r3,9fb4 <_sbrk_r+0x44>
    9fa0:	dfc00217 	ldw	ra,8(sp)
    9fa4:	dc400117 	ldw	r17,4(sp)
    9fa8:	dc000017 	ldw	r16,0(sp)
    9fac:	dec00304 	addi	sp,sp,12
    9fb0:	f800283a 	ret
    9fb4:	80c00017 	ldw	r3,0(r16)
    9fb8:	183ff926 	beq	r3,zero,9fa0 <_sbrk_r+0x30>
    9fbc:	88c00015 	stw	r3,0(r17)
    9fc0:	003ff706 	br	9fa0 <_sbrk_r+0x30>

00009fc4 <__sread>:
    9fc4:	defffe04 	addi	sp,sp,-8
    9fc8:	dc000015 	stw	r16,0(sp)
    9fcc:	2821883a 	mov	r16,r5
    9fd0:	2940038f 	ldh	r5,14(r5)
    9fd4:	dfc00115 	stw	ra,4(sp)
    9fd8:	000ad040 	call	ad04 <_read_r>
    9fdc:	10000716 	blt	r2,zero,9ffc <__sread+0x38>
    9fe0:	80c01417 	ldw	r3,80(r16)
    9fe4:	1887883a 	add	r3,r3,r2
    9fe8:	80c01415 	stw	r3,80(r16)
    9fec:	dfc00117 	ldw	ra,4(sp)
    9ff0:	dc000017 	ldw	r16,0(sp)
    9ff4:	dec00204 	addi	sp,sp,8
    9ff8:	f800283a 	ret
    9ffc:	80c0030b 	ldhu	r3,12(r16)
    a000:	18fbffcc 	andi	r3,r3,61439
    a004:	80c0030d 	sth	r3,12(r16)
    a008:	dfc00117 	ldw	ra,4(sp)
    a00c:	dc000017 	ldw	r16,0(sp)
    a010:	dec00204 	addi	sp,sp,8
    a014:	f800283a 	ret

0000a018 <__seofread>:
    a018:	0005883a 	mov	r2,zero
    a01c:	f800283a 	ret

0000a020 <__swrite>:
    a020:	2880030b 	ldhu	r2,12(r5)
    a024:	defffb04 	addi	sp,sp,-20
    a028:	dcc00315 	stw	r19,12(sp)
    a02c:	dc800215 	stw	r18,8(sp)
    a030:	dc400115 	stw	r17,4(sp)
    a034:	dc000015 	stw	r16,0(sp)
    a038:	dfc00415 	stw	ra,16(sp)
    a03c:	10c0400c 	andi	r3,r2,256
    a040:	2821883a 	mov	r16,r5
    a044:	2023883a 	mov	r17,r4
    a048:	3025883a 	mov	r18,r6
    a04c:	3827883a 	mov	r19,r7
    a050:	18000526 	beq	r3,zero,a068 <__swrite+0x48>
    a054:	2940038f 	ldh	r5,14(r5)
    a058:	01c00084 	movi	r7,2
    a05c:	000d883a 	mov	r6,zero
    a060:	000aae80 	call	aae8 <_lseek_r>
    a064:	8080030b 	ldhu	r2,12(r16)
    a068:	8140038f 	ldh	r5,14(r16)
    a06c:	10bbffcc 	andi	r2,r2,61439
    a070:	980f883a 	mov	r7,r19
    a074:	900d883a 	mov	r6,r18
    a078:	8809883a 	mov	r4,r17
    a07c:	8080030d 	sth	r2,12(r16)
    a080:	dfc00417 	ldw	ra,16(sp)
    a084:	dcc00317 	ldw	r19,12(sp)
    a088:	dc800217 	ldw	r18,8(sp)
    a08c:	dc400117 	ldw	r17,4(sp)
    a090:	dc000017 	ldw	r16,0(sp)
    a094:	dec00504 	addi	sp,sp,20
    a098:	000a1001 	jmpi	a100 <_write_r>

0000a09c <__sseek>:
    a09c:	defffe04 	addi	sp,sp,-8
    a0a0:	dc000015 	stw	r16,0(sp)
    a0a4:	2821883a 	mov	r16,r5
    a0a8:	2940038f 	ldh	r5,14(r5)
    a0ac:	dfc00115 	stw	ra,4(sp)
    a0b0:	000aae80 	call	aae8 <_lseek_r>
    a0b4:	00ffffc4 	movi	r3,-1
    a0b8:	10c00826 	beq	r2,r3,a0dc <__sseek+0x40>
    a0bc:	80c0030b 	ldhu	r3,12(r16)
    a0c0:	80801415 	stw	r2,80(r16)
    a0c4:	18c40014 	ori	r3,r3,4096
    a0c8:	80c0030d 	sth	r3,12(r16)
    a0cc:	dfc00117 	ldw	ra,4(sp)
    a0d0:	dc000017 	ldw	r16,0(sp)
    a0d4:	dec00204 	addi	sp,sp,8
    a0d8:	f800283a 	ret
    a0dc:	80c0030b 	ldhu	r3,12(r16)
    a0e0:	18fbffcc 	andi	r3,r3,61439
    a0e4:	80c0030d 	sth	r3,12(r16)
    a0e8:	dfc00117 	ldw	ra,4(sp)
    a0ec:	dc000017 	ldw	r16,0(sp)
    a0f0:	dec00204 	addi	sp,sp,8
    a0f4:	f800283a 	ret

0000a0f8 <__sclose>:
    a0f8:	2940038f 	ldh	r5,14(r5)
    a0fc:	000a2b41 	jmpi	a2b4 <_close_r>

0000a100 <_write_r>:
    a100:	defffd04 	addi	sp,sp,-12
    a104:	2805883a 	mov	r2,r5
    a108:	dc000015 	stw	r16,0(sp)
    a10c:	04000074 	movhi	r16,1
    a110:	dc400115 	stw	r17,4(sp)
    a114:	300b883a 	mov	r5,r6
    a118:	84379d04 	addi	r16,r16,-8588
    a11c:	2023883a 	mov	r17,r4
    a120:	380d883a 	mov	r6,r7
    a124:	1009883a 	mov	r4,r2
    a128:	dfc00215 	stw	ra,8(sp)
    a12c:	80000015 	stw	zero,0(r16)
    a130:	000b8b40 	call	b8b4 <write>
    a134:	00ffffc4 	movi	r3,-1
    a138:	10c00526 	beq	r2,r3,a150 <_write_r+0x50>
    a13c:	dfc00217 	ldw	ra,8(sp)
    a140:	dc400117 	ldw	r17,4(sp)
    a144:	dc000017 	ldw	r16,0(sp)
    a148:	dec00304 	addi	sp,sp,12
    a14c:	f800283a 	ret
    a150:	80c00017 	ldw	r3,0(r16)
    a154:	183ff926 	beq	r3,zero,a13c <_write_r+0x3c>
    a158:	88c00015 	stw	r3,0(r17)
    a15c:	003ff706 	br	a13c <_write_r+0x3c>

0000a160 <__swsetup_r>:
    a160:	00800074 	movhi	r2,1
    a164:	defffd04 	addi	sp,sp,-12
    a168:	10b50504 	addi	r2,r2,-11244
    a16c:	dc400115 	stw	r17,4(sp)
    a170:	2023883a 	mov	r17,r4
    a174:	11000017 	ldw	r4,0(r2)
    a178:	dc000015 	stw	r16,0(sp)
    a17c:	dfc00215 	stw	ra,8(sp)
    a180:	2821883a 	mov	r16,r5
    a184:	20000226 	beq	r4,zero,a190 <__swsetup_r+0x30>
    a188:	20800e17 	ldw	r2,56(r4)
    a18c:	10003126 	beq	r2,zero,a254 <__swsetup_r+0xf4>
    a190:	8080030b 	ldhu	r2,12(r16)
    a194:	10c0020c 	andi	r3,r2,8
    a198:	1009883a 	mov	r4,r2
    a19c:	18000f26 	beq	r3,zero,a1dc <__swsetup_r+0x7c>
    a1a0:	80c00417 	ldw	r3,16(r16)
    a1a4:	18001526 	beq	r3,zero,a1fc <__swsetup_r+0x9c>
    a1a8:	1100004c 	andi	r4,r2,1
    a1ac:	20001c1e 	bne	r4,zero,a220 <__swsetup_r+0xc0>
    a1b0:	1080008c 	andi	r2,r2,2
    a1b4:	1000291e 	bne	r2,zero,a25c <__swsetup_r+0xfc>
    a1b8:	80800517 	ldw	r2,20(r16)
    a1bc:	80800215 	stw	r2,8(r16)
    a1c0:	18001c26 	beq	r3,zero,a234 <__swsetup_r+0xd4>
    a1c4:	0005883a 	mov	r2,zero
    a1c8:	dfc00217 	ldw	ra,8(sp)
    a1cc:	dc400117 	ldw	r17,4(sp)
    a1d0:	dc000017 	ldw	r16,0(sp)
    a1d4:	dec00304 	addi	sp,sp,12
    a1d8:	f800283a 	ret
    a1dc:	2080040c 	andi	r2,r4,16
    a1e0:	10002e26 	beq	r2,zero,a29c <__swsetup_r+0x13c>
    a1e4:	2080010c 	andi	r2,r4,4
    a1e8:	10001e1e 	bne	r2,zero,a264 <__swsetup_r+0x104>
    a1ec:	80c00417 	ldw	r3,16(r16)
    a1f0:	20800214 	ori	r2,r4,8
    a1f4:	8080030d 	sth	r2,12(r16)
    a1f8:	183feb1e 	bne	r3,zero,a1a8 <__swsetup_r+0x48>
    a1fc:	1100a00c 	andi	r4,r2,640
    a200:	01408004 	movi	r5,512
    a204:	217fe826 	beq	r4,r5,a1a8 <__swsetup_r+0x48>
    a208:	800b883a 	mov	r5,r16
    a20c:	8809883a 	mov	r4,r17
    a210:	000ab480 	call	ab48 <__smakebuf_r>
    a214:	8080030b 	ldhu	r2,12(r16)
    a218:	80c00417 	ldw	r3,16(r16)
    a21c:	003fe206 	br	a1a8 <__swsetup_r+0x48>
    a220:	80800517 	ldw	r2,20(r16)
    a224:	80000215 	stw	zero,8(r16)
    a228:	0085c83a 	sub	r2,zero,r2
    a22c:	80800615 	stw	r2,24(r16)
    a230:	183fe41e 	bne	r3,zero,a1c4 <__swsetup_r+0x64>
    a234:	80c0030b 	ldhu	r3,12(r16)
    a238:	0005883a 	mov	r2,zero
    a23c:	1900200c 	andi	r4,r3,128
    a240:	203fe126 	beq	r4,zero,a1c8 <__swsetup_r+0x68>
    a244:	18c01014 	ori	r3,r3,64
    a248:	80c0030d 	sth	r3,12(r16)
    a24c:	00bfffc4 	movi	r2,-1
    a250:	003fdd06 	br	a1c8 <__swsetup_r+0x68>
    a254:	00086b00 	call	86b0 <__sinit>
    a258:	003fcd06 	br	a190 <__swsetup_r+0x30>
    a25c:	0005883a 	mov	r2,zero
    a260:	003fd606 	br	a1bc <__swsetup_r+0x5c>
    a264:	81400c17 	ldw	r5,48(r16)
    a268:	28000626 	beq	r5,zero,a284 <__swsetup_r+0x124>
    a26c:	80801004 	addi	r2,r16,64
    a270:	28800326 	beq	r5,r2,a280 <__swsetup_r+0x120>
    a274:	8809883a 	mov	r4,r17
    a278:	000a7d80 	call	a7d8 <_free_r>
    a27c:	8100030b 	ldhu	r4,12(r16)
    a280:	80000c15 	stw	zero,48(r16)
    a284:	80c00417 	ldw	r3,16(r16)
    a288:	00bff6c4 	movi	r2,-37
    a28c:	1108703a 	and	r4,r2,r4
    a290:	80000115 	stw	zero,4(r16)
    a294:	80c00015 	stw	r3,0(r16)
    a298:	003fd506 	br	a1f0 <__swsetup_r+0x90>
    a29c:	00800244 	movi	r2,9
    a2a0:	88800015 	stw	r2,0(r17)
    a2a4:	20801014 	ori	r2,r4,64
    a2a8:	8080030d 	sth	r2,12(r16)
    a2ac:	00bfffc4 	movi	r2,-1
    a2b0:	003fc506 	br	a1c8 <__swsetup_r+0x68>

0000a2b4 <_close_r>:
    a2b4:	defffd04 	addi	sp,sp,-12
    a2b8:	dc000015 	stw	r16,0(sp)
    a2bc:	04000074 	movhi	r16,1
    a2c0:	dc400115 	stw	r17,4(sp)
    a2c4:	84379d04 	addi	r16,r16,-8588
    a2c8:	2023883a 	mov	r17,r4
    a2cc:	2809883a 	mov	r4,r5
    a2d0:	dfc00215 	stw	ra,8(sp)
    a2d4:	80000015 	stw	zero,0(r16)
    a2d8:	000b02c0 	call	b02c <close>
    a2dc:	00ffffc4 	movi	r3,-1
    a2e0:	10c00526 	beq	r2,r3,a2f8 <_close_r+0x44>
    a2e4:	dfc00217 	ldw	ra,8(sp)
    a2e8:	dc400117 	ldw	r17,4(sp)
    a2ec:	dc000017 	ldw	r16,0(sp)
    a2f0:	dec00304 	addi	sp,sp,12
    a2f4:	f800283a 	ret
    a2f8:	80c00017 	ldw	r3,0(r16)
    a2fc:	183ff926 	beq	r3,zero,a2e4 <_close_r+0x30>
    a300:	88c00015 	stw	r3,0(r17)
    a304:	003ff706 	br	a2e4 <_close_r+0x30>

0000a308 <_fclose_r>:
    a308:	28003926 	beq	r5,zero,a3f0 <_fclose_r+0xe8>
    a30c:	defffc04 	addi	sp,sp,-16
    a310:	dc400115 	stw	r17,4(sp)
    a314:	dc000015 	stw	r16,0(sp)
    a318:	dfc00315 	stw	ra,12(sp)
    a31c:	dc800215 	stw	r18,8(sp)
    a320:	2023883a 	mov	r17,r4
    a324:	2821883a 	mov	r16,r5
    a328:	20000226 	beq	r4,zero,a334 <_fclose_r+0x2c>
    a32c:	20800e17 	ldw	r2,56(r4)
    a330:	10002726 	beq	r2,zero,a3d0 <_fclose_r+0xc8>
    a334:	8080030f 	ldh	r2,12(r16)
    a338:	1000071e 	bne	r2,zero,a358 <_fclose_r+0x50>
    a33c:	0005883a 	mov	r2,zero
    a340:	dfc00317 	ldw	ra,12(sp)
    a344:	dc800217 	ldw	r18,8(sp)
    a348:	dc400117 	ldw	r17,4(sp)
    a34c:	dc000017 	ldw	r16,0(sp)
    a350:	dec00404 	addi	sp,sp,16
    a354:	f800283a 	ret
    a358:	800b883a 	mov	r5,r16
    a35c:	8809883a 	mov	r4,r17
    a360:	000a40c0 	call	a40c <__sflush_r>
    a364:	1025883a 	mov	r18,r2
    a368:	80800b17 	ldw	r2,44(r16)
    a36c:	10000426 	beq	r2,zero,a380 <_fclose_r+0x78>
    a370:	81400717 	ldw	r5,28(r16)
    a374:	8809883a 	mov	r4,r17
    a378:	103ee83a 	callr	r2
    a37c:	10001616 	blt	r2,zero,a3d8 <_fclose_r+0xd0>
    a380:	8080030b 	ldhu	r2,12(r16)
    a384:	1080200c 	andi	r2,r2,128
    a388:	1000151e 	bne	r2,zero,a3e0 <_fclose_r+0xd8>
    a38c:	81400c17 	ldw	r5,48(r16)
    a390:	28000526 	beq	r5,zero,a3a8 <_fclose_r+0xa0>
    a394:	80801004 	addi	r2,r16,64
    a398:	28800226 	beq	r5,r2,a3a4 <_fclose_r+0x9c>
    a39c:	8809883a 	mov	r4,r17
    a3a0:	000a7d80 	call	a7d8 <_free_r>
    a3a4:	80000c15 	stw	zero,48(r16)
    a3a8:	81401117 	ldw	r5,68(r16)
    a3ac:	28000326 	beq	r5,zero,a3bc <_fclose_r+0xb4>
    a3b0:	8809883a 	mov	r4,r17
    a3b4:	000a7d80 	call	a7d8 <_free_r>
    a3b8:	80001115 	stw	zero,68(r16)
    a3bc:	00086c00 	call	86c0 <__sfp_lock_acquire>
    a3c0:	8000030d 	sth	zero,12(r16)
    a3c4:	00086c40 	call	86c4 <__sfp_lock_release>
    a3c8:	9005883a 	mov	r2,r18
    a3cc:	003fdc06 	br	a340 <_fclose_r+0x38>
    a3d0:	00086b00 	call	86b0 <__sinit>
    a3d4:	003fd706 	br	a334 <_fclose_r+0x2c>
    a3d8:	04bfffc4 	movi	r18,-1
    a3dc:	003fe806 	br	a380 <_fclose_r+0x78>
    a3e0:	81400417 	ldw	r5,16(r16)
    a3e4:	8809883a 	mov	r4,r17
    a3e8:	000a7d80 	call	a7d8 <_free_r>
    a3ec:	003fe706 	br	a38c <_fclose_r+0x84>
    a3f0:	0005883a 	mov	r2,zero
    a3f4:	f800283a 	ret

0000a3f8 <fclose>:
    a3f8:	00800074 	movhi	r2,1
    a3fc:	10b50504 	addi	r2,r2,-11244
    a400:	200b883a 	mov	r5,r4
    a404:	11000017 	ldw	r4,0(r2)
    a408:	000a3081 	jmpi	a308 <_fclose_r>

0000a40c <__sflush_r>:
    a40c:	2880030b 	ldhu	r2,12(r5)
    a410:	defffb04 	addi	sp,sp,-20
    a414:	dcc00315 	stw	r19,12(sp)
    a418:	dc400115 	stw	r17,4(sp)
    a41c:	dfc00415 	stw	ra,16(sp)
    a420:	dc800215 	stw	r18,8(sp)
    a424:	dc000015 	stw	r16,0(sp)
    a428:	10c0020c 	andi	r3,r2,8
    a42c:	2823883a 	mov	r17,r5
    a430:	2027883a 	mov	r19,r4
    a434:	1800311e 	bne	r3,zero,a4fc <__sflush_r+0xf0>
    a438:	28c00117 	ldw	r3,4(r5)
    a43c:	10820014 	ori	r2,r2,2048
    a440:	2880030d 	sth	r2,12(r5)
    a444:	00c04b0e 	bge	zero,r3,a574 <__sflush_r+0x168>
    a448:	8a000a17 	ldw	r8,40(r17)
    a44c:	40002326 	beq	r8,zero,a4dc <__sflush_r+0xd0>
    a450:	9c000017 	ldw	r16,0(r19)
    a454:	10c4000c 	andi	r3,r2,4096
    a458:	98000015 	stw	zero,0(r19)
    a45c:	18004826 	beq	r3,zero,a580 <__sflush_r+0x174>
    a460:	89801417 	ldw	r6,80(r17)
    a464:	10c0010c 	andi	r3,r2,4
    a468:	18000626 	beq	r3,zero,a484 <__sflush_r+0x78>
    a46c:	88c00117 	ldw	r3,4(r17)
    a470:	88800c17 	ldw	r2,48(r17)
    a474:	30cdc83a 	sub	r6,r6,r3
    a478:	10000226 	beq	r2,zero,a484 <__sflush_r+0x78>
    a47c:	88800f17 	ldw	r2,60(r17)
    a480:	308dc83a 	sub	r6,r6,r2
    a484:	89400717 	ldw	r5,28(r17)
    a488:	000f883a 	mov	r7,zero
    a48c:	9809883a 	mov	r4,r19
    a490:	403ee83a 	callr	r8
    a494:	00ffffc4 	movi	r3,-1
    a498:	10c04426 	beq	r2,r3,a5ac <__sflush_r+0x1a0>
    a49c:	88c0030b 	ldhu	r3,12(r17)
    a4a0:	89000417 	ldw	r4,16(r17)
    a4a4:	88000115 	stw	zero,4(r17)
    a4a8:	197dffcc 	andi	r5,r3,63487
    a4ac:	8940030d 	sth	r5,12(r17)
    a4b0:	89000015 	stw	r4,0(r17)
    a4b4:	18c4000c 	andi	r3,r3,4096
    a4b8:	18002c1e 	bne	r3,zero,a56c <__sflush_r+0x160>
    a4bc:	89400c17 	ldw	r5,48(r17)
    a4c0:	9c000015 	stw	r16,0(r19)
    a4c4:	28000526 	beq	r5,zero,a4dc <__sflush_r+0xd0>
    a4c8:	88801004 	addi	r2,r17,64
    a4cc:	28800226 	beq	r5,r2,a4d8 <__sflush_r+0xcc>
    a4d0:	9809883a 	mov	r4,r19
    a4d4:	000a7d80 	call	a7d8 <_free_r>
    a4d8:	88000c15 	stw	zero,48(r17)
    a4dc:	0005883a 	mov	r2,zero
    a4e0:	dfc00417 	ldw	ra,16(sp)
    a4e4:	dcc00317 	ldw	r19,12(sp)
    a4e8:	dc800217 	ldw	r18,8(sp)
    a4ec:	dc400117 	ldw	r17,4(sp)
    a4f0:	dc000017 	ldw	r16,0(sp)
    a4f4:	dec00504 	addi	sp,sp,20
    a4f8:	f800283a 	ret
    a4fc:	2c800417 	ldw	r18,16(r5)
    a500:	903ff626 	beq	r18,zero,a4dc <__sflush_r+0xd0>
    a504:	2c000017 	ldw	r16,0(r5)
    a508:	108000cc 	andi	r2,r2,3
    a50c:	2c800015 	stw	r18,0(r5)
    a510:	84a1c83a 	sub	r16,r16,r18
    a514:	1000131e 	bne	r2,zero,a564 <__sflush_r+0x158>
    a518:	28800517 	ldw	r2,20(r5)
    a51c:	88800215 	stw	r2,8(r17)
    a520:	04000316 	blt	zero,r16,a530 <__sflush_r+0x124>
    a524:	003fed06 	br	a4dc <__sflush_r+0xd0>
    a528:	90a5883a 	add	r18,r18,r2
    a52c:	043feb0e 	bge	zero,r16,a4dc <__sflush_r+0xd0>
    a530:	88800917 	ldw	r2,36(r17)
    a534:	89400717 	ldw	r5,28(r17)
    a538:	800f883a 	mov	r7,r16
    a53c:	900d883a 	mov	r6,r18
    a540:	9809883a 	mov	r4,r19
    a544:	103ee83a 	callr	r2
    a548:	80a1c83a 	sub	r16,r16,r2
    a54c:	00bff616 	blt	zero,r2,a528 <__sflush_r+0x11c>
    a550:	88c0030b 	ldhu	r3,12(r17)
    a554:	00bfffc4 	movi	r2,-1
    a558:	18c01014 	ori	r3,r3,64
    a55c:	88c0030d 	sth	r3,12(r17)
    a560:	003fdf06 	br	a4e0 <__sflush_r+0xd4>
    a564:	0005883a 	mov	r2,zero
    a568:	003fec06 	br	a51c <__sflush_r+0x110>
    a56c:	88801415 	stw	r2,80(r17)
    a570:	003fd206 	br	a4bc <__sflush_r+0xb0>
    a574:	28c00f17 	ldw	r3,60(r5)
    a578:	00ffb316 	blt	zero,r3,a448 <__sflush_r+0x3c>
    a57c:	003fd706 	br	a4dc <__sflush_r+0xd0>
    a580:	89400717 	ldw	r5,28(r17)
    a584:	000d883a 	mov	r6,zero
    a588:	01c00044 	movi	r7,1
    a58c:	9809883a 	mov	r4,r19
    a590:	403ee83a 	callr	r8
    a594:	100d883a 	mov	r6,r2
    a598:	00bfffc4 	movi	r2,-1
    a59c:	30801426 	beq	r6,r2,a5f0 <__sflush_r+0x1e4>
    a5a0:	8880030b 	ldhu	r2,12(r17)
    a5a4:	8a000a17 	ldw	r8,40(r17)
    a5a8:	003fae06 	br	a464 <__sflush_r+0x58>
    a5ac:	98c00017 	ldw	r3,0(r19)
    a5b0:	183fba26 	beq	r3,zero,a49c <__sflush_r+0x90>
    a5b4:	01000744 	movi	r4,29
    a5b8:	19000626 	beq	r3,r4,a5d4 <__sflush_r+0x1c8>
    a5bc:	01000584 	movi	r4,22
    a5c0:	19000426 	beq	r3,r4,a5d4 <__sflush_r+0x1c8>
    a5c4:	88c0030b 	ldhu	r3,12(r17)
    a5c8:	18c01014 	ori	r3,r3,64
    a5cc:	88c0030d 	sth	r3,12(r17)
    a5d0:	003fc306 	br	a4e0 <__sflush_r+0xd4>
    a5d4:	8880030b 	ldhu	r2,12(r17)
    a5d8:	88c00417 	ldw	r3,16(r17)
    a5dc:	88000115 	stw	zero,4(r17)
    a5e0:	10bdffcc 	andi	r2,r2,63487
    a5e4:	8880030d 	sth	r2,12(r17)
    a5e8:	88c00015 	stw	r3,0(r17)
    a5ec:	003fb306 	br	a4bc <__sflush_r+0xb0>
    a5f0:	98800017 	ldw	r2,0(r19)
    a5f4:	103fea26 	beq	r2,zero,a5a0 <__sflush_r+0x194>
    a5f8:	00c00744 	movi	r3,29
    a5fc:	10c00226 	beq	r2,r3,a608 <__sflush_r+0x1fc>
    a600:	00c00584 	movi	r3,22
    a604:	10c0031e 	bne	r2,r3,a614 <__sflush_r+0x208>
    a608:	9c000015 	stw	r16,0(r19)
    a60c:	0005883a 	mov	r2,zero
    a610:	003fb306 	br	a4e0 <__sflush_r+0xd4>
    a614:	88c0030b 	ldhu	r3,12(r17)
    a618:	3005883a 	mov	r2,r6
    a61c:	18c01014 	ori	r3,r3,64
    a620:	88c0030d 	sth	r3,12(r17)
    a624:	003fae06 	br	a4e0 <__sflush_r+0xd4>

0000a628 <_fflush_r>:
    a628:	defffd04 	addi	sp,sp,-12
    a62c:	dc000115 	stw	r16,4(sp)
    a630:	dfc00215 	stw	ra,8(sp)
    a634:	2021883a 	mov	r16,r4
    a638:	20000226 	beq	r4,zero,a644 <_fflush_r+0x1c>
    a63c:	20800e17 	ldw	r2,56(r4)
    a640:	10000c26 	beq	r2,zero,a674 <_fflush_r+0x4c>
    a644:	2880030f 	ldh	r2,12(r5)
    a648:	1000051e 	bne	r2,zero,a660 <_fflush_r+0x38>
    a64c:	0005883a 	mov	r2,zero
    a650:	dfc00217 	ldw	ra,8(sp)
    a654:	dc000117 	ldw	r16,4(sp)
    a658:	dec00304 	addi	sp,sp,12
    a65c:	f800283a 	ret
    a660:	8009883a 	mov	r4,r16
    a664:	dfc00217 	ldw	ra,8(sp)
    a668:	dc000117 	ldw	r16,4(sp)
    a66c:	dec00304 	addi	sp,sp,12
    a670:	000a40c1 	jmpi	a40c <__sflush_r>
    a674:	d9400015 	stw	r5,0(sp)
    a678:	00086b00 	call	86b0 <__sinit>
    a67c:	d9400017 	ldw	r5,0(sp)
    a680:	003ff006 	br	a644 <_fflush_r+0x1c>

0000a684 <fflush>:
    a684:	20000526 	beq	r4,zero,a69c <fflush+0x18>
    a688:	00800074 	movhi	r2,1
    a68c:	10b50504 	addi	r2,r2,-11244
    a690:	200b883a 	mov	r5,r4
    a694:	11000017 	ldw	r4,0(r2)
    a698:	000a6281 	jmpi	a628 <_fflush_r>
    a69c:	00800074 	movhi	r2,1
    a6a0:	10b50404 	addi	r2,r2,-11248
    a6a4:	11000017 	ldw	r4,0(r2)
    a6a8:	01400074 	movhi	r5,1
    a6ac:	29698a04 	addi	r5,r5,-23000
    a6b0:	0008c8c1 	jmpi	8c8c <_fwalk_reent>

0000a6b4 <_malloc_trim_r>:
    a6b4:	defffb04 	addi	sp,sp,-20
    a6b8:	dcc00315 	stw	r19,12(sp)
    a6bc:	04c00074 	movhi	r19,1
    a6c0:	dc800215 	stw	r18,8(sp)
    a6c4:	dc400115 	stw	r17,4(sp)
    a6c8:	dc000015 	stw	r16,0(sp)
    a6cc:	dfc00415 	stw	ra,16(sp)
    a6d0:	2821883a 	mov	r16,r5
    a6d4:	9cf38d04 	addi	r19,r19,-12748
    a6d8:	2025883a 	mov	r18,r4
    a6dc:	000b58c0 	call	b58c <__malloc_lock>
    a6e0:	98800217 	ldw	r2,8(r19)
    a6e4:	14400117 	ldw	r17,4(r2)
    a6e8:	00bfff04 	movi	r2,-4
    a6ec:	88a2703a 	and	r17,r17,r2
    a6f0:	8c21c83a 	sub	r16,r17,r16
    a6f4:	8403fbc4 	addi	r16,r16,4079
    a6f8:	8020d33a 	srli	r16,r16,12
    a6fc:	0083ffc4 	movi	r2,4095
    a700:	843fffc4 	addi	r16,r16,-1
    a704:	8020933a 	slli	r16,r16,12
    a708:	1400060e 	bge	r2,r16,a724 <_malloc_trim_r+0x70>
    a70c:	000b883a 	mov	r5,zero
    a710:	9009883a 	mov	r4,r18
    a714:	0009f700 	call	9f70 <_sbrk_r>
    a718:	98c00217 	ldw	r3,8(r19)
    a71c:	1c47883a 	add	r3,r3,r17
    a720:	10c00a26 	beq	r2,r3,a74c <_malloc_trim_r+0x98>
    a724:	9009883a 	mov	r4,r18
    a728:	000b5b00 	call	b5b0 <__malloc_unlock>
    a72c:	0005883a 	mov	r2,zero
    a730:	dfc00417 	ldw	ra,16(sp)
    a734:	dcc00317 	ldw	r19,12(sp)
    a738:	dc800217 	ldw	r18,8(sp)
    a73c:	dc400117 	ldw	r17,4(sp)
    a740:	dc000017 	ldw	r16,0(sp)
    a744:	dec00504 	addi	sp,sp,20
    a748:	f800283a 	ret
    a74c:	040bc83a 	sub	r5,zero,r16
    a750:	9009883a 	mov	r4,r18
    a754:	0009f700 	call	9f70 <_sbrk_r>
    a758:	00ffffc4 	movi	r3,-1
    a75c:	10c00d26 	beq	r2,r3,a794 <_malloc_trim_r+0xe0>
    a760:	00c00074 	movhi	r3,1
    a764:	18f7a104 	addi	r3,r3,-8572
    a768:	18800017 	ldw	r2,0(r3)
    a76c:	99000217 	ldw	r4,8(r19)
    a770:	8c23c83a 	sub	r17,r17,r16
    a774:	8c400054 	ori	r17,r17,1
    a778:	1421c83a 	sub	r16,r2,r16
    a77c:	24400115 	stw	r17,4(r4)
    a780:	9009883a 	mov	r4,r18
    a784:	1c000015 	stw	r16,0(r3)
    a788:	000b5b00 	call	b5b0 <__malloc_unlock>
    a78c:	00800044 	movi	r2,1
    a790:	003fe706 	br	a730 <_malloc_trim_r+0x7c>
    a794:	000b883a 	mov	r5,zero
    a798:	9009883a 	mov	r4,r18
    a79c:	0009f700 	call	9f70 <_sbrk_r>
    a7a0:	99000217 	ldw	r4,8(r19)
    a7a4:	014003c4 	movi	r5,15
    a7a8:	1107c83a 	sub	r3,r2,r4
    a7ac:	28ffdd0e 	bge	r5,r3,a724 <_malloc_trim_r+0x70>
    a7b0:	01400074 	movhi	r5,1
    a7b4:	29750604 	addi	r5,r5,-11240
    a7b8:	29400017 	ldw	r5,0(r5)
    a7bc:	18c00054 	ori	r3,r3,1
    a7c0:	20c00115 	stw	r3,4(r4)
    a7c4:	00c00074 	movhi	r3,1
    a7c8:	1145c83a 	sub	r2,r2,r5
    a7cc:	18f7a104 	addi	r3,r3,-8572
    a7d0:	18800015 	stw	r2,0(r3)
    a7d4:	003fd306 	br	a724 <_malloc_trim_r+0x70>

0000a7d8 <_free_r>:
    a7d8:	28004126 	beq	r5,zero,a8e0 <_free_r+0x108>
    a7dc:	defffd04 	addi	sp,sp,-12
    a7e0:	dc400115 	stw	r17,4(sp)
    a7e4:	dc000015 	stw	r16,0(sp)
    a7e8:	2023883a 	mov	r17,r4
    a7ec:	2821883a 	mov	r16,r5
    a7f0:	dfc00215 	stw	ra,8(sp)
    a7f4:	000b58c0 	call	b58c <__malloc_lock>
    a7f8:	81ffff17 	ldw	r7,-4(r16)
    a7fc:	00bfff84 	movi	r2,-2
    a800:	01000074 	movhi	r4,1
    a804:	81bffe04 	addi	r6,r16,-8
    a808:	3884703a 	and	r2,r7,r2
    a80c:	21338d04 	addi	r4,r4,-12748
    a810:	308b883a 	add	r5,r6,r2
    a814:	2a400117 	ldw	r9,4(r5)
    a818:	22000217 	ldw	r8,8(r4)
    a81c:	00ffff04 	movi	r3,-4
    a820:	48c6703a 	and	r3,r9,r3
    a824:	2a005726 	beq	r5,r8,a984 <_free_r+0x1ac>
    a828:	28c00115 	stw	r3,4(r5)
    a82c:	39c0004c 	andi	r7,r7,1
    a830:	3800091e 	bne	r7,zero,a858 <_free_r+0x80>
    a834:	823ffe17 	ldw	r8,-8(r16)
    a838:	22400204 	addi	r9,r4,8
    a83c:	320dc83a 	sub	r6,r6,r8
    a840:	31c00217 	ldw	r7,8(r6)
    a844:	1205883a 	add	r2,r2,r8
    a848:	3a406526 	beq	r7,r9,a9e0 <_free_r+0x208>
    a84c:	32000317 	ldw	r8,12(r6)
    a850:	3a000315 	stw	r8,12(r7)
    a854:	41c00215 	stw	r7,8(r8)
    a858:	28cf883a 	add	r7,r5,r3
    a85c:	39c00117 	ldw	r7,4(r7)
    a860:	39c0004c 	andi	r7,r7,1
    a864:	38003a26 	beq	r7,zero,a950 <_free_r+0x178>
    a868:	10c00054 	ori	r3,r2,1
    a86c:	30c00115 	stw	r3,4(r6)
    a870:	3087883a 	add	r3,r6,r2
    a874:	18800015 	stw	r2,0(r3)
    a878:	00c07fc4 	movi	r3,511
    a87c:	18801936 	bltu	r3,r2,a8e4 <_free_r+0x10c>
    a880:	1004d0fa 	srli	r2,r2,3
    a884:	01c00044 	movi	r7,1
    a888:	21400117 	ldw	r5,4(r4)
    a88c:	10c00044 	addi	r3,r2,1
    a890:	18c7883a 	add	r3,r3,r3
    a894:	1005d0ba 	srai	r2,r2,2
    a898:	18c7883a 	add	r3,r3,r3
    a89c:	18c7883a 	add	r3,r3,r3
    a8a0:	1907883a 	add	r3,r3,r4
    a8a4:	3884983a 	sll	r2,r7,r2
    a8a8:	19c00017 	ldw	r7,0(r3)
    a8ac:	1a3ffe04 	addi	r8,r3,-8
    a8b0:	1144b03a 	or	r2,r2,r5
    a8b4:	32000315 	stw	r8,12(r6)
    a8b8:	31c00215 	stw	r7,8(r6)
    a8bc:	20800115 	stw	r2,4(r4)
    a8c0:	19800015 	stw	r6,0(r3)
    a8c4:	39800315 	stw	r6,12(r7)
    a8c8:	8809883a 	mov	r4,r17
    a8cc:	dfc00217 	ldw	ra,8(sp)
    a8d0:	dc400117 	ldw	r17,4(sp)
    a8d4:	dc000017 	ldw	r16,0(sp)
    a8d8:	dec00304 	addi	sp,sp,12
    a8dc:	000b5b01 	jmpi	b5b0 <__malloc_unlock>
    a8e0:	f800283a 	ret
    a8e4:	100ad27a 	srli	r5,r2,9
    a8e8:	00c00104 	movi	r3,4
    a8ec:	19404a36 	bltu	r3,r5,aa18 <_free_r+0x240>
    a8f0:	100ad1ba 	srli	r5,r2,6
    a8f4:	28c00e44 	addi	r3,r5,57
    a8f8:	18c7883a 	add	r3,r3,r3
    a8fc:	29400e04 	addi	r5,r5,56
    a900:	18c7883a 	add	r3,r3,r3
    a904:	18c7883a 	add	r3,r3,r3
    a908:	1909883a 	add	r4,r3,r4
    a90c:	20c00017 	ldw	r3,0(r4)
    a910:	01c00074 	movhi	r7,1
    a914:	213ffe04 	addi	r4,r4,-8
    a918:	39f38d04 	addi	r7,r7,-12748
    a91c:	20c04426 	beq	r4,r3,aa30 <_free_r+0x258>
    a920:	01ffff04 	movi	r7,-4
    a924:	19400117 	ldw	r5,4(r3)
    a928:	29ca703a 	and	r5,r5,r7
    a92c:	1140022e 	bgeu	r2,r5,a938 <_free_r+0x160>
    a930:	18c00217 	ldw	r3,8(r3)
    a934:	20fffb1e 	bne	r4,r3,a924 <_free_r+0x14c>
    a938:	19000317 	ldw	r4,12(r3)
    a93c:	31000315 	stw	r4,12(r6)
    a940:	30c00215 	stw	r3,8(r6)
    a944:	21800215 	stw	r6,8(r4)
    a948:	19800315 	stw	r6,12(r3)
    a94c:	003fde06 	br	a8c8 <_free_r+0xf0>
    a950:	29c00217 	ldw	r7,8(r5)
    a954:	10c5883a 	add	r2,r2,r3
    a958:	00c00074 	movhi	r3,1
    a95c:	18f38f04 	addi	r3,r3,-12740
    a960:	38c03b26 	beq	r7,r3,aa50 <_free_r+0x278>
    a964:	2a000317 	ldw	r8,12(r5)
    a968:	11400054 	ori	r5,r2,1
    a96c:	3087883a 	add	r3,r6,r2
    a970:	3a000315 	stw	r8,12(r7)
    a974:	41c00215 	stw	r7,8(r8)
    a978:	31400115 	stw	r5,4(r6)
    a97c:	18800015 	stw	r2,0(r3)
    a980:	003fbd06 	br	a878 <_free_r+0xa0>
    a984:	39c0004c 	andi	r7,r7,1
    a988:	10c5883a 	add	r2,r2,r3
    a98c:	3800071e 	bne	r7,zero,a9ac <_free_r+0x1d4>
    a990:	81fffe17 	ldw	r7,-8(r16)
    a994:	31cdc83a 	sub	r6,r6,r7
    a998:	30c00317 	ldw	r3,12(r6)
    a99c:	31400217 	ldw	r5,8(r6)
    a9a0:	11c5883a 	add	r2,r2,r7
    a9a4:	28c00315 	stw	r3,12(r5)
    a9a8:	19400215 	stw	r5,8(r3)
    a9ac:	10c00054 	ori	r3,r2,1
    a9b0:	30c00115 	stw	r3,4(r6)
    a9b4:	00c00074 	movhi	r3,1
    a9b8:	18f50704 	addi	r3,r3,-11236
    a9bc:	18c00017 	ldw	r3,0(r3)
    a9c0:	21800215 	stw	r6,8(r4)
    a9c4:	10ffc036 	bltu	r2,r3,a8c8 <_free_r+0xf0>
    a9c8:	00800074 	movhi	r2,1
    a9cc:	10b79c04 	addi	r2,r2,-8592
    a9d0:	11400017 	ldw	r5,0(r2)
    a9d4:	8809883a 	mov	r4,r17
    a9d8:	000a6b40 	call	a6b4 <_malloc_trim_r>
    a9dc:	003fba06 	br	a8c8 <_free_r+0xf0>
    a9e0:	28c9883a 	add	r4,r5,r3
    a9e4:	21000117 	ldw	r4,4(r4)
    a9e8:	2100004c 	andi	r4,r4,1
    a9ec:	2000391e 	bne	r4,zero,aad4 <_free_r+0x2fc>
    a9f0:	29c00217 	ldw	r7,8(r5)
    a9f4:	29000317 	ldw	r4,12(r5)
    a9f8:	1885883a 	add	r2,r3,r2
    a9fc:	10c00054 	ori	r3,r2,1
    aa00:	39000315 	stw	r4,12(r7)
    aa04:	21c00215 	stw	r7,8(r4)
    aa08:	30c00115 	stw	r3,4(r6)
    aa0c:	308d883a 	add	r6,r6,r2
    aa10:	30800015 	stw	r2,0(r6)
    aa14:	003fac06 	br	a8c8 <_free_r+0xf0>
    aa18:	00c00504 	movi	r3,20
    aa1c:	19401536 	bltu	r3,r5,aa74 <_free_r+0x29c>
    aa20:	28c01704 	addi	r3,r5,92
    aa24:	18c7883a 	add	r3,r3,r3
    aa28:	294016c4 	addi	r5,r5,91
    aa2c:	003fb406 	br	a900 <_free_r+0x128>
    aa30:	280bd0ba 	srai	r5,r5,2
    aa34:	00c00044 	movi	r3,1
    aa38:	38800117 	ldw	r2,4(r7)
    aa3c:	194a983a 	sll	r5,r3,r5
    aa40:	2007883a 	mov	r3,r4
    aa44:	2884b03a 	or	r2,r5,r2
    aa48:	38800115 	stw	r2,4(r7)
    aa4c:	003fbb06 	br	a93c <_free_r+0x164>
    aa50:	21800515 	stw	r6,20(r4)
    aa54:	21800415 	stw	r6,16(r4)
    aa58:	10c00054 	ori	r3,r2,1
    aa5c:	31c00315 	stw	r7,12(r6)
    aa60:	31c00215 	stw	r7,8(r6)
    aa64:	30c00115 	stw	r3,4(r6)
    aa68:	308d883a 	add	r6,r6,r2
    aa6c:	30800015 	stw	r2,0(r6)
    aa70:	003f9506 	br	a8c8 <_free_r+0xf0>
    aa74:	00c01504 	movi	r3,84
    aa78:	19400536 	bltu	r3,r5,aa90 <_free_r+0x2b8>
    aa7c:	100ad33a 	srli	r5,r2,12
    aa80:	28c01bc4 	addi	r3,r5,111
    aa84:	18c7883a 	add	r3,r3,r3
    aa88:	29401b84 	addi	r5,r5,110
    aa8c:	003f9c06 	br	a900 <_free_r+0x128>
    aa90:	00c05504 	movi	r3,340
    aa94:	19400536 	bltu	r3,r5,aaac <_free_r+0x2d4>
    aa98:	100ad3fa 	srli	r5,r2,15
    aa9c:	28c01e04 	addi	r3,r5,120
    aaa0:	18c7883a 	add	r3,r3,r3
    aaa4:	29401dc4 	addi	r5,r5,119
    aaa8:	003f9506 	br	a900 <_free_r+0x128>
    aaac:	00c15504 	movi	r3,1364
    aab0:	19400536 	bltu	r3,r5,aac8 <_free_r+0x2f0>
    aab4:	100ad4ba 	srli	r5,r2,18
    aab8:	28c01f44 	addi	r3,r5,125
    aabc:	18c7883a 	add	r3,r3,r3
    aac0:	29401f04 	addi	r5,r5,124
    aac4:	003f8e06 	br	a900 <_free_r+0x128>
    aac8:	00c03f84 	movi	r3,254
    aacc:	01401f84 	movi	r5,126
    aad0:	003f8b06 	br	a900 <_free_r+0x128>
    aad4:	10c00054 	ori	r3,r2,1
    aad8:	30c00115 	stw	r3,4(r6)
    aadc:	308d883a 	add	r6,r6,r2
    aae0:	30800015 	stw	r2,0(r6)
    aae4:	003f7806 	br	a8c8 <_free_r+0xf0>

0000aae8 <_lseek_r>:
    aae8:	defffd04 	addi	sp,sp,-12
    aaec:	2805883a 	mov	r2,r5
    aaf0:	dc000015 	stw	r16,0(sp)
    aaf4:	04000074 	movhi	r16,1
    aaf8:	dc400115 	stw	r17,4(sp)
    aafc:	300b883a 	mov	r5,r6
    ab00:	84379d04 	addi	r16,r16,-8588
    ab04:	2023883a 	mov	r17,r4
    ab08:	380d883a 	mov	r6,r7
    ab0c:	1009883a 	mov	r4,r2
    ab10:	dfc00215 	stw	ra,8(sp)
    ab14:	80000015 	stw	zero,0(r16)
    ab18:	000b4340 	call	b434 <lseek>
    ab1c:	00ffffc4 	movi	r3,-1
    ab20:	10c00526 	beq	r2,r3,ab38 <_lseek_r+0x50>
    ab24:	dfc00217 	ldw	ra,8(sp)
    ab28:	dc400117 	ldw	r17,4(sp)
    ab2c:	dc000017 	ldw	r16,0(sp)
    ab30:	dec00304 	addi	sp,sp,12
    ab34:	f800283a 	ret
    ab38:	80c00017 	ldw	r3,0(r16)
    ab3c:	183ff926 	beq	r3,zero,ab24 <_lseek_r+0x3c>
    ab40:	88c00015 	stw	r3,0(r17)
    ab44:	003ff706 	br	ab24 <_lseek_r+0x3c>

0000ab48 <__smakebuf_r>:
    ab48:	2880030b 	ldhu	r2,12(r5)
    ab4c:	10c0008c 	andi	r3,r2,2
    ab50:	1800411e 	bne	r3,zero,ac58 <__smakebuf_r+0x110>
    ab54:	deffec04 	addi	sp,sp,-80
    ab58:	dc000f15 	stw	r16,60(sp)
    ab5c:	2821883a 	mov	r16,r5
    ab60:	2940038f 	ldh	r5,14(r5)
    ab64:	dc401015 	stw	r17,64(sp)
    ab68:	dfc01315 	stw	ra,76(sp)
    ab6c:	dcc01215 	stw	r19,72(sp)
    ab70:	dc801115 	stw	r18,68(sp)
    ab74:	2023883a 	mov	r17,r4
    ab78:	28001c16 	blt	r5,zero,abec <__smakebuf_r+0xa4>
    ab7c:	d80d883a 	mov	r6,sp
    ab80:	000ad640 	call	ad64 <_fstat_r>
    ab84:	10001816 	blt	r2,zero,abe8 <__smakebuf_r+0xa0>
    ab88:	d8800117 	ldw	r2,4(sp)
    ab8c:	00e00014 	movui	r3,32768
    ab90:	10bc000c 	andi	r2,r2,61440
    ab94:	14c80020 	cmpeqi	r19,r2,8192
    ab98:	10c03726 	beq	r2,r3,ac78 <__smakebuf_r+0x130>
    ab9c:	80c0030b 	ldhu	r3,12(r16)
    aba0:	18c20014 	ori	r3,r3,2048
    aba4:	80c0030d 	sth	r3,12(r16)
    aba8:	00c80004 	movi	r3,8192
    abac:	10c0521e 	bne	r2,r3,acf8 <__smakebuf_r+0x1b0>
    abb0:	8140038f 	ldh	r5,14(r16)
    abb4:	8809883a 	mov	r4,r17
    abb8:	000adc00 	call	adc0 <_isatty_r>
    abbc:	10004c26 	beq	r2,zero,acf0 <__smakebuf_r+0x1a8>
    abc0:	8080030b 	ldhu	r2,12(r16)
    abc4:	80c010c4 	addi	r3,r16,67
    abc8:	80c00015 	stw	r3,0(r16)
    abcc:	10800054 	ori	r2,r2,1
    abd0:	8080030d 	sth	r2,12(r16)
    abd4:	00800044 	movi	r2,1
    abd8:	80c00415 	stw	r3,16(r16)
    abdc:	80800515 	stw	r2,20(r16)
    abe0:	04810004 	movi	r18,1024
    abe4:	00000706 	br	ac04 <__smakebuf_r+0xbc>
    abe8:	8080030b 	ldhu	r2,12(r16)
    abec:	10c0200c 	andi	r3,r2,128
    abf0:	18001f1e 	bne	r3,zero,ac70 <__smakebuf_r+0x128>
    abf4:	04810004 	movi	r18,1024
    abf8:	10820014 	ori	r2,r2,2048
    abfc:	8080030d 	sth	r2,12(r16)
    ac00:	0027883a 	mov	r19,zero
    ac04:	900b883a 	mov	r5,r18
    ac08:	8809883a 	mov	r4,r17
    ac0c:	0008d500 	call	8d50 <_malloc_r>
    ac10:	10002c26 	beq	r2,zero,acc4 <__smakebuf_r+0x17c>
    ac14:	80c0030b 	ldhu	r3,12(r16)
    ac18:	01000074 	movhi	r4,1
    ac1c:	2120d604 	addi	r4,r4,-31912
    ac20:	89000f15 	stw	r4,60(r17)
    ac24:	18c02014 	ori	r3,r3,128
    ac28:	80c0030d 	sth	r3,12(r16)
    ac2c:	80800015 	stw	r2,0(r16)
    ac30:	80800415 	stw	r2,16(r16)
    ac34:	84800515 	stw	r18,20(r16)
    ac38:	98001a1e 	bne	r19,zero,aca4 <__smakebuf_r+0x15c>
    ac3c:	dfc01317 	ldw	ra,76(sp)
    ac40:	dcc01217 	ldw	r19,72(sp)
    ac44:	dc801117 	ldw	r18,68(sp)
    ac48:	dc401017 	ldw	r17,64(sp)
    ac4c:	dc000f17 	ldw	r16,60(sp)
    ac50:	dec01404 	addi	sp,sp,80
    ac54:	f800283a 	ret
    ac58:	288010c4 	addi	r2,r5,67
    ac5c:	28800015 	stw	r2,0(r5)
    ac60:	28800415 	stw	r2,16(r5)
    ac64:	00800044 	movi	r2,1
    ac68:	28800515 	stw	r2,20(r5)
    ac6c:	f800283a 	ret
    ac70:	04801004 	movi	r18,64
    ac74:	003fe006 	br	abf8 <__smakebuf_r+0xb0>
    ac78:	81000a17 	ldw	r4,40(r16)
    ac7c:	00c00074 	movhi	r3,1
    ac80:	18e82704 	addi	r3,r3,-24420
    ac84:	20ffc51e 	bne	r4,r3,ab9c <__smakebuf_r+0x54>
    ac88:	8080030b 	ldhu	r2,12(r16)
    ac8c:	04810004 	movi	r18,1024
    ac90:	84801315 	stw	r18,76(r16)
    ac94:	1484b03a 	or	r2,r2,r18
    ac98:	8080030d 	sth	r2,12(r16)
    ac9c:	0027883a 	mov	r19,zero
    aca0:	003fd806 	br	ac04 <__smakebuf_r+0xbc>
    aca4:	8140038f 	ldh	r5,14(r16)
    aca8:	8809883a 	mov	r4,r17
    acac:	000adc00 	call	adc0 <_isatty_r>
    acb0:	103fe226 	beq	r2,zero,ac3c <__smakebuf_r+0xf4>
    acb4:	8080030b 	ldhu	r2,12(r16)
    acb8:	10800054 	ori	r2,r2,1
    acbc:	8080030d 	sth	r2,12(r16)
    acc0:	003fde06 	br	ac3c <__smakebuf_r+0xf4>
    acc4:	8080030b 	ldhu	r2,12(r16)
    acc8:	10c0800c 	andi	r3,r2,512
    accc:	183fdb1e 	bne	r3,zero,ac3c <__smakebuf_r+0xf4>
    acd0:	10800094 	ori	r2,r2,2
    acd4:	80c010c4 	addi	r3,r16,67
    acd8:	8080030d 	sth	r2,12(r16)
    acdc:	00800044 	movi	r2,1
    ace0:	80c00015 	stw	r3,0(r16)
    ace4:	80c00415 	stw	r3,16(r16)
    ace8:	80800515 	stw	r2,20(r16)
    acec:	003fd306 	br	ac3c <__smakebuf_r+0xf4>
    acf0:	04810004 	movi	r18,1024
    acf4:	003fc306 	br	ac04 <__smakebuf_r+0xbc>
    acf8:	0027883a 	mov	r19,zero
    acfc:	04810004 	movi	r18,1024
    ad00:	003fc006 	br	ac04 <__smakebuf_r+0xbc>

0000ad04 <_read_r>:
    ad04:	defffd04 	addi	sp,sp,-12
    ad08:	2805883a 	mov	r2,r5
    ad0c:	dc000015 	stw	r16,0(sp)
    ad10:	04000074 	movhi	r16,1
    ad14:	dc400115 	stw	r17,4(sp)
    ad18:	300b883a 	mov	r5,r6
    ad1c:	84379d04 	addi	r16,r16,-8588
    ad20:	2023883a 	mov	r17,r4
    ad24:	380d883a 	mov	r6,r7
    ad28:	1009883a 	mov	r4,r2
    ad2c:	dfc00215 	stw	ra,8(sp)
    ad30:	80000015 	stw	zero,0(r16)
    ad34:	000b6100 	call	b610 <read>
    ad38:	00ffffc4 	movi	r3,-1
    ad3c:	10c00526 	beq	r2,r3,ad54 <_read_r+0x50>
    ad40:	dfc00217 	ldw	ra,8(sp)
    ad44:	dc400117 	ldw	r17,4(sp)
    ad48:	dc000017 	ldw	r16,0(sp)
    ad4c:	dec00304 	addi	sp,sp,12
    ad50:	f800283a 	ret
    ad54:	80c00017 	ldw	r3,0(r16)
    ad58:	183ff926 	beq	r3,zero,ad40 <_read_r+0x3c>
    ad5c:	88c00015 	stw	r3,0(r17)
    ad60:	003ff706 	br	ad40 <_read_r+0x3c>

0000ad64 <_fstat_r>:
    ad64:	defffd04 	addi	sp,sp,-12
    ad68:	2805883a 	mov	r2,r5
    ad6c:	dc000015 	stw	r16,0(sp)
    ad70:	04000074 	movhi	r16,1
    ad74:	dc400115 	stw	r17,4(sp)
    ad78:	84379d04 	addi	r16,r16,-8588
    ad7c:	2023883a 	mov	r17,r4
    ad80:	300b883a 	mov	r5,r6
    ad84:	1009883a 	mov	r4,r2
    ad88:	dfc00215 	stw	ra,8(sp)
    ad8c:	80000015 	stw	zero,0(r16)
    ad90:	000b16c0 	call	b16c <fstat>
    ad94:	00ffffc4 	movi	r3,-1
    ad98:	10c00526 	beq	r2,r3,adb0 <_fstat_r+0x4c>
    ad9c:	dfc00217 	ldw	ra,8(sp)
    ada0:	dc400117 	ldw	r17,4(sp)
    ada4:	dc000017 	ldw	r16,0(sp)
    ada8:	dec00304 	addi	sp,sp,12
    adac:	f800283a 	ret
    adb0:	80c00017 	ldw	r3,0(r16)
    adb4:	183ff926 	beq	r3,zero,ad9c <_fstat_r+0x38>
    adb8:	88c00015 	stw	r3,0(r17)
    adbc:	003ff706 	br	ad9c <_fstat_r+0x38>

0000adc0 <_isatty_r>:
    adc0:	defffd04 	addi	sp,sp,-12
    adc4:	dc000015 	stw	r16,0(sp)
    adc8:	04000074 	movhi	r16,1
    adcc:	dc400115 	stw	r17,4(sp)
    add0:	84379d04 	addi	r16,r16,-8588
    add4:	2023883a 	mov	r17,r4
    add8:	2809883a 	mov	r4,r5
    addc:	dfc00215 	stw	ra,8(sp)
    ade0:	80000015 	stw	zero,0(r16)
    ade4:	000b2600 	call	b260 <isatty>
    ade8:	00ffffc4 	movi	r3,-1
    adec:	10c00526 	beq	r2,r3,ae04 <_isatty_r+0x44>
    adf0:	dfc00217 	ldw	ra,8(sp)
    adf4:	dc400117 	ldw	r17,4(sp)
    adf8:	dc000017 	ldw	r16,0(sp)
    adfc:	dec00304 	addi	sp,sp,12
    ae00:	f800283a 	ret
    ae04:	80c00017 	ldw	r3,0(r16)
    ae08:	183ff926 	beq	r3,zero,adf0 <_isatty_r+0x30>
    ae0c:	88c00015 	stw	r3,0(r17)
    ae10:	003ff706 	br	adf0 <_isatty_r+0x30>

0000ae14 <__divsi3>:
    ae14:	20001b16 	blt	r4,zero,ae84 <__divsi3+0x70>
    ae18:	000f883a 	mov	r7,zero
    ae1c:	28001616 	blt	r5,zero,ae78 <__divsi3+0x64>
    ae20:	200d883a 	mov	r6,r4
    ae24:	29001a2e 	bgeu	r5,r4,ae90 <__divsi3+0x7c>
    ae28:	00800804 	movi	r2,32
    ae2c:	00c00044 	movi	r3,1
    ae30:	00000106 	br	ae38 <__divsi3+0x24>
    ae34:	10000d26 	beq	r2,zero,ae6c <__divsi3+0x58>
    ae38:	294b883a 	add	r5,r5,r5
    ae3c:	10bfffc4 	addi	r2,r2,-1
    ae40:	18c7883a 	add	r3,r3,r3
    ae44:	293ffb36 	bltu	r5,r4,ae34 <__divsi3+0x20>
    ae48:	0005883a 	mov	r2,zero
    ae4c:	18000726 	beq	r3,zero,ae6c <__divsi3+0x58>
    ae50:	0005883a 	mov	r2,zero
    ae54:	31400236 	bltu	r6,r5,ae60 <__divsi3+0x4c>
    ae58:	314dc83a 	sub	r6,r6,r5
    ae5c:	10c4b03a 	or	r2,r2,r3
    ae60:	1806d07a 	srli	r3,r3,1
    ae64:	280ad07a 	srli	r5,r5,1
    ae68:	183ffa1e 	bne	r3,zero,ae54 <__divsi3+0x40>
    ae6c:	38000126 	beq	r7,zero,ae74 <__divsi3+0x60>
    ae70:	0085c83a 	sub	r2,zero,r2
    ae74:	f800283a 	ret
    ae78:	014bc83a 	sub	r5,zero,r5
    ae7c:	39c0005c 	xori	r7,r7,1
    ae80:	003fe706 	br	ae20 <__divsi3+0xc>
    ae84:	0109c83a 	sub	r4,zero,r4
    ae88:	01c00044 	movi	r7,1
    ae8c:	003fe306 	br	ae1c <__divsi3+0x8>
    ae90:	00c00044 	movi	r3,1
    ae94:	003fee06 	br	ae50 <__divsi3+0x3c>

0000ae98 <__modsi3>:
    ae98:	20001716 	blt	r4,zero,aef8 <__modsi3+0x60>
    ae9c:	000f883a 	mov	r7,zero
    aea0:	2005883a 	mov	r2,r4
    aea4:	28001216 	blt	r5,zero,aef0 <__modsi3+0x58>
    aea8:	2900162e 	bgeu	r5,r4,af04 <__modsi3+0x6c>
    aeac:	01800804 	movi	r6,32
    aeb0:	00c00044 	movi	r3,1
    aeb4:	00000106 	br	aebc <__modsi3+0x24>
    aeb8:	30000a26 	beq	r6,zero,aee4 <__modsi3+0x4c>
    aebc:	294b883a 	add	r5,r5,r5
    aec0:	31bfffc4 	addi	r6,r6,-1
    aec4:	18c7883a 	add	r3,r3,r3
    aec8:	293ffb36 	bltu	r5,r4,aeb8 <__modsi3+0x20>
    aecc:	18000526 	beq	r3,zero,aee4 <__modsi3+0x4c>
    aed0:	1806d07a 	srli	r3,r3,1
    aed4:	11400136 	bltu	r2,r5,aedc <__modsi3+0x44>
    aed8:	1145c83a 	sub	r2,r2,r5
    aedc:	280ad07a 	srli	r5,r5,1
    aee0:	183ffb1e 	bne	r3,zero,aed0 <__modsi3+0x38>
    aee4:	38000126 	beq	r7,zero,aeec <__modsi3+0x54>
    aee8:	0085c83a 	sub	r2,zero,r2
    aeec:	f800283a 	ret
    aef0:	014bc83a 	sub	r5,zero,r5
    aef4:	003fec06 	br	aea8 <__modsi3+0x10>
    aef8:	0109c83a 	sub	r4,zero,r4
    aefc:	01c00044 	movi	r7,1
    af00:	003fe706 	br	aea0 <__modsi3+0x8>
    af04:	00c00044 	movi	r3,1
    af08:	003ff106 	br	aed0 <__modsi3+0x38>

0000af0c <__udivsi3>:
    af0c:	200d883a 	mov	r6,r4
    af10:	2900152e 	bgeu	r5,r4,af68 <__udivsi3+0x5c>
    af14:	28001416 	blt	r5,zero,af68 <__udivsi3+0x5c>
    af18:	00800804 	movi	r2,32
    af1c:	00c00044 	movi	r3,1
    af20:	00000206 	br	af2c <__udivsi3+0x20>
    af24:	10000e26 	beq	r2,zero,af60 <__udivsi3+0x54>
    af28:	28000516 	blt	r5,zero,af40 <__udivsi3+0x34>
    af2c:	294b883a 	add	r5,r5,r5
    af30:	10bfffc4 	addi	r2,r2,-1
    af34:	18c7883a 	add	r3,r3,r3
    af38:	293ffa36 	bltu	r5,r4,af24 <__udivsi3+0x18>
    af3c:	18000826 	beq	r3,zero,af60 <__udivsi3+0x54>
    af40:	0005883a 	mov	r2,zero
    af44:	31400236 	bltu	r6,r5,af50 <__udivsi3+0x44>
    af48:	314dc83a 	sub	r6,r6,r5
    af4c:	10c4b03a 	or	r2,r2,r3
    af50:	1806d07a 	srli	r3,r3,1
    af54:	280ad07a 	srli	r5,r5,1
    af58:	183ffa1e 	bne	r3,zero,af44 <__udivsi3+0x38>
    af5c:	f800283a 	ret
    af60:	0005883a 	mov	r2,zero
    af64:	f800283a 	ret
    af68:	00c00044 	movi	r3,1
    af6c:	003ff406 	br	af40 <__udivsi3+0x34>

0000af70 <__umodsi3>:
    af70:	2005883a 	mov	r2,r4
    af74:	2900122e 	bgeu	r5,r4,afc0 <__umodsi3+0x50>
    af78:	28001116 	blt	r5,zero,afc0 <__umodsi3+0x50>
    af7c:	01800804 	movi	r6,32
    af80:	00c00044 	movi	r3,1
    af84:	00000206 	br	af90 <__umodsi3+0x20>
    af88:	30000c26 	beq	r6,zero,afbc <__umodsi3+0x4c>
    af8c:	28000516 	blt	r5,zero,afa4 <__umodsi3+0x34>
    af90:	294b883a 	add	r5,r5,r5
    af94:	31bfffc4 	addi	r6,r6,-1
    af98:	18c7883a 	add	r3,r3,r3
    af9c:	293ffa36 	bltu	r5,r4,af88 <__umodsi3+0x18>
    afa0:	18000626 	beq	r3,zero,afbc <__umodsi3+0x4c>
    afa4:	1806d07a 	srli	r3,r3,1
    afa8:	11400136 	bltu	r2,r5,afb0 <__umodsi3+0x40>
    afac:	1145c83a 	sub	r2,r2,r5
    afb0:	280ad07a 	srli	r5,r5,1
    afb4:	183ffb1e 	bne	r3,zero,afa4 <__umodsi3+0x34>
    afb8:	f800283a 	ret
    afbc:	f800283a 	ret
    afc0:	00c00044 	movi	r3,1
    afc4:	003ff706 	br	afa4 <__umodsi3+0x34>

0000afc8 <__mulsi3>:
    afc8:	0005883a 	mov	r2,zero
    afcc:	20000726 	beq	r4,zero,afec <__mulsi3+0x24>
    afd0:	20c0004c 	andi	r3,r4,1
    afd4:	2008d07a 	srli	r4,r4,1
    afd8:	18000126 	beq	r3,zero,afe0 <__mulsi3+0x18>
    afdc:	1145883a 	add	r2,r2,r5
    afe0:	294b883a 	add	r5,r5,r5
    afe4:	203ffa1e 	bne	r4,zero,afd0 <__mulsi3+0x8>
    afe8:	f800283a 	ret
    afec:	f800283a 	ret

0000aff0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aff0:	defffe04 	addi	sp,sp,-8
    aff4:	dfc00115 	stw	ra,4(sp)
    aff8:	df000015 	stw	fp,0(sp)
    affc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b000:	d0a00917 	ldw	r2,-32732(gp)
    b004:	10000326 	beq	r2,zero,b014 <alt_get_errno+0x24>
    b008:	d0a00917 	ldw	r2,-32732(gp)
    b00c:	103ee83a 	callr	r2
    b010:	00000106 	br	b018 <alt_get_errno+0x28>
    b014:	d0a29904 	addi	r2,gp,-30108
}
    b018:	e037883a 	mov	sp,fp
    b01c:	dfc00117 	ldw	ra,4(sp)
    b020:	df000017 	ldw	fp,0(sp)
    b024:	dec00204 	addi	sp,sp,8
    b028:	f800283a 	ret

0000b02c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b02c:	defffb04 	addi	sp,sp,-20
    b030:	dfc00415 	stw	ra,16(sp)
    b034:	df000315 	stw	fp,12(sp)
    b038:	df000304 	addi	fp,sp,12
    b03c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b040:	e0bfff17 	ldw	r2,-4(fp)
    b044:	10000816 	blt	r2,zero,b068 <close+0x3c>
    b048:	01400304 	movi	r5,12
    b04c:	e13fff17 	ldw	r4,-4(fp)
    b050:	000afc80 	call	afc8 <__mulsi3>
    b054:	1007883a 	mov	r3,r2
    b058:	00800074 	movhi	r2,1
    b05c:	10b49904 	addi	r2,r2,-11676
    b060:	1885883a 	add	r2,r3,r2
    b064:	00000106 	br	b06c <close+0x40>
    b068:	0005883a 	mov	r2,zero
    b06c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    b070:	e0bffd17 	ldw	r2,-12(fp)
    b074:	10001926 	beq	r2,zero,b0dc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b078:	e0bffd17 	ldw	r2,-12(fp)
    b07c:	10800017 	ldw	r2,0(r2)
    b080:	10800417 	ldw	r2,16(r2)
    b084:	10000626 	beq	r2,zero,b0a0 <close+0x74>
    b088:	e0bffd17 	ldw	r2,-12(fp)
    b08c:	10800017 	ldw	r2,0(r2)
    b090:	10800417 	ldw	r2,16(r2)
    b094:	e13ffd17 	ldw	r4,-12(fp)
    b098:	103ee83a 	callr	r2
    b09c:	00000106 	br	b0a4 <close+0x78>
    b0a0:	0005883a 	mov	r2,zero
    b0a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b0a8:	e13fff17 	ldw	r4,-4(fp)
    b0ac:	000b7140 	call	b714 <alt_release_fd>
    if (rval < 0)
    b0b0:	e0bffe17 	ldw	r2,-8(fp)
    b0b4:	1000070e 	bge	r2,zero,b0d4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    b0b8:	000aff00 	call	aff0 <alt_get_errno>
    b0bc:	1007883a 	mov	r3,r2
    b0c0:	e0bffe17 	ldw	r2,-8(fp)
    b0c4:	0085c83a 	sub	r2,zero,r2
    b0c8:	18800015 	stw	r2,0(r3)
      return -1;
    b0cc:	00bfffc4 	movi	r2,-1
    b0d0:	00000706 	br	b0f0 <close+0xc4>
    }
    return 0;
    b0d4:	0005883a 	mov	r2,zero
    b0d8:	00000506 	br	b0f0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b0dc:	000aff00 	call	aff0 <alt_get_errno>
    b0e0:	1007883a 	mov	r3,r2
    b0e4:	00801444 	movi	r2,81
    b0e8:	18800015 	stw	r2,0(r3)
    return -1;
    b0ec:	00bfffc4 	movi	r2,-1
  }
}
    b0f0:	e037883a 	mov	sp,fp
    b0f4:	dfc00117 	ldw	ra,4(sp)
    b0f8:	df000017 	ldw	fp,0(sp)
    b0fc:	dec00204 	addi	sp,sp,8
    b100:	f800283a 	ret

0000b104 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b104:	defffc04 	addi	sp,sp,-16
    b108:	df000315 	stw	fp,12(sp)
    b10c:	df000304 	addi	fp,sp,12
    b110:	e13ffd15 	stw	r4,-12(fp)
    b114:	e17ffe15 	stw	r5,-8(fp)
    b118:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b11c:	e0bfff17 	ldw	r2,-4(fp)
}
    b120:	e037883a 	mov	sp,fp
    b124:	df000017 	ldw	fp,0(sp)
    b128:	dec00104 	addi	sp,sp,4
    b12c:	f800283a 	ret

0000b130 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b130:	defffe04 	addi	sp,sp,-8
    b134:	dfc00115 	stw	ra,4(sp)
    b138:	df000015 	stw	fp,0(sp)
    b13c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b140:	d0a00917 	ldw	r2,-32732(gp)
    b144:	10000326 	beq	r2,zero,b154 <alt_get_errno+0x24>
    b148:	d0a00917 	ldw	r2,-32732(gp)
    b14c:	103ee83a 	callr	r2
    b150:	00000106 	br	b158 <alt_get_errno+0x28>
    b154:	d0a29904 	addi	r2,gp,-30108
}
    b158:	e037883a 	mov	sp,fp
    b15c:	dfc00117 	ldw	ra,4(sp)
    b160:	df000017 	ldw	fp,0(sp)
    b164:	dec00204 	addi	sp,sp,8
    b168:	f800283a 	ret

0000b16c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b16c:	defffb04 	addi	sp,sp,-20
    b170:	dfc00415 	stw	ra,16(sp)
    b174:	df000315 	stw	fp,12(sp)
    b178:	df000304 	addi	fp,sp,12
    b17c:	e13ffe15 	stw	r4,-8(fp)
    b180:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b184:	e0bffe17 	ldw	r2,-8(fp)
    b188:	10000816 	blt	r2,zero,b1ac <fstat+0x40>
    b18c:	01400304 	movi	r5,12
    b190:	e13ffe17 	ldw	r4,-8(fp)
    b194:	000afc80 	call	afc8 <__mulsi3>
    b198:	1007883a 	mov	r3,r2
    b19c:	00800074 	movhi	r2,1
    b1a0:	10b49904 	addi	r2,r2,-11676
    b1a4:	1885883a 	add	r2,r3,r2
    b1a8:	00000106 	br	b1b0 <fstat+0x44>
    b1ac:	0005883a 	mov	r2,zero
    b1b0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    b1b4:	e0bffd17 	ldw	r2,-12(fp)
    b1b8:	10001026 	beq	r2,zero,b1fc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b1bc:	e0bffd17 	ldw	r2,-12(fp)
    b1c0:	10800017 	ldw	r2,0(r2)
    b1c4:	10800817 	ldw	r2,32(r2)
    b1c8:	10000726 	beq	r2,zero,b1e8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    b1cc:	e0bffd17 	ldw	r2,-12(fp)
    b1d0:	10800017 	ldw	r2,0(r2)
    b1d4:	10800817 	ldw	r2,32(r2)
    b1d8:	e17fff17 	ldw	r5,-4(fp)
    b1dc:	e13ffd17 	ldw	r4,-12(fp)
    b1e0:	103ee83a 	callr	r2
    b1e4:	00000a06 	br	b210 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b1e8:	e0bfff17 	ldw	r2,-4(fp)
    b1ec:	00c80004 	movi	r3,8192
    b1f0:	10c00115 	stw	r3,4(r2)
      return 0;
    b1f4:	0005883a 	mov	r2,zero
    b1f8:	00000506 	br	b210 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b1fc:	000b1300 	call	b130 <alt_get_errno>
    b200:	1007883a 	mov	r3,r2
    b204:	00801444 	movi	r2,81
    b208:	18800015 	stw	r2,0(r3)
    return -1;
    b20c:	00bfffc4 	movi	r2,-1
  }
}
    b210:	e037883a 	mov	sp,fp
    b214:	dfc00117 	ldw	ra,4(sp)
    b218:	df000017 	ldw	fp,0(sp)
    b21c:	dec00204 	addi	sp,sp,8
    b220:	f800283a 	ret

0000b224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b224:	defffe04 	addi	sp,sp,-8
    b228:	dfc00115 	stw	ra,4(sp)
    b22c:	df000015 	stw	fp,0(sp)
    b230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b234:	d0a00917 	ldw	r2,-32732(gp)
    b238:	10000326 	beq	r2,zero,b248 <alt_get_errno+0x24>
    b23c:	d0a00917 	ldw	r2,-32732(gp)
    b240:	103ee83a 	callr	r2
    b244:	00000106 	br	b24c <alt_get_errno+0x28>
    b248:	d0a29904 	addi	r2,gp,-30108
}
    b24c:	e037883a 	mov	sp,fp
    b250:	dfc00117 	ldw	ra,4(sp)
    b254:	df000017 	ldw	fp,0(sp)
    b258:	dec00204 	addi	sp,sp,8
    b25c:	f800283a 	ret

0000b260 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b260:	deffed04 	addi	sp,sp,-76
    b264:	dfc01215 	stw	ra,72(sp)
    b268:	df001115 	stw	fp,68(sp)
    b26c:	df001104 	addi	fp,sp,68
    b270:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b274:	e0bfff17 	ldw	r2,-4(fp)
    b278:	10000816 	blt	r2,zero,b29c <isatty+0x3c>
    b27c:	01400304 	movi	r5,12
    b280:	e13fff17 	ldw	r4,-4(fp)
    b284:	000afc80 	call	afc8 <__mulsi3>
    b288:	1007883a 	mov	r3,r2
    b28c:	00800074 	movhi	r2,1
    b290:	10b49904 	addi	r2,r2,-11676
    b294:	1885883a 	add	r2,r3,r2
    b298:	00000106 	br	b2a0 <isatty+0x40>
    b29c:	0005883a 	mov	r2,zero
    b2a0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    b2a4:	e0bfef17 	ldw	r2,-68(fp)
    b2a8:	10000e26 	beq	r2,zero,b2e4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b2ac:	e0bfef17 	ldw	r2,-68(fp)
    b2b0:	10800017 	ldw	r2,0(r2)
    b2b4:	10800817 	ldw	r2,32(r2)
    b2b8:	1000021e 	bne	r2,zero,b2c4 <isatty+0x64>
    {
      return 1;
    b2bc:	00800044 	movi	r2,1
    b2c0:	00000d06 	br	b2f8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b2c4:	e0bff004 	addi	r2,fp,-64
    b2c8:	100b883a 	mov	r5,r2
    b2cc:	e13fff17 	ldw	r4,-4(fp)
    b2d0:	000b16c0 	call	b16c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b2d4:	e0bff117 	ldw	r2,-60(fp)
    b2d8:	10880020 	cmpeqi	r2,r2,8192
    b2dc:	10803fcc 	andi	r2,r2,255
    b2e0:	00000506 	br	b2f8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b2e4:	000b2240 	call	b224 <alt_get_errno>
    b2e8:	1007883a 	mov	r3,r2
    b2ec:	00801444 	movi	r2,81
    b2f0:	18800015 	stw	r2,0(r3)
    return 0;
    b2f4:	0005883a 	mov	r2,zero
  }
}
    b2f8:	e037883a 	mov	sp,fp
    b2fc:	dfc00117 	ldw	ra,4(sp)
    b300:	df000017 	ldw	fp,0(sp)
    b304:	dec00204 	addi	sp,sp,8
    b308:	f800283a 	ret

0000b30c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b30c:	defffc04 	addi	sp,sp,-16
    b310:	df000315 	stw	fp,12(sp)
    b314:	df000304 	addi	fp,sp,12
    b318:	e13ffd15 	stw	r4,-12(fp)
    b31c:	e17ffe15 	stw	r5,-8(fp)
    b320:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b324:	e0fffe17 	ldw	r3,-8(fp)
    b328:	e0bffd17 	ldw	r2,-12(fp)
    b32c:	18800c26 	beq	r3,r2,b360 <alt_load_section+0x54>
  {
    while( to != end )
    b330:	00000806 	br	b354 <alt_load_section+0x48>
    {
      *to++ = *from++;
    b334:	e0bffe17 	ldw	r2,-8(fp)
    b338:	10c00104 	addi	r3,r2,4
    b33c:	e0fffe15 	stw	r3,-8(fp)
    b340:	e0fffd17 	ldw	r3,-12(fp)
    b344:	19000104 	addi	r4,r3,4
    b348:	e13ffd15 	stw	r4,-12(fp)
    b34c:	18c00017 	ldw	r3,0(r3)
    b350:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b354:	e0fffe17 	ldw	r3,-8(fp)
    b358:	e0bfff17 	ldw	r2,-4(fp)
    b35c:	18bff51e 	bne	r3,r2,b334 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b360:	0001883a 	nop
    b364:	e037883a 	mov	sp,fp
    b368:	df000017 	ldw	fp,0(sp)
    b36c:	dec00104 	addi	sp,sp,4
    b370:	f800283a 	ret

0000b374 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b374:	defffe04 	addi	sp,sp,-8
    b378:	dfc00115 	stw	ra,4(sp)
    b37c:	df000015 	stw	fp,0(sp)
    b380:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b384:	01800074 	movhi	r6,1
    b388:	31b50f04 	addi	r6,r6,-11204
    b38c:	01400074 	movhi	r5,1
    b390:	29728404 	addi	r5,r5,-13808
    b394:	01000074 	movhi	r4,1
    b398:	21350f04 	addi	r4,r4,-11204
    b39c:	000b30c0 	call	b30c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b3a0:	01800074 	movhi	r6,1
    b3a4:	31a00804 	addi	r6,r6,-32736
    b3a8:	01400074 	movhi	r5,1
    b3ac:	29600804 	addi	r5,r5,-32736
    b3b0:	01000074 	movhi	r4,1
    b3b4:	21200804 	addi	r4,r4,-32736
    b3b8:	000b30c0 	call	b30c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b3bc:	01800074 	movhi	r6,1
    b3c0:	31b28404 	addi	r6,r6,-13808
    b3c4:	01400074 	movhi	r5,1
    b3c8:	29727104 	addi	r5,r5,-13884
    b3cc:	01000074 	movhi	r4,1
    b3d0:	21327104 	addi	r4,r4,-13884
    b3d4:	000b30c0 	call	b30c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b3d8:	000bdec0 	call	bdec <alt_dcache_flush_all>
  alt_icache_flush_all();
    b3dc:	000bfac0 	call	bfac <alt_icache_flush_all>
}
    b3e0:	0001883a 	nop
    b3e4:	e037883a 	mov	sp,fp
    b3e8:	dfc00117 	ldw	ra,4(sp)
    b3ec:	df000017 	ldw	fp,0(sp)
    b3f0:	dec00204 	addi	sp,sp,8
    b3f4:	f800283a 	ret

0000b3f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b3f8:	defffe04 	addi	sp,sp,-8
    b3fc:	dfc00115 	stw	ra,4(sp)
    b400:	df000015 	stw	fp,0(sp)
    b404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b408:	d0a00917 	ldw	r2,-32732(gp)
    b40c:	10000326 	beq	r2,zero,b41c <alt_get_errno+0x24>
    b410:	d0a00917 	ldw	r2,-32732(gp)
    b414:	103ee83a 	callr	r2
    b418:	00000106 	br	b420 <alt_get_errno+0x28>
    b41c:	d0a29904 	addi	r2,gp,-30108
}
    b420:	e037883a 	mov	sp,fp
    b424:	dfc00117 	ldw	ra,4(sp)
    b428:	df000017 	ldw	fp,0(sp)
    b42c:	dec00204 	addi	sp,sp,8
    b430:	f800283a 	ret

0000b434 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b434:	defff904 	addi	sp,sp,-28
    b438:	dfc00615 	stw	ra,24(sp)
    b43c:	df000515 	stw	fp,20(sp)
    b440:	df000504 	addi	fp,sp,20
    b444:	e13ffd15 	stw	r4,-12(fp)
    b448:	e17ffe15 	stw	r5,-8(fp)
    b44c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b450:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b454:	e0bffd17 	ldw	r2,-12(fp)
    b458:	10000816 	blt	r2,zero,b47c <lseek+0x48>
    b45c:	01400304 	movi	r5,12
    b460:	e13ffd17 	ldw	r4,-12(fp)
    b464:	000afc80 	call	afc8 <__mulsi3>
    b468:	1007883a 	mov	r3,r2
    b46c:	00800074 	movhi	r2,1
    b470:	10b49904 	addi	r2,r2,-11676
    b474:	1885883a 	add	r2,r3,r2
    b478:	00000106 	br	b480 <lseek+0x4c>
    b47c:	0005883a 	mov	r2,zero
    b480:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    b484:	e0bffc17 	ldw	r2,-16(fp)
    b488:	10001026 	beq	r2,zero,b4cc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b48c:	e0bffc17 	ldw	r2,-16(fp)
    b490:	10800017 	ldw	r2,0(r2)
    b494:	10800717 	ldw	r2,28(r2)
    b498:	10000926 	beq	r2,zero,b4c0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b49c:	e0bffc17 	ldw	r2,-16(fp)
    b4a0:	10800017 	ldw	r2,0(r2)
    b4a4:	10800717 	ldw	r2,28(r2)
    b4a8:	e1bfff17 	ldw	r6,-4(fp)
    b4ac:	e17ffe17 	ldw	r5,-8(fp)
    b4b0:	e13ffc17 	ldw	r4,-16(fp)
    b4b4:	103ee83a 	callr	r2
    b4b8:	e0bffb15 	stw	r2,-20(fp)
    b4bc:	00000506 	br	b4d4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b4c0:	00bfde84 	movi	r2,-134
    b4c4:	e0bffb15 	stw	r2,-20(fp)
    b4c8:	00000206 	br	b4d4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b4cc:	00bfebc4 	movi	r2,-81
    b4d0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    b4d4:	e0bffb17 	ldw	r2,-20(fp)
    b4d8:	1000070e 	bge	r2,zero,b4f8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    b4dc:	000b3f80 	call	b3f8 <alt_get_errno>
    b4e0:	1007883a 	mov	r3,r2
    b4e4:	e0bffb17 	ldw	r2,-20(fp)
    b4e8:	0085c83a 	sub	r2,zero,r2
    b4ec:	18800015 	stw	r2,0(r3)
    rc = -1;
    b4f0:	00bfffc4 	movi	r2,-1
    b4f4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    b4f8:	e0bffb17 	ldw	r2,-20(fp)
}
    b4fc:	e037883a 	mov	sp,fp
    b500:	dfc00117 	ldw	ra,4(sp)
    b504:	df000017 	ldw	fp,0(sp)
    b508:	dec00204 	addi	sp,sp,8
    b50c:	f800283a 	ret

0000b510 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b510:	defffd04 	addi	sp,sp,-12
    b514:	dfc00215 	stw	ra,8(sp)
    b518:	df000115 	stw	fp,4(sp)
    b51c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b520:	0009883a 	mov	r4,zero
    b524:	000b9e80 	call	b9e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b528:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b52c:	000ba200 	call	ba20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b530:	01800074 	movhi	r6,1
    b534:	31b27a04 	addi	r6,r6,-13848
    b538:	01400074 	movhi	r5,1
    b53c:	29727a04 	addi	r5,r5,-13848
    b540:	01000074 	movhi	r4,1
    b544:	21327a04 	addi	r4,r4,-13848
    b548:	000c0b00 	call	c0b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b54c:	000beec0 	call	beec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b550:	01000074 	movhi	r4,1
    b554:	212fd304 	addi	r4,r4,-16564
    b558:	000c6300 	call	c630 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b55c:	d0a29a17 	ldw	r2,-30104(gp)
    b560:	d0e29b17 	ldw	r3,-30100(gp)
    b564:	d1229c17 	ldw	r4,-30096(gp)
    b568:	200d883a 	mov	r6,r4
    b56c:	180b883a 	mov	r5,r3
    b570:	1009883a 	mov	r4,r2
    b574:	00080a00 	call	80a0 <main>
    b578:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b57c:	01000044 	movi	r4,1
    b580:	000b02c0 	call	b02c <close>
  exit (result);
    b584:	e13fff17 	ldw	r4,-4(fp)
    b588:	000c6440 	call	c644 <exit>

0000b58c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b58c:	defffe04 	addi	sp,sp,-8
    b590:	df000115 	stw	fp,4(sp)
    b594:	df000104 	addi	fp,sp,4
    b598:	e13fff15 	stw	r4,-4(fp)
}
    b59c:	0001883a 	nop
    b5a0:	e037883a 	mov	sp,fp
    b5a4:	df000017 	ldw	fp,0(sp)
    b5a8:	dec00104 	addi	sp,sp,4
    b5ac:	f800283a 	ret

0000b5b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b5b0:	defffe04 	addi	sp,sp,-8
    b5b4:	df000115 	stw	fp,4(sp)
    b5b8:	df000104 	addi	fp,sp,4
    b5bc:	e13fff15 	stw	r4,-4(fp)
}
    b5c0:	0001883a 	nop
    b5c4:	e037883a 	mov	sp,fp
    b5c8:	df000017 	ldw	fp,0(sp)
    b5cc:	dec00104 	addi	sp,sp,4
    b5d0:	f800283a 	ret

0000b5d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b5d4:	defffe04 	addi	sp,sp,-8
    b5d8:	dfc00115 	stw	ra,4(sp)
    b5dc:	df000015 	stw	fp,0(sp)
    b5e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b5e4:	d0a00917 	ldw	r2,-32732(gp)
    b5e8:	10000326 	beq	r2,zero,b5f8 <alt_get_errno+0x24>
    b5ec:	d0a00917 	ldw	r2,-32732(gp)
    b5f0:	103ee83a 	callr	r2
    b5f4:	00000106 	br	b5fc <alt_get_errno+0x28>
    b5f8:	d0a29904 	addi	r2,gp,-30108
}
    b5fc:	e037883a 	mov	sp,fp
    b600:	dfc00117 	ldw	ra,4(sp)
    b604:	df000017 	ldw	fp,0(sp)
    b608:	dec00204 	addi	sp,sp,8
    b60c:	f800283a 	ret

0000b610 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b610:	defff904 	addi	sp,sp,-28
    b614:	dfc00615 	stw	ra,24(sp)
    b618:	df000515 	stw	fp,20(sp)
    b61c:	df000504 	addi	fp,sp,20
    b620:	e13ffd15 	stw	r4,-12(fp)
    b624:	e17ffe15 	stw	r5,-8(fp)
    b628:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b62c:	e0bffd17 	ldw	r2,-12(fp)
    b630:	10000816 	blt	r2,zero,b654 <read+0x44>
    b634:	01400304 	movi	r5,12
    b638:	e13ffd17 	ldw	r4,-12(fp)
    b63c:	000afc80 	call	afc8 <__mulsi3>
    b640:	1007883a 	mov	r3,r2
    b644:	00800074 	movhi	r2,1
    b648:	10b49904 	addi	r2,r2,-11676
    b64c:	1885883a 	add	r2,r3,r2
    b650:	00000106 	br	b658 <read+0x48>
    b654:	0005883a 	mov	r2,zero
    b658:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b65c:	e0bffb17 	ldw	r2,-20(fp)
    b660:	10002226 	beq	r2,zero,b6ec <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b664:	e0bffb17 	ldw	r2,-20(fp)
    b668:	10800217 	ldw	r2,8(r2)
    b66c:	108000cc 	andi	r2,r2,3
    b670:	10800060 	cmpeqi	r2,r2,1
    b674:	1000181e 	bne	r2,zero,b6d8 <read+0xc8>
        (fd->dev->read))
    b678:	e0bffb17 	ldw	r2,-20(fp)
    b67c:	10800017 	ldw	r2,0(r2)
    b680:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b684:	10001426 	beq	r2,zero,b6d8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b688:	e0bffb17 	ldw	r2,-20(fp)
    b68c:	10800017 	ldw	r2,0(r2)
    b690:	10800517 	ldw	r2,20(r2)
    b694:	e0ffff17 	ldw	r3,-4(fp)
    b698:	180d883a 	mov	r6,r3
    b69c:	e17ffe17 	ldw	r5,-8(fp)
    b6a0:	e13ffb17 	ldw	r4,-20(fp)
    b6a4:	103ee83a 	callr	r2
    b6a8:	e0bffc15 	stw	r2,-16(fp)
    b6ac:	e0bffc17 	ldw	r2,-16(fp)
    b6b0:	1000070e 	bge	r2,zero,b6d0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    b6b4:	000b5d40 	call	b5d4 <alt_get_errno>
    b6b8:	1007883a 	mov	r3,r2
    b6bc:	e0bffc17 	ldw	r2,-16(fp)
    b6c0:	0085c83a 	sub	r2,zero,r2
    b6c4:	18800015 	stw	r2,0(r3)
          return -1;
    b6c8:	00bfffc4 	movi	r2,-1
    b6cc:	00000c06 	br	b700 <read+0xf0>
        }
        return rval;
    b6d0:	e0bffc17 	ldw	r2,-16(fp)
    b6d4:	00000a06 	br	b700 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b6d8:	000b5d40 	call	b5d4 <alt_get_errno>
    b6dc:	1007883a 	mov	r3,r2
    b6e0:	00800344 	movi	r2,13
    b6e4:	18800015 	stw	r2,0(r3)
    b6e8:	00000406 	br	b6fc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b6ec:	000b5d40 	call	b5d4 <alt_get_errno>
    b6f0:	1007883a 	mov	r3,r2
    b6f4:	00801444 	movi	r2,81
    b6f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b6fc:	00bfffc4 	movi	r2,-1
}
    b700:	e037883a 	mov	sp,fp
    b704:	dfc00117 	ldw	ra,4(sp)
    b708:	df000017 	ldw	fp,0(sp)
    b70c:	dec00204 	addi	sp,sp,8
    b710:	f800283a 	ret

0000b714 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b714:	defffc04 	addi	sp,sp,-16
    b718:	dfc00315 	stw	ra,12(sp)
    b71c:	df000215 	stw	fp,8(sp)
    b720:	dc000115 	stw	r16,4(sp)
    b724:	df000204 	addi	fp,sp,8
    b728:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    b72c:	e0bffe17 	ldw	r2,-8(fp)
    b730:	108000d0 	cmplti	r2,r2,3
    b734:	1000111e 	bne	r2,zero,b77c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    b738:	04000074 	movhi	r16,1
    b73c:	84349904 	addi	r16,r16,-11676
    b740:	e0bffe17 	ldw	r2,-8(fp)
    b744:	01400304 	movi	r5,12
    b748:	1009883a 	mov	r4,r2
    b74c:	000afc80 	call	afc8 <__mulsi3>
    b750:	8085883a 	add	r2,r16,r2
    b754:	10800204 	addi	r2,r2,8
    b758:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b75c:	04000074 	movhi	r16,1
    b760:	84349904 	addi	r16,r16,-11676
    b764:	e0bffe17 	ldw	r2,-8(fp)
    b768:	01400304 	movi	r5,12
    b76c:	1009883a 	mov	r4,r2
    b770:	000afc80 	call	afc8 <__mulsi3>
    b774:	8085883a 	add	r2,r16,r2
    b778:	10000015 	stw	zero,0(r2)
  }
}
    b77c:	0001883a 	nop
    b780:	e6ffff04 	addi	sp,fp,-4
    b784:	dfc00217 	ldw	ra,8(sp)
    b788:	df000117 	ldw	fp,4(sp)
    b78c:	dc000017 	ldw	r16,0(sp)
    b790:	dec00304 	addi	sp,sp,12
    b794:	f800283a 	ret

0000b798 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b798:	defff904 	addi	sp,sp,-28
    b79c:	df000615 	stw	fp,24(sp)
    b7a0:	df000604 	addi	fp,sp,24
    b7a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b7a8:	0005303a 	rdctl	r2,status
    b7ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7b0:	e0fffe17 	ldw	r3,-8(fp)
    b7b4:	00bfff84 	movi	r2,-2
    b7b8:	1884703a 	and	r2,r3,r2
    b7bc:	1001703a 	wrctl	status,r2
  
  return context;
    b7c0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b7c4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b7c8:	d0a00a17 	ldw	r2,-32728(gp)
    b7cc:	10c000c4 	addi	r3,r2,3
    b7d0:	00bfff04 	movi	r2,-4
    b7d4:	1884703a 	and	r2,r3,r2
    b7d8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b7dc:	d0e00a17 	ldw	r3,-32728(gp)
    b7e0:	e0bfff17 	ldw	r2,-4(fp)
    b7e4:	1887883a 	add	r3,r3,r2
    b7e8:	00800074 	movhi	r2,1
    b7ec:	10800004 	addi	r2,r2,0
    b7f0:	10c0062e 	bgeu	r2,r3,b80c <sbrk+0x74>
    b7f4:	e0bffb17 	ldw	r2,-20(fp)
    b7f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7fc:	e0bffa17 	ldw	r2,-24(fp)
    b800:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b804:	00bfffc4 	movi	r2,-1
    b808:	00000b06 	br	b838 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    b80c:	d0a00a17 	ldw	r2,-32728(gp)
    b810:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    b814:	d0e00a17 	ldw	r3,-32728(gp)
    b818:	e0bfff17 	ldw	r2,-4(fp)
    b81c:	1885883a 	add	r2,r3,r2
    b820:	d0a00a15 	stw	r2,-32728(gp)
    b824:	e0bffb17 	ldw	r2,-20(fp)
    b828:	e0bffc15 	stw	r2,-16(fp)
    b82c:	e0bffc17 	ldw	r2,-16(fp)
    b830:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b834:	e0bffd17 	ldw	r2,-12(fp)
} 
    b838:	e037883a 	mov	sp,fp
    b83c:	df000017 	ldw	fp,0(sp)
    b840:	dec00104 	addi	sp,sp,4
    b844:	f800283a 	ret

0000b848 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    b848:	defffd04 	addi	sp,sp,-12
    b84c:	dfc00215 	stw	ra,8(sp)
    b850:	df000115 	stw	fp,4(sp)
    b854:	df000104 	addi	fp,sp,4
    b858:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    b85c:	e13fff17 	ldw	r4,-4(fp)
    b860:	000bc940 	call	bc94 <alt_busy_sleep>
}
    b864:	e037883a 	mov	sp,fp
    b868:	dfc00117 	ldw	ra,4(sp)
    b86c:	df000017 	ldw	fp,0(sp)
    b870:	dec00204 	addi	sp,sp,8
    b874:	f800283a 	ret

0000b878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b878:	defffe04 	addi	sp,sp,-8
    b87c:	dfc00115 	stw	ra,4(sp)
    b880:	df000015 	stw	fp,0(sp)
    b884:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b888:	d0a00917 	ldw	r2,-32732(gp)
    b88c:	10000326 	beq	r2,zero,b89c <alt_get_errno+0x24>
    b890:	d0a00917 	ldw	r2,-32732(gp)
    b894:	103ee83a 	callr	r2
    b898:	00000106 	br	b8a0 <alt_get_errno+0x28>
    b89c:	d0a29904 	addi	r2,gp,-30108
}
    b8a0:	e037883a 	mov	sp,fp
    b8a4:	dfc00117 	ldw	ra,4(sp)
    b8a8:	df000017 	ldw	fp,0(sp)
    b8ac:	dec00204 	addi	sp,sp,8
    b8b0:	f800283a 	ret

0000b8b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b8b4:	defff904 	addi	sp,sp,-28
    b8b8:	dfc00615 	stw	ra,24(sp)
    b8bc:	df000515 	stw	fp,20(sp)
    b8c0:	df000504 	addi	fp,sp,20
    b8c4:	e13ffd15 	stw	r4,-12(fp)
    b8c8:	e17ffe15 	stw	r5,-8(fp)
    b8cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b8d0:	e0bffd17 	ldw	r2,-12(fp)
    b8d4:	10000816 	blt	r2,zero,b8f8 <write+0x44>
    b8d8:	01400304 	movi	r5,12
    b8dc:	e13ffd17 	ldw	r4,-12(fp)
    b8e0:	000afc80 	call	afc8 <__mulsi3>
    b8e4:	1007883a 	mov	r3,r2
    b8e8:	00800074 	movhi	r2,1
    b8ec:	10b49904 	addi	r2,r2,-11676
    b8f0:	1885883a 	add	r2,r3,r2
    b8f4:	00000106 	br	b8fc <write+0x48>
    b8f8:	0005883a 	mov	r2,zero
    b8fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b900:	e0bffb17 	ldw	r2,-20(fp)
    b904:	10002126 	beq	r2,zero,b98c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b908:	e0bffb17 	ldw	r2,-20(fp)
    b90c:	10800217 	ldw	r2,8(r2)
    b910:	108000cc 	andi	r2,r2,3
    b914:	10001826 	beq	r2,zero,b978 <write+0xc4>
    b918:	e0bffb17 	ldw	r2,-20(fp)
    b91c:	10800017 	ldw	r2,0(r2)
    b920:	10800617 	ldw	r2,24(r2)
    b924:	10001426 	beq	r2,zero,b978 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b928:	e0bffb17 	ldw	r2,-20(fp)
    b92c:	10800017 	ldw	r2,0(r2)
    b930:	10800617 	ldw	r2,24(r2)
    b934:	e0ffff17 	ldw	r3,-4(fp)
    b938:	180d883a 	mov	r6,r3
    b93c:	e17ffe17 	ldw	r5,-8(fp)
    b940:	e13ffb17 	ldw	r4,-20(fp)
    b944:	103ee83a 	callr	r2
    b948:	e0bffc15 	stw	r2,-16(fp)
    b94c:	e0bffc17 	ldw	r2,-16(fp)
    b950:	1000070e 	bge	r2,zero,b970 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    b954:	000b8780 	call	b878 <alt_get_errno>
    b958:	1007883a 	mov	r3,r2
    b95c:	e0bffc17 	ldw	r2,-16(fp)
    b960:	0085c83a 	sub	r2,zero,r2
    b964:	18800015 	stw	r2,0(r3)
        return -1;
    b968:	00bfffc4 	movi	r2,-1
    b96c:	00000c06 	br	b9a0 <write+0xec>
      }
      return rval;
    b970:	e0bffc17 	ldw	r2,-16(fp)
    b974:	00000a06 	br	b9a0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b978:	000b8780 	call	b878 <alt_get_errno>
    b97c:	1007883a 	mov	r3,r2
    b980:	00800344 	movi	r2,13
    b984:	18800015 	stw	r2,0(r3)
    b988:	00000406 	br	b99c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b98c:	000b8780 	call	b878 <alt_get_errno>
    b990:	1007883a 	mov	r3,r2
    b994:	00801444 	movi	r2,81
    b998:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b99c:	00bfffc4 	movi	r2,-1
}
    b9a0:	e037883a 	mov	sp,fp
    b9a4:	dfc00117 	ldw	ra,4(sp)
    b9a8:	df000017 	ldw	fp,0(sp)
    b9ac:	dec00204 	addi	sp,sp,8
    b9b0:	f800283a 	ret

0000b9b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b9b4:	defffd04 	addi	sp,sp,-12
    b9b8:	dfc00215 	stw	ra,8(sp)
    b9bc:	df000115 	stw	fp,4(sp)
    b9c0:	df000104 	addi	fp,sp,4
    b9c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b9c8:	d1600604 	addi	r5,gp,-32744
    b9cc:	e13fff17 	ldw	r4,-4(fp)
    b9d0:	000be480 	call	be48 <alt_dev_llist_insert>
}
    b9d4:	e037883a 	mov	sp,fp
    b9d8:	dfc00117 	ldw	ra,4(sp)
    b9dc:	df000017 	ldw	fp,0(sp)
    b9e0:	dec00204 	addi	sp,sp,8
    b9e4:	f800283a 	ret

0000b9e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b9e8:	defffd04 	addi	sp,sp,-12
    b9ec:	dfc00215 	stw	ra,8(sp)
    b9f0:	df000115 	stw	fp,4(sp)
    b9f4:	df000104 	addi	fp,sp,4
    b9f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    b9fc:	000c3b00 	call	c3b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ba00:	00800044 	movi	r2,1
    ba04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ba08:	0001883a 	nop
    ba0c:	e037883a 	mov	sp,fp
    ba10:	dfc00117 	ldw	ra,4(sp)
    ba14:	df000017 	ldw	fp,0(sp)
    ba18:	dec00204 	addi	sp,sp,8
    ba1c:	f800283a 	ret

0000ba20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ba20:	defffe04 	addi	sp,sp,-8
    ba24:	dfc00115 	stw	ra,4(sp)
    ba28:	df000015 	stw	fp,0(sp)
    ba2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ba30:	01000074 	movhi	r4,1
    ba34:	2134f904 	addi	r4,r4,-11292
    ba38:	000b9b40 	call	b9b4 <alt_dev_reg>
}
    ba3c:	0001883a 	nop
    ba40:	e037883a 	mov	sp,fp
    ba44:	dfc00117 	ldw	ra,4(sp)
    ba48:	df000017 	ldw	fp,0(sp)
    ba4c:	dec00204 	addi	sp,sp,8
    ba50:	f800283a 	ret

0000ba54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ba54:	defffa04 	addi	sp,sp,-24
    ba58:	dfc00515 	stw	ra,20(sp)
    ba5c:	df000415 	stw	fp,16(sp)
    ba60:	df000404 	addi	fp,sp,16
    ba64:	e13ffd15 	stw	r4,-12(fp)
    ba68:	e17ffe15 	stw	r5,-8(fp)
    ba6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ba70:	e0bffd17 	ldw	r2,-12(fp)
    ba74:	10800017 	ldw	r2,0(r2)
    ba78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ba7c:	e0bffc17 	ldw	r2,-16(fp)
    ba80:	10c00a04 	addi	r3,r2,40
    ba84:	e0bffd17 	ldw	r2,-12(fp)
    ba88:	10800217 	ldw	r2,8(r2)
    ba8c:	100f883a 	mov	r7,r2
    ba90:	e1bfff17 	ldw	r6,-4(fp)
    ba94:	e17ffe17 	ldw	r5,-8(fp)
    ba98:	1809883a 	mov	r4,r3
    ba9c:	000bb140 	call	bb14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    baa0:	e037883a 	mov	sp,fp
    baa4:	dfc00117 	ldw	ra,4(sp)
    baa8:	df000017 	ldw	fp,0(sp)
    baac:	dec00204 	addi	sp,sp,8
    bab0:	f800283a 	ret

0000bab4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bab4:	defffa04 	addi	sp,sp,-24
    bab8:	dfc00515 	stw	ra,20(sp)
    babc:	df000415 	stw	fp,16(sp)
    bac0:	df000404 	addi	fp,sp,16
    bac4:	e13ffd15 	stw	r4,-12(fp)
    bac8:	e17ffe15 	stw	r5,-8(fp)
    bacc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bad0:	e0bffd17 	ldw	r2,-12(fp)
    bad4:	10800017 	ldw	r2,0(r2)
    bad8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    badc:	e0bffc17 	ldw	r2,-16(fp)
    bae0:	10c00a04 	addi	r3,r2,40
    bae4:	e0bffd17 	ldw	r2,-12(fp)
    bae8:	10800217 	ldw	r2,8(r2)
    baec:	100f883a 	mov	r7,r2
    baf0:	e1bfff17 	ldw	r6,-4(fp)
    baf4:	e17ffe17 	ldw	r5,-8(fp)
    baf8:	1809883a 	mov	r4,r3
    bafc:	000bc000 	call	bc00 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bb00:	e037883a 	mov	sp,fp
    bb04:	dfc00117 	ldw	ra,4(sp)
    bb08:	df000017 	ldw	fp,0(sp)
    bb0c:	dec00204 	addi	sp,sp,8
    bb10:	f800283a 	ret

0000bb14 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    bb14:	defff704 	addi	sp,sp,-36
    bb18:	df000815 	stw	fp,32(sp)
    bb1c:	df000804 	addi	fp,sp,32
    bb20:	e13ffc15 	stw	r4,-16(fp)
    bb24:	e17ffd15 	stw	r5,-12(fp)
    bb28:	e1bffe15 	stw	r6,-8(fp)
    bb2c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bb30:	e0bffc17 	ldw	r2,-16(fp)
    bb34:	10800017 	ldw	r2,0(r2)
    bb38:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    bb3c:	e0bffd17 	ldw	r2,-12(fp)
    bb40:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    bb44:	e0bffe17 	ldw	r2,-8(fp)
    bb48:	e0fffd17 	ldw	r3,-12(fp)
    bb4c:	1885883a 	add	r2,r3,r2
    bb50:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    bb54:	00001206 	br	bba0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bb58:	e0bff917 	ldw	r2,-28(fp)
    bb5c:	10800037 	ldwio	r2,0(r2)
    bb60:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    bb64:	e0bffb17 	ldw	r2,-20(fp)
    bb68:	10a0000c 	andi	r2,r2,32768
    bb6c:	10000626 	beq	r2,zero,bb88 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bb70:	e0bff817 	ldw	r2,-32(fp)
    bb74:	10c00044 	addi	r3,r2,1
    bb78:	e0fff815 	stw	r3,-32(fp)
    bb7c:	e0fffb17 	ldw	r3,-20(fp)
    bb80:	10c00005 	stb	r3,0(r2)
    bb84:	00000606 	br	bba0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    bb88:	e0fff817 	ldw	r3,-32(fp)
    bb8c:	e0bffd17 	ldw	r2,-12(fp)
    bb90:	1880071e 	bne	r3,r2,bbb0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    bb94:	e0bfff17 	ldw	r2,-4(fp)
    bb98:	1090000c 	andi	r2,r2,16384
    bb9c:	1000061e 	bne	r2,zero,bbb8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    bba0:	e0fff817 	ldw	r3,-32(fp)
    bba4:	e0bffa17 	ldw	r2,-24(fp)
    bba8:	18bfeb36 	bltu	r3,r2,bb58 <altera_avalon_jtag_uart_read+0x44>
    bbac:	00000306 	br	bbbc <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    bbb0:	0001883a 	nop
    bbb4:	00000106 	br	bbbc <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    bbb8:	0001883a 	nop
    
  }

  if (ptr != buffer)
    bbbc:	e0fff817 	ldw	r3,-32(fp)
    bbc0:	e0bffd17 	ldw	r2,-12(fp)
    bbc4:	18800426 	beq	r3,r2,bbd8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    bbc8:	e0fff817 	ldw	r3,-32(fp)
    bbcc:	e0bffd17 	ldw	r2,-12(fp)
    bbd0:	1885c83a 	sub	r2,r3,r2
    bbd4:	00000606 	br	bbf0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    bbd8:	e0bfff17 	ldw	r2,-4(fp)
    bbdc:	1090000c 	andi	r2,r2,16384
    bbe0:	10000226 	beq	r2,zero,bbec <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    bbe4:	00bffd44 	movi	r2,-11
    bbe8:	00000106 	br	bbf0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    bbec:	00bffec4 	movi	r2,-5
}
    bbf0:	e037883a 	mov	sp,fp
    bbf4:	df000017 	ldw	fp,0(sp)
    bbf8:	dec00104 	addi	sp,sp,4
    bbfc:	f800283a 	ret

0000bc00 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bc00:	defff904 	addi	sp,sp,-28
    bc04:	df000615 	stw	fp,24(sp)
    bc08:	df000604 	addi	fp,sp,24
    bc0c:	e13ffc15 	stw	r4,-16(fp)
    bc10:	e17ffd15 	stw	r5,-12(fp)
    bc14:	e1bffe15 	stw	r6,-8(fp)
    bc18:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bc1c:	e0bffc17 	ldw	r2,-16(fp)
    bc20:	10800017 	ldw	r2,0(r2)
    bc24:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    bc28:	e0bffe17 	ldw	r2,-8(fp)
    bc2c:	e0fffd17 	ldw	r3,-12(fp)
    bc30:	1885883a 	add	r2,r3,r2
    bc34:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    bc38:	00000e06 	br	bc74 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    bc3c:	e0bffa17 	ldw	r2,-24(fp)
    bc40:	10800104 	addi	r2,r2,4
    bc44:	10800037 	ldwio	r2,0(r2)
    bc48:	10bfffec 	andhi	r2,r2,65535
    bc4c:	10000926 	beq	r2,zero,bc74 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    bc50:	e0fffa17 	ldw	r3,-24(fp)
    bc54:	e0bffd17 	ldw	r2,-12(fp)
    bc58:	11000044 	addi	r4,r2,1
    bc5c:	e13ffd15 	stw	r4,-12(fp)
    bc60:	10800003 	ldbu	r2,0(r2)
    bc64:	10803fcc 	andi	r2,r2,255
    bc68:	1080201c 	xori	r2,r2,128
    bc6c:	10bfe004 	addi	r2,r2,-128
    bc70:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    bc74:	e0fffd17 	ldw	r3,-12(fp)
    bc78:	e0bffb17 	ldw	r2,-20(fp)
    bc7c:	18bfef36 	bltu	r3,r2,bc3c <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    bc80:	e0bffe17 	ldw	r2,-8(fp)
}
    bc84:	e037883a 	mov	sp,fp
    bc88:	df000017 	ldw	fp,0(sp)
    bc8c:	dec00104 	addi	sp,sp,4
    bc90:	f800283a 	ret

0000bc94 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    bc94:	defffa04 	addi	sp,sp,-24
    bc98:	dfc00515 	stw	ra,20(sp)
    bc9c:	df000415 	stw	fp,16(sp)
    bca0:	df000404 	addi	fp,sp,16
    bca4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    bca8:	00800244 	movi	r2,9
    bcac:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    bcb0:	014003f4 	movhi	r5,15
    bcb4:	29509004 	addi	r5,r5,16960
    bcb8:	e13ffd17 	ldw	r4,-12(fp)
    bcbc:	000afc80 	call	afc8 <__mulsi3>
    bcc0:	100b883a 	mov	r5,r2
    bcc4:	0100bef4 	movhi	r4,763
    bcc8:	213c2004 	addi	r4,r4,-3968
    bccc:	000af0c0 	call	af0c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    bcd0:	100b883a 	mov	r5,r2
    bcd4:	01200034 	movhi	r4,32768
    bcd8:	213fffc4 	addi	r4,r4,-1
    bcdc:	000af0c0 	call	af0c <__udivsi3>
    bce0:	100b883a 	mov	r5,r2
    bce4:	e13fff17 	ldw	r4,-4(fp)
    bce8:	000af0c0 	call	af0c <__udivsi3>
    bcec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    bcf0:	e0bffe17 	ldw	r2,-8(fp)
    bcf4:	10002a26 	beq	r2,zero,bda0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    bcf8:	e03ffc15 	stw	zero,-16(fp)
    bcfc:	00001706 	br	bd5c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    bd00:	00a00034 	movhi	r2,32768
    bd04:	10bfffc4 	addi	r2,r2,-1
    bd08:	10bfffc4 	addi	r2,r2,-1
    bd0c:	103ffe1e 	bne	r2,zero,bd08 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    bd10:	014003f4 	movhi	r5,15
    bd14:	29509004 	addi	r5,r5,16960
    bd18:	e13ffd17 	ldw	r4,-12(fp)
    bd1c:	000afc80 	call	afc8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    bd20:	100b883a 	mov	r5,r2
    bd24:	0100bef4 	movhi	r4,763
    bd28:	213c2004 	addi	r4,r4,-3968
    bd2c:	000af0c0 	call	af0c <__udivsi3>
    bd30:	100b883a 	mov	r5,r2
    bd34:	01200034 	movhi	r4,32768
    bd38:	213fffc4 	addi	r4,r4,-1
    bd3c:	000af0c0 	call	af0c <__udivsi3>
    bd40:	1007883a 	mov	r3,r2
    bd44:	e0bfff17 	ldw	r2,-4(fp)
    bd48:	10c5c83a 	sub	r2,r2,r3
    bd4c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    bd50:	e0bffc17 	ldw	r2,-16(fp)
    bd54:	10800044 	addi	r2,r2,1
    bd58:	e0bffc15 	stw	r2,-16(fp)
    bd5c:	e0fffc17 	ldw	r3,-16(fp)
    bd60:	e0bffe17 	ldw	r2,-8(fp)
    bd64:	18bfe616 	blt	r3,r2,bd00 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    bd68:	014003f4 	movhi	r5,15
    bd6c:	29509004 	addi	r5,r5,16960
    bd70:	e13ffd17 	ldw	r4,-12(fp)
    bd74:	000afc80 	call	afc8 <__mulsi3>
    bd78:	100b883a 	mov	r5,r2
    bd7c:	0100bef4 	movhi	r4,763
    bd80:	213c2004 	addi	r4,r4,-3968
    bd84:	000af0c0 	call	af0c <__udivsi3>
    bd88:	e17fff17 	ldw	r5,-4(fp)
    bd8c:	1009883a 	mov	r4,r2
    bd90:	000afc80 	call	afc8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    bd94:	10bfffc4 	addi	r2,r2,-1
    bd98:	103ffe1e 	bne	r2,zero,bd94 <alt_busy_sleep+0x100>
    bd9c:	00000d06 	br	bdd4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    bda0:	014003f4 	movhi	r5,15
    bda4:	29509004 	addi	r5,r5,16960
    bda8:	e13ffd17 	ldw	r4,-12(fp)
    bdac:	000afc80 	call	afc8 <__mulsi3>
    bdb0:	100b883a 	mov	r5,r2
    bdb4:	0100bef4 	movhi	r4,763
    bdb8:	213c2004 	addi	r4,r4,-3968
    bdbc:	000af0c0 	call	af0c <__udivsi3>
    bdc0:	e17fff17 	ldw	r5,-4(fp)
    bdc4:	1009883a 	mov	r4,r2
    bdc8:	000afc80 	call	afc8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    bdcc:	10bfffc4 	addi	r2,r2,-1
    bdd0:	00bffe16 	blt	zero,r2,bdcc <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    bdd4:	0005883a 	mov	r2,zero
}
    bdd8:	e037883a 	mov	sp,fp
    bddc:	dfc00117 	ldw	ra,4(sp)
    bde0:	df000017 	ldw	fp,0(sp)
    bde4:	dec00204 	addi	sp,sp,8
    bde8:	f800283a 	ret

0000bdec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bdec:	deffff04 	addi	sp,sp,-4
    bdf0:	df000015 	stw	fp,0(sp)
    bdf4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bdf8:	0001883a 	nop
    bdfc:	e037883a 	mov	sp,fp
    be00:	df000017 	ldw	fp,0(sp)
    be04:	dec00104 	addi	sp,sp,4
    be08:	f800283a 	ret

0000be0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    be0c:	defffe04 	addi	sp,sp,-8
    be10:	dfc00115 	stw	ra,4(sp)
    be14:	df000015 	stw	fp,0(sp)
    be18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    be1c:	d0a00917 	ldw	r2,-32732(gp)
    be20:	10000326 	beq	r2,zero,be30 <alt_get_errno+0x24>
    be24:	d0a00917 	ldw	r2,-32732(gp)
    be28:	103ee83a 	callr	r2
    be2c:	00000106 	br	be34 <alt_get_errno+0x28>
    be30:	d0a29904 	addi	r2,gp,-30108
}
    be34:	e037883a 	mov	sp,fp
    be38:	dfc00117 	ldw	ra,4(sp)
    be3c:	df000017 	ldw	fp,0(sp)
    be40:	dec00204 	addi	sp,sp,8
    be44:	f800283a 	ret

0000be48 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    be48:	defffa04 	addi	sp,sp,-24
    be4c:	dfc00515 	stw	ra,20(sp)
    be50:	df000415 	stw	fp,16(sp)
    be54:	df000404 	addi	fp,sp,16
    be58:	e13ffe15 	stw	r4,-8(fp)
    be5c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    be60:	e0bffe17 	ldw	r2,-8(fp)
    be64:	10000326 	beq	r2,zero,be74 <alt_dev_llist_insert+0x2c>
    be68:	e0bffe17 	ldw	r2,-8(fp)
    be6c:	10800217 	ldw	r2,8(r2)
    be70:	1000061e 	bne	r2,zero,be8c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    be74:	000be0c0 	call	be0c <alt_get_errno>
    be78:	1007883a 	mov	r3,r2
    be7c:	00800584 	movi	r2,22
    be80:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    be84:	00bffa84 	movi	r2,-22
    be88:	00001306 	br	bed8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    be8c:	e0bffe17 	ldw	r2,-8(fp)
    be90:	e0ffff17 	ldw	r3,-4(fp)
    be94:	e0fffc15 	stw	r3,-16(fp)
    be98:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    be9c:	e0bffd17 	ldw	r2,-12(fp)
    bea0:	e0fffc17 	ldw	r3,-16(fp)
    bea4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bea8:	e0bffc17 	ldw	r2,-16(fp)
    beac:	10c00017 	ldw	r3,0(r2)
    beb0:	e0bffd17 	ldw	r2,-12(fp)
    beb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    beb8:	e0bffc17 	ldw	r2,-16(fp)
    bebc:	10800017 	ldw	r2,0(r2)
    bec0:	e0fffd17 	ldw	r3,-12(fp)
    bec4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bec8:	e0bffc17 	ldw	r2,-16(fp)
    becc:	e0fffd17 	ldw	r3,-12(fp)
    bed0:	10c00015 	stw	r3,0(r2)

  return 0;  
    bed4:	0005883a 	mov	r2,zero
}
    bed8:	e037883a 	mov	sp,fp
    bedc:	dfc00117 	ldw	ra,4(sp)
    bee0:	df000017 	ldw	fp,0(sp)
    bee4:	dec00204 	addi	sp,sp,8
    bee8:	f800283a 	ret

0000beec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    beec:	defffd04 	addi	sp,sp,-12
    bef0:	dfc00215 	stw	ra,8(sp)
    bef4:	df000115 	stw	fp,4(sp)
    bef8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    befc:	00800074 	movhi	r2,1
    bf00:	10b27004 	addi	r2,r2,-13888
    bf04:	e0bfff15 	stw	r2,-4(fp)
    bf08:	00000606 	br	bf24 <_do_ctors+0x38>
        (*ctor) (); 
    bf0c:	e0bfff17 	ldw	r2,-4(fp)
    bf10:	10800017 	ldw	r2,0(r2)
    bf14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bf18:	e0bfff17 	ldw	r2,-4(fp)
    bf1c:	10bfff04 	addi	r2,r2,-4
    bf20:	e0bfff15 	stw	r2,-4(fp)
    bf24:	e0ffff17 	ldw	r3,-4(fp)
    bf28:	00800074 	movhi	r2,1
    bf2c:	10b27104 	addi	r2,r2,-13884
    bf30:	18bff62e 	bgeu	r3,r2,bf0c <_do_ctors+0x20>
        (*ctor) (); 
}
    bf34:	0001883a 	nop
    bf38:	e037883a 	mov	sp,fp
    bf3c:	dfc00117 	ldw	ra,4(sp)
    bf40:	df000017 	ldw	fp,0(sp)
    bf44:	dec00204 	addi	sp,sp,8
    bf48:	f800283a 	ret

0000bf4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bf4c:	defffd04 	addi	sp,sp,-12
    bf50:	dfc00215 	stw	ra,8(sp)
    bf54:	df000115 	stw	fp,4(sp)
    bf58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bf5c:	00800074 	movhi	r2,1
    bf60:	10b27004 	addi	r2,r2,-13888
    bf64:	e0bfff15 	stw	r2,-4(fp)
    bf68:	00000606 	br	bf84 <_do_dtors+0x38>
        (*dtor) (); 
    bf6c:	e0bfff17 	ldw	r2,-4(fp)
    bf70:	10800017 	ldw	r2,0(r2)
    bf74:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bf78:	e0bfff17 	ldw	r2,-4(fp)
    bf7c:	10bfff04 	addi	r2,r2,-4
    bf80:	e0bfff15 	stw	r2,-4(fp)
    bf84:	e0ffff17 	ldw	r3,-4(fp)
    bf88:	00800074 	movhi	r2,1
    bf8c:	10b27104 	addi	r2,r2,-13884
    bf90:	18bff62e 	bgeu	r3,r2,bf6c <_do_dtors+0x20>
        (*dtor) (); 
}
    bf94:	0001883a 	nop
    bf98:	e037883a 	mov	sp,fp
    bf9c:	dfc00117 	ldw	ra,4(sp)
    bfa0:	df000017 	ldw	fp,0(sp)
    bfa4:	dec00204 	addi	sp,sp,8
    bfa8:	f800283a 	ret

0000bfac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    bfac:	deffff04 	addi	sp,sp,-4
    bfb0:	df000015 	stw	fp,0(sp)
    bfb4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    bfb8:	0001883a 	nop
    bfbc:	e037883a 	mov	sp,fp
    bfc0:	df000017 	ldw	fp,0(sp)
    bfc4:	dec00104 	addi	sp,sp,4
    bfc8:	f800283a 	ret

0000bfcc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bfcc:	defff804 	addi	sp,sp,-32
    bfd0:	dfc00715 	stw	ra,28(sp)
    bfd4:	df000615 	stw	fp,24(sp)
    bfd8:	dc000515 	stw	r16,20(sp)
    bfdc:	df000604 	addi	fp,sp,24
    bfe0:	e13ffb15 	stw	r4,-20(fp)
    bfe4:	e17ffc15 	stw	r5,-16(fp)
    bfe8:	e1bffd15 	stw	r6,-12(fp)
    bfec:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    bff0:	e1bffe17 	ldw	r6,-8(fp)
    bff4:	e17ffd17 	ldw	r5,-12(fp)
    bff8:	e13ffc17 	ldw	r4,-16(fp)
    bffc:	000c2540 	call	c254 <open>
    c000:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    c004:	e0bffa17 	ldw	r2,-24(fp)
    c008:	10002216 	blt	r2,zero,c094 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    c00c:	04000074 	movhi	r16,1
    c010:	84349904 	addi	r16,r16,-11676
    c014:	e0bffa17 	ldw	r2,-24(fp)
    c018:	01400304 	movi	r5,12
    c01c:	1009883a 	mov	r4,r2
    c020:	000afc80 	call	afc8 <__mulsi3>
    c024:	8085883a 	add	r2,r16,r2
    c028:	10c00017 	ldw	r3,0(r2)
    c02c:	e0bffb17 	ldw	r2,-20(fp)
    c030:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c034:	04000074 	movhi	r16,1
    c038:	84349904 	addi	r16,r16,-11676
    c03c:	e0bffa17 	ldw	r2,-24(fp)
    c040:	01400304 	movi	r5,12
    c044:	1009883a 	mov	r4,r2
    c048:	000afc80 	call	afc8 <__mulsi3>
    c04c:	8085883a 	add	r2,r16,r2
    c050:	10800104 	addi	r2,r2,4
    c054:	10c00017 	ldw	r3,0(r2)
    c058:	e0bffb17 	ldw	r2,-20(fp)
    c05c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c060:	04000074 	movhi	r16,1
    c064:	84349904 	addi	r16,r16,-11676
    c068:	e0bffa17 	ldw	r2,-24(fp)
    c06c:	01400304 	movi	r5,12
    c070:	1009883a 	mov	r4,r2
    c074:	000afc80 	call	afc8 <__mulsi3>
    c078:	8085883a 	add	r2,r16,r2
    c07c:	10800204 	addi	r2,r2,8
    c080:	10c00017 	ldw	r3,0(r2)
    c084:	e0bffb17 	ldw	r2,-20(fp)
    c088:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c08c:	e13ffa17 	ldw	r4,-24(fp)
    c090:	000b7140 	call	b714 <alt_release_fd>
  }
} 
    c094:	0001883a 	nop
    c098:	e6ffff04 	addi	sp,fp,-4
    c09c:	dfc00217 	ldw	ra,8(sp)
    c0a0:	df000117 	ldw	fp,4(sp)
    c0a4:	dc000017 	ldw	r16,0(sp)
    c0a8:	dec00304 	addi	sp,sp,12
    c0ac:	f800283a 	ret

0000c0b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c0b0:	defffb04 	addi	sp,sp,-20
    c0b4:	dfc00415 	stw	ra,16(sp)
    c0b8:	df000315 	stw	fp,12(sp)
    c0bc:	df000304 	addi	fp,sp,12
    c0c0:	e13ffd15 	stw	r4,-12(fp)
    c0c4:	e17ffe15 	stw	r5,-8(fp)
    c0c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c0cc:	01c07fc4 	movi	r7,511
    c0d0:	01800044 	movi	r6,1
    c0d4:	e17ffd17 	ldw	r5,-12(fp)
    c0d8:	01000074 	movhi	r4,1
    c0dc:	21349c04 	addi	r4,r4,-11664
    c0e0:	000bfcc0 	call	bfcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c0e4:	01c07fc4 	movi	r7,511
    c0e8:	000d883a 	mov	r6,zero
    c0ec:	e17ffe17 	ldw	r5,-8(fp)
    c0f0:	01000074 	movhi	r4,1
    c0f4:	21349904 	addi	r4,r4,-11676
    c0f8:	000bfcc0 	call	bfcc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c0fc:	01c07fc4 	movi	r7,511
    c100:	01800044 	movi	r6,1
    c104:	e17fff17 	ldw	r5,-4(fp)
    c108:	01000074 	movhi	r4,1
    c10c:	21349f04 	addi	r4,r4,-11652
    c110:	000bfcc0 	call	bfcc <alt_open_fd>
}  
    c114:	0001883a 	nop
    c118:	e037883a 	mov	sp,fp
    c11c:	dfc00117 	ldw	ra,4(sp)
    c120:	df000017 	ldw	fp,0(sp)
    c124:	dec00204 	addi	sp,sp,8
    c128:	f800283a 	ret

0000c12c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c12c:	defffe04 	addi	sp,sp,-8
    c130:	dfc00115 	stw	ra,4(sp)
    c134:	df000015 	stw	fp,0(sp)
    c138:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c13c:	d0a00917 	ldw	r2,-32732(gp)
    c140:	10000326 	beq	r2,zero,c150 <alt_get_errno+0x24>
    c144:	d0a00917 	ldw	r2,-32732(gp)
    c148:	103ee83a 	callr	r2
    c14c:	00000106 	br	c154 <alt_get_errno+0x28>
    c150:	d0a29904 	addi	r2,gp,-30108
}
    c154:	e037883a 	mov	sp,fp
    c158:	dfc00117 	ldw	ra,4(sp)
    c15c:	df000017 	ldw	fp,0(sp)
    c160:	dec00204 	addi	sp,sp,8
    c164:	f800283a 	ret

0000c168 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c168:	defffb04 	addi	sp,sp,-20
    c16c:	dfc00415 	stw	ra,16(sp)
    c170:	df000315 	stw	fp,12(sp)
    c174:	dc000215 	stw	r16,8(sp)
    c178:	df000304 	addi	fp,sp,12
    c17c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c180:	e0bffe17 	ldw	r2,-8(fp)
    c184:	10800217 	ldw	r2,8(r2)
    c188:	10d00034 	orhi	r3,r2,16384
    c18c:	e0bffe17 	ldw	r2,-8(fp)
    c190:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c194:	e03ffd15 	stw	zero,-12(fp)
    c198:	00002306 	br	c228 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c19c:	04000074 	movhi	r16,1
    c1a0:	84349904 	addi	r16,r16,-11676
    c1a4:	e0bffd17 	ldw	r2,-12(fp)
    c1a8:	01400304 	movi	r5,12
    c1ac:	1009883a 	mov	r4,r2
    c1b0:	000afc80 	call	afc8 <__mulsi3>
    c1b4:	8085883a 	add	r2,r16,r2
    c1b8:	10c00017 	ldw	r3,0(r2)
    c1bc:	e0bffe17 	ldw	r2,-8(fp)
    c1c0:	10800017 	ldw	r2,0(r2)
    c1c4:	1880151e 	bne	r3,r2,c21c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c1c8:	04000074 	movhi	r16,1
    c1cc:	84349904 	addi	r16,r16,-11676
    c1d0:	e0bffd17 	ldw	r2,-12(fp)
    c1d4:	01400304 	movi	r5,12
    c1d8:	1009883a 	mov	r4,r2
    c1dc:	000afc80 	call	afc8 <__mulsi3>
    c1e0:	8085883a 	add	r2,r16,r2
    c1e4:	10800204 	addi	r2,r2,8
    c1e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c1ec:	10000b0e 	bge	r2,zero,c21c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c1f0:	01400304 	movi	r5,12
    c1f4:	e13ffd17 	ldw	r4,-12(fp)
    c1f8:	000afc80 	call	afc8 <__mulsi3>
    c1fc:	1007883a 	mov	r3,r2
    c200:	00800074 	movhi	r2,1
    c204:	10b49904 	addi	r2,r2,-11676
    c208:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c20c:	e0bffe17 	ldw	r2,-8(fp)
    c210:	18800226 	beq	r3,r2,c21c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c214:	00bffcc4 	movi	r2,-13
    c218:	00000806 	br	c23c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c21c:	e0bffd17 	ldw	r2,-12(fp)
    c220:	10800044 	addi	r2,r2,1
    c224:	e0bffd15 	stw	r2,-12(fp)
    c228:	d0a00817 	ldw	r2,-32736(gp)
    c22c:	1007883a 	mov	r3,r2
    c230:	e0bffd17 	ldw	r2,-12(fp)
    c234:	18bfd92e 	bgeu	r3,r2,c19c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c238:	0005883a 	mov	r2,zero
}
    c23c:	e6ffff04 	addi	sp,fp,-4
    c240:	dfc00217 	ldw	ra,8(sp)
    c244:	df000117 	ldw	fp,4(sp)
    c248:	dc000017 	ldw	r16,0(sp)
    c24c:	dec00304 	addi	sp,sp,12
    c250:	f800283a 	ret

0000c254 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c254:	defff604 	addi	sp,sp,-40
    c258:	dfc00915 	stw	ra,36(sp)
    c25c:	df000815 	stw	fp,32(sp)
    c260:	df000804 	addi	fp,sp,32
    c264:	e13ffd15 	stw	r4,-12(fp)
    c268:	e17ffe15 	stw	r5,-8(fp)
    c26c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c270:	00bfffc4 	movi	r2,-1
    c274:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c278:	00bffb44 	movi	r2,-19
    c27c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c280:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c284:	d1600604 	addi	r5,gp,-32744
    c288:	e13ffd17 	ldw	r4,-12(fp)
    c28c:	000c3d40 	call	c3d4 <alt_find_dev>
    c290:	e0bff815 	stw	r2,-32(fp)
    c294:	e0bff817 	ldw	r2,-32(fp)
    c298:	1000051e 	bne	r2,zero,c2b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c29c:	e13ffd17 	ldw	r4,-12(fp)
    c2a0:	000c4640 	call	c464 <alt_find_file>
    c2a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c2a8:	00800044 	movi	r2,1
    c2ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c2b0:	e0bff817 	ldw	r2,-32(fp)
    c2b4:	10002b26 	beq	r2,zero,c364 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c2b8:	e13ff817 	ldw	r4,-32(fp)
    c2bc:	000c56c0 	call	c56c <alt_get_fd>
    c2c0:	e0bff915 	stw	r2,-28(fp)
    c2c4:	e0bff917 	ldw	r2,-28(fp)
    c2c8:	1000030e 	bge	r2,zero,c2d8 <open+0x84>
    {
      status = index;
    c2cc:	e0bff917 	ldw	r2,-28(fp)
    c2d0:	e0bffa15 	stw	r2,-24(fp)
    c2d4:	00002506 	br	c36c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c2d8:	01400304 	movi	r5,12
    c2dc:	e13ff917 	ldw	r4,-28(fp)
    c2e0:	000afc80 	call	afc8 <__mulsi3>
    c2e4:	1007883a 	mov	r3,r2
    c2e8:	00800074 	movhi	r2,1
    c2ec:	10b49904 	addi	r2,r2,-11676
    c2f0:	1885883a 	add	r2,r3,r2
    c2f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c2f8:	e0fffe17 	ldw	r3,-8(fp)
    c2fc:	00900034 	movhi	r2,16384
    c300:	10bfffc4 	addi	r2,r2,-1
    c304:	1886703a 	and	r3,r3,r2
    c308:	e0bffc17 	ldw	r2,-16(fp)
    c30c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c310:	e0bffb17 	ldw	r2,-20(fp)
    c314:	1000051e 	bne	r2,zero,c32c <open+0xd8>
    c318:	e13ffc17 	ldw	r4,-16(fp)
    c31c:	000c1680 	call	c168 <alt_file_locked>
    c320:	e0bffa15 	stw	r2,-24(fp)
    c324:	e0bffa17 	ldw	r2,-24(fp)
    c328:	10001016 	blt	r2,zero,c36c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c32c:	e0bff817 	ldw	r2,-32(fp)
    c330:	10800317 	ldw	r2,12(r2)
    c334:	10000826 	beq	r2,zero,c358 <open+0x104>
    c338:	e0bff817 	ldw	r2,-32(fp)
    c33c:	10800317 	ldw	r2,12(r2)
    c340:	e1ffff17 	ldw	r7,-4(fp)
    c344:	e1bffe17 	ldw	r6,-8(fp)
    c348:	e17ffd17 	ldw	r5,-12(fp)
    c34c:	e13ffc17 	ldw	r4,-16(fp)
    c350:	103ee83a 	callr	r2
    c354:	00000106 	br	c35c <open+0x108>
    c358:	0005883a 	mov	r2,zero
    c35c:	e0bffa15 	stw	r2,-24(fp)
    c360:	00000206 	br	c36c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c364:	00bffb44 	movi	r2,-19
    c368:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c36c:	e0bffa17 	ldw	r2,-24(fp)
    c370:	1000090e 	bge	r2,zero,c398 <open+0x144>
  {
    alt_release_fd (index);  
    c374:	e13ff917 	ldw	r4,-28(fp)
    c378:	000b7140 	call	b714 <alt_release_fd>
    ALT_ERRNO = -status;
    c37c:	000c12c0 	call	c12c <alt_get_errno>
    c380:	1007883a 	mov	r3,r2
    c384:	e0bffa17 	ldw	r2,-24(fp)
    c388:	0085c83a 	sub	r2,zero,r2
    c38c:	18800015 	stw	r2,0(r3)
    return -1;
    c390:	00bfffc4 	movi	r2,-1
    c394:	00000106 	br	c39c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    c398:	e0bff917 	ldw	r2,-28(fp)
}
    c39c:	e037883a 	mov	sp,fp
    c3a0:	dfc00117 	ldw	ra,4(sp)
    c3a4:	df000017 	ldw	fp,0(sp)
    c3a8:	dec00204 	addi	sp,sp,8
    c3ac:	f800283a 	ret

0000c3b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c3b0:	deffff04 	addi	sp,sp,-4
    c3b4:	df000015 	stw	fp,0(sp)
    c3b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c3bc:	000170fa 	wrctl	ienable,zero
}
    c3c0:	0001883a 	nop
    c3c4:	e037883a 	mov	sp,fp
    c3c8:	df000017 	ldw	fp,0(sp)
    c3cc:	dec00104 	addi	sp,sp,4
    c3d0:	f800283a 	ret

0000c3d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c3d4:	defffa04 	addi	sp,sp,-24
    c3d8:	dfc00515 	stw	ra,20(sp)
    c3dc:	df000415 	stw	fp,16(sp)
    c3e0:	df000404 	addi	fp,sp,16
    c3e4:	e13ffe15 	stw	r4,-8(fp)
    c3e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c3ec:	e0bfff17 	ldw	r2,-4(fp)
    c3f0:	10800017 	ldw	r2,0(r2)
    c3f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c3f8:	e13ffe17 	ldw	r4,-8(fp)
    c3fc:	00082b80 	call	82b8 <strlen>
    c400:	10800044 	addi	r2,r2,1
    c404:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c408:	00000d06 	br	c440 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c40c:	e0bffc17 	ldw	r2,-16(fp)
    c410:	10800217 	ldw	r2,8(r2)
    c414:	e0fffd17 	ldw	r3,-12(fp)
    c418:	180d883a 	mov	r6,r3
    c41c:	e17ffe17 	ldw	r5,-8(fp)
    c420:	1009883a 	mov	r4,r2
    c424:	000c67c0 	call	c67c <memcmp>
    c428:	1000021e 	bne	r2,zero,c434 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c42c:	e0bffc17 	ldw	r2,-16(fp)
    c430:	00000706 	br	c450 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c434:	e0bffc17 	ldw	r2,-16(fp)
    c438:	10800017 	ldw	r2,0(r2)
    c43c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c440:	e0fffc17 	ldw	r3,-16(fp)
    c444:	e0bfff17 	ldw	r2,-4(fp)
    c448:	18bff01e 	bne	r3,r2,c40c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c44c:	0005883a 	mov	r2,zero
}
    c450:	e037883a 	mov	sp,fp
    c454:	dfc00117 	ldw	ra,4(sp)
    c458:	df000017 	ldw	fp,0(sp)
    c45c:	dec00204 	addi	sp,sp,8
    c460:	f800283a 	ret

0000c464 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c464:	defffb04 	addi	sp,sp,-20
    c468:	dfc00415 	stw	ra,16(sp)
    c46c:	df000315 	stw	fp,12(sp)
    c470:	df000304 	addi	fp,sp,12
    c474:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c478:	d0a00417 	ldw	r2,-32752(gp)
    c47c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c480:	00003106 	br	c548 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c484:	e0bffd17 	ldw	r2,-12(fp)
    c488:	10800217 	ldw	r2,8(r2)
    c48c:	1009883a 	mov	r4,r2
    c490:	00082b80 	call	82b8 <strlen>
    c494:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c498:	e0bffd17 	ldw	r2,-12(fp)
    c49c:	10c00217 	ldw	r3,8(r2)
    c4a0:	e0bffe17 	ldw	r2,-8(fp)
    c4a4:	10bfffc4 	addi	r2,r2,-1
    c4a8:	1885883a 	add	r2,r3,r2
    c4ac:	10800003 	ldbu	r2,0(r2)
    c4b0:	10803fcc 	andi	r2,r2,255
    c4b4:	1080201c 	xori	r2,r2,128
    c4b8:	10bfe004 	addi	r2,r2,-128
    c4bc:	10800bd8 	cmpnei	r2,r2,47
    c4c0:	1000031e 	bne	r2,zero,c4d0 <alt_find_file+0x6c>
    {
      len -= 1;
    c4c4:	e0bffe17 	ldw	r2,-8(fp)
    c4c8:	10bfffc4 	addi	r2,r2,-1
    c4cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c4d0:	e0bffe17 	ldw	r2,-8(fp)
    c4d4:	e0ffff17 	ldw	r3,-4(fp)
    c4d8:	1885883a 	add	r2,r3,r2
    c4dc:	10800003 	ldbu	r2,0(r2)
    c4e0:	10803fcc 	andi	r2,r2,255
    c4e4:	1080201c 	xori	r2,r2,128
    c4e8:	10bfe004 	addi	r2,r2,-128
    c4ec:	10800be0 	cmpeqi	r2,r2,47
    c4f0:	1000081e 	bne	r2,zero,c514 <alt_find_file+0xb0>
    c4f4:	e0bffe17 	ldw	r2,-8(fp)
    c4f8:	e0ffff17 	ldw	r3,-4(fp)
    c4fc:	1885883a 	add	r2,r3,r2
    c500:	10800003 	ldbu	r2,0(r2)
    c504:	10803fcc 	andi	r2,r2,255
    c508:	1080201c 	xori	r2,r2,128
    c50c:	10bfe004 	addi	r2,r2,-128
    c510:	10000a1e 	bne	r2,zero,c53c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c514:	e0bffd17 	ldw	r2,-12(fp)
    c518:	10800217 	ldw	r2,8(r2)
    c51c:	e0fffe17 	ldw	r3,-8(fp)
    c520:	180d883a 	mov	r6,r3
    c524:	e17fff17 	ldw	r5,-4(fp)
    c528:	1009883a 	mov	r4,r2
    c52c:	000c67c0 	call	c67c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c530:	1000021e 	bne	r2,zero,c53c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c534:	e0bffd17 	ldw	r2,-12(fp)
    c538:	00000706 	br	c558 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c53c:	e0bffd17 	ldw	r2,-12(fp)
    c540:	10800017 	ldw	r2,0(r2)
    c544:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c548:	e0fffd17 	ldw	r3,-12(fp)
    c54c:	d0a00404 	addi	r2,gp,-32752
    c550:	18bfcc1e 	bne	r3,r2,c484 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c554:	0005883a 	mov	r2,zero
}
    c558:	e037883a 	mov	sp,fp
    c55c:	dfc00117 	ldw	ra,4(sp)
    c560:	df000017 	ldw	fp,0(sp)
    c564:	dec00204 	addi	sp,sp,8
    c568:	f800283a 	ret

0000c56c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c56c:	defffa04 	addi	sp,sp,-24
    c570:	dfc00515 	stw	ra,20(sp)
    c574:	df000415 	stw	fp,16(sp)
    c578:	dc000315 	stw	r16,12(sp)
    c57c:	df000404 	addi	fp,sp,16
    c580:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c584:	00bffa04 	movi	r2,-24
    c588:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c58c:	e03ffc15 	stw	zero,-16(fp)
    c590:	00001d06 	br	c608 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    c594:	04000074 	movhi	r16,1
    c598:	84349904 	addi	r16,r16,-11676
    c59c:	e0bffc17 	ldw	r2,-16(fp)
    c5a0:	01400304 	movi	r5,12
    c5a4:	1009883a 	mov	r4,r2
    c5a8:	000afc80 	call	afc8 <__mulsi3>
    c5ac:	8085883a 	add	r2,r16,r2
    c5b0:	10800017 	ldw	r2,0(r2)
    c5b4:	1000111e 	bne	r2,zero,c5fc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    c5b8:	04000074 	movhi	r16,1
    c5bc:	84349904 	addi	r16,r16,-11676
    c5c0:	e0bffc17 	ldw	r2,-16(fp)
    c5c4:	01400304 	movi	r5,12
    c5c8:	1009883a 	mov	r4,r2
    c5cc:	000afc80 	call	afc8 <__mulsi3>
    c5d0:	8085883a 	add	r2,r16,r2
    c5d4:	e0fffe17 	ldw	r3,-8(fp)
    c5d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c5dc:	d0e00817 	ldw	r3,-32736(gp)
    c5e0:	e0bffc17 	ldw	r2,-16(fp)
    c5e4:	1880020e 	bge	r3,r2,c5f0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    c5e8:	e0bffc17 	ldw	r2,-16(fp)
    c5ec:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    c5f0:	e0bffc17 	ldw	r2,-16(fp)
    c5f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c5f8:	00000606 	br	c614 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c5fc:	e0bffc17 	ldw	r2,-16(fp)
    c600:	10800044 	addi	r2,r2,1
    c604:	e0bffc15 	stw	r2,-16(fp)
    c608:	e0bffc17 	ldw	r2,-16(fp)
    c60c:	10800810 	cmplti	r2,r2,32
    c610:	103fe01e 	bne	r2,zero,c594 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c614:	e0bffd17 	ldw	r2,-12(fp)
}
    c618:	e6ffff04 	addi	sp,fp,-4
    c61c:	dfc00217 	ldw	ra,8(sp)
    c620:	df000117 	ldw	fp,4(sp)
    c624:	dc000017 	ldw	r16,0(sp)
    c628:	dec00304 	addi	sp,sp,12
    c62c:	f800283a 	ret

0000c630 <atexit>:
    c630:	200b883a 	mov	r5,r4
    c634:	000f883a 	mov	r7,zero
    c638:	000d883a 	mov	r6,zero
    c63c:	0009883a 	mov	r4,zero
    c640:	000c6f81 	jmpi	c6f8 <__register_exitproc>

0000c644 <exit>:
    c644:	defffe04 	addi	sp,sp,-8
    c648:	000b883a 	mov	r5,zero
    c64c:	dc000015 	stw	r16,0(sp)
    c650:	dfc00115 	stw	ra,4(sp)
    c654:	2021883a 	mov	r16,r4
    c658:	000c8100 	call	c810 <__call_exitprocs>
    c65c:	00800074 	movhi	r2,1
    c660:	10b50404 	addi	r2,r2,-11248
    c664:	11000017 	ldw	r4,0(r2)
    c668:	20800f17 	ldw	r2,60(r4)
    c66c:	10000126 	beq	r2,zero,c674 <exit+0x30>
    c670:	103ee83a 	callr	r2
    c674:	8009883a 	mov	r4,r16
    c678:	000c9900 	call	c990 <_exit>

0000c67c <memcmp>:
    c67c:	01c000c4 	movi	r7,3
    c680:	3980192e 	bgeu	r7,r6,c6e8 <memcmp+0x6c>
    c684:	2144b03a 	or	r2,r4,r5
    c688:	11c4703a 	and	r2,r2,r7
    c68c:	10000f26 	beq	r2,zero,c6cc <memcmp+0x50>
    c690:	20800003 	ldbu	r2,0(r4)
    c694:	28c00003 	ldbu	r3,0(r5)
    c698:	10c0151e 	bne	r2,r3,c6f0 <memcmp+0x74>
    c69c:	31bfff84 	addi	r6,r6,-2
    c6a0:	01ffffc4 	movi	r7,-1
    c6a4:	00000406 	br	c6b8 <memcmp+0x3c>
    c6a8:	20800003 	ldbu	r2,0(r4)
    c6ac:	28c00003 	ldbu	r3,0(r5)
    c6b0:	31bfffc4 	addi	r6,r6,-1
    c6b4:	10c00e1e 	bne	r2,r3,c6f0 <memcmp+0x74>
    c6b8:	21000044 	addi	r4,r4,1
    c6bc:	29400044 	addi	r5,r5,1
    c6c0:	31fff91e 	bne	r6,r7,c6a8 <memcmp+0x2c>
    c6c4:	0005883a 	mov	r2,zero
    c6c8:	f800283a 	ret
    c6cc:	20c00017 	ldw	r3,0(r4)
    c6d0:	28800017 	ldw	r2,0(r5)
    c6d4:	18bfee1e 	bne	r3,r2,c690 <memcmp+0x14>
    c6d8:	31bfff04 	addi	r6,r6,-4
    c6dc:	21000104 	addi	r4,r4,4
    c6e0:	29400104 	addi	r5,r5,4
    c6e4:	39bff936 	bltu	r7,r6,c6cc <memcmp+0x50>
    c6e8:	303fe91e 	bne	r6,zero,c690 <memcmp+0x14>
    c6ec:	003ff506 	br	c6c4 <memcmp+0x48>
    c6f0:	10c5c83a 	sub	r2,r2,r3
    c6f4:	f800283a 	ret

0000c6f8 <__register_exitproc>:
    c6f8:	defffa04 	addi	sp,sp,-24
    c6fc:	dc000315 	stw	r16,12(sp)
    c700:	04000074 	movhi	r16,1
    c704:	84350404 	addi	r16,r16,-11248
    c708:	80c00017 	ldw	r3,0(r16)
    c70c:	dc400415 	stw	r17,16(sp)
    c710:	dfc00515 	stw	ra,20(sp)
    c714:	18805217 	ldw	r2,328(r3)
    c718:	2023883a 	mov	r17,r4
    c71c:	10003726 	beq	r2,zero,c7fc <__register_exitproc+0x104>
    c720:	10c00117 	ldw	r3,4(r2)
    c724:	010007c4 	movi	r4,31
    c728:	20c00e16 	blt	r4,r3,c764 <__register_exitproc+0x6c>
    c72c:	1a000044 	addi	r8,r3,1
    c730:	8800221e 	bne	r17,zero,c7bc <__register_exitproc+0xc4>
    c734:	18c00084 	addi	r3,r3,2
    c738:	18c7883a 	add	r3,r3,r3
    c73c:	18c7883a 	add	r3,r3,r3
    c740:	12000115 	stw	r8,4(r2)
    c744:	10c7883a 	add	r3,r2,r3
    c748:	19400015 	stw	r5,0(r3)
    c74c:	0005883a 	mov	r2,zero
    c750:	dfc00517 	ldw	ra,20(sp)
    c754:	dc400417 	ldw	r17,16(sp)
    c758:	dc000317 	ldw	r16,12(sp)
    c75c:	dec00604 	addi	sp,sp,24
    c760:	f800283a 	ret
    c764:	00800034 	movhi	r2,0
    c768:	10800004 	addi	r2,r2,0
    c76c:	10002626 	beq	r2,zero,c808 <__register_exitproc+0x110>
    c770:	01006404 	movi	r4,400
    c774:	d9400015 	stw	r5,0(sp)
    c778:	d9800115 	stw	r6,4(sp)
    c77c:	d9c00215 	stw	r7,8(sp)
    c780:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c784:	d9400017 	ldw	r5,0(sp)
    c788:	d9800117 	ldw	r6,4(sp)
    c78c:	d9c00217 	ldw	r7,8(sp)
    c790:	10001d26 	beq	r2,zero,c808 <__register_exitproc+0x110>
    c794:	81000017 	ldw	r4,0(r16)
    c798:	10000115 	stw	zero,4(r2)
    c79c:	02000044 	movi	r8,1
    c7a0:	22405217 	ldw	r9,328(r4)
    c7a4:	0007883a 	mov	r3,zero
    c7a8:	12400015 	stw	r9,0(r2)
    c7ac:	20805215 	stw	r2,328(r4)
    c7b0:	10006215 	stw	zero,392(r2)
    c7b4:	10006315 	stw	zero,396(r2)
    c7b8:	883fde26 	beq	r17,zero,c734 <__register_exitproc+0x3c>
    c7bc:	18c9883a 	add	r4,r3,r3
    c7c0:	2109883a 	add	r4,r4,r4
    c7c4:	1109883a 	add	r4,r2,r4
    c7c8:	21802215 	stw	r6,136(r4)
    c7cc:	01800044 	movi	r6,1
    c7d0:	12406217 	ldw	r9,392(r2)
    c7d4:	30cc983a 	sll	r6,r6,r3
    c7d8:	4992b03a 	or	r9,r9,r6
    c7dc:	12406215 	stw	r9,392(r2)
    c7e0:	21c04215 	stw	r7,264(r4)
    c7e4:	01000084 	movi	r4,2
    c7e8:	893fd21e 	bne	r17,r4,c734 <__register_exitproc+0x3c>
    c7ec:	11006317 	ldw	r4,396(r2)
    c7f0:	218cb03a 	or	r6,r4,r6
    c7f4:	11806315 	stw	r6,396(r2)
    c7f8:	003fce06 	br	c734 <__register_exitproc+0x3c>
    c7fc:	18805304 	addi	r2,r3,332
    c800:	18805215 	stw	r2,328(r3)
    c804:	003fc606 	br	c720 <__register_exitproc+0x28>
    c808:	00bfffc4 	movi	r2,-1
    c80c:	003fd006 	br	c750 <__register_exitproc+0x58>

0000c810 <__call_exitprocs>:
    c810:	defff504 	addi	sp,sp,-44
    c814:	df000915 	stw	fp,36(sp)
    c818:	dd400615 	stw	r21,24(sp)
    c81c:	dc800315 	stw	r18,12(sp)
    c820:	dfc00a15 	stw	ra,40(sp)
    c824:	ddc00815 	stw	r23,32(sp)
    c828:	dd800715 	stw	r22,28(sp)
    c82c:	dd000515 	stw	r20,20(sp)
    c830:	dcc00415 	stw	r19,16(sp)
    c834:	dc400215 	stw	r17,8(sp)
    c838:	dc000115 	stw	r16,4(sp)
    c83c:	d9000015 	stw	r4,0(sp)
    c840:	2839883a 	mov	fp,r5
    c844:	04800044 	movi	r18,1
    c848:	057fffc4 	movi	r21,-1
    c84c:	00800074 	movhi	r2,1
    c850:	10b50404 	addi	r2,r2,-11248
    c854:	12000017 	ldw	r8,0(r2)
    c858:	45005217 	ldw	r20,328(r8)
    c85c:	44c05204 	addi	r19,r8,328
    c860:	a0001c26 	beq	r20,zero,c8d4 <__call_exitprocs+0xc4>
    c864:	a0800117 	ldw	r2,4(r20)
    c868:	15ffffc4 	addi	r23,r2,-1
    c86c:	b8000d16 	blt	r23,zero,c8a4 <__call_exitprocs+0x94>
    c870:	14000044 	addi	r16,r2,1
    c874:	8421883a 	add	r16,r16,r16
    c878:	8421883a 	add	r16,r16,r16
    c87c:	84402004 	addi	r17,r16,128
    c880:	a463883a 	add	r17,r20,r17
    c884:	a421883a 	add	r16,r20,r16
    c888:	e0001e26 	beq	fp,zero,c904 <__call_exitprocs+0xf4>
    c88c:	80804017 	ldw	r2,256(r16)
    c890:	e0801c26 	beq	fp,r2,c904 <__call_exitprocs+0xf4>
    c894:	bdffffc4 	addi	r23,r23,-1
    c898:	843fff04 	addi	r16,r16,-4
    c89c:	8c7fff04 	addi	r17,r17,-4
    c8a0:	bd7ff91e 	bne	r23,r21,c888 <__call_exitprocs+0x78>
    c8a4:	00800034 	movhi	r2,0
    c8a8:	10800004 	addi	r2,r2,0
    c8ac:	10000926 	beq	r2,zero,c8d4 <__call_exitprocs+0xc4>
    c8b0:	a0800117 	ldw	r2,4(r20)
    c8b4:	1000301e 	bne	r2,zero,c978 <__call_exitprocs+0x168>
    c8b8:	a0800017 	ldw	r2,0(r20)
    c8bc:	10003226 	beq	r2,zero,c988 <__call_exitprocs+0x178>
    c8c0:	a009883a 	mov	r4,r20
    c8c4:	98800015 	stw	r2,0(r19)
    c8c8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c8cc:	9d000017 	ldw	r20,0(r19)
    c8d0:	a03fe41e 	bne	r20,zero,c864 <__call_exitprocs+0x54>
    c8d4:	dfc00a17 	ldw	ra,40(sp)
    c8d8:	df000917 	ldw	fp,36(sp)
    c8dc:	ddc00817 	ldw	r23,32(sp)
    c8e0:	dd800717 	ldw	r22,28(sp)
    c8e4:	dd400617 	ldw	r21,24(sp)
    c8e8:	dd000517 	ldw	r20,20(sp)
    c8ec:	dcc00417 	ldw	r19,16(sp)
    c8f0:	dc800317 	ldw	r18,12(sp)
    c8f4:	dc400217 	ldw	r17,8(sp)
    c8f8:	dc000117 	ldw	r16,4(sp)
    c8fc:	dec00b04 	addi	sp,sp,44
    c900:	f800283a 	ret
    c904:	a0800117 	ldw	r2,4(r20)
    c908:	80c00017 	ldw	r3,0(r16)
    c90c:	10bfffc4 	addi	r2,r2,-1
    c910:	15c01426 	beq	r2,r23,c964 <__call_exitprocs+0x154>
    c914:	80000015 	stw	zero,0(r16)
    c918:	183fde26 	beq	r3,zero,c894 <__call_exitprocs+0x84>
    c91c:	95c8983a 	sll	r4,r18,r23
    c920:	a0806217 	ldw	r2,392(r20)
    c924:	a5800117 	ldw	r22,4(r20)
    c928:	2084703a 	and	r2,r4,r2
    c92c:	10000b26 	beq	r2,zero,c95c <__call_exitprocs+0x14c>
    c930:	a0806317 	ldw	r2,396(r20)
    c934:	2088703a 	and	r4,r4,r2
    c938:	20000c1e 	bne	r4,zero,c96c <__call_exitprocs+0x15c>
    c93c:	89400017 	ldw	r5,0(r17)
    c940:	d9000017 	ldw	r4,0(sp)
    c944:	183ee83a 	callr	r3
    c948:	a0800117 	ldw	r2,4(r20)
    c94c:	15bfbf1e 	bne	r2,r22,c84c <__call_exitprocs+0x3c>
    c950:	98800017 	ldw	r2,0(r19)
    c954:	153fcf26 	beq	r2,r20,c894 <__call_exitprocs+0x84>
    c958:	003fbc06 	br	c84c <__call_exitprocs+0x3c>
    c95c:	183ee83a 	callr	r3
    c960:	003ff906 	br	c948 <__call_exitprocs+0x138>
    c964:	a5c00115 	stw	r23,4(r20)
    c968:	003feb06 	br	c918 <__call_exitprocs+0x108>
    c96c:	89000017 	ldw	r4,0(r17)
    c970:	183ee83a 	callr	r3
    c974:	003ff406 	br	c948 <__call_exitprocs+0x138>
    c978:	a0800017 	ldw	r2,0(r20)
    c97c:	a027883a 	mov	r19,r20
    c980:	1029883a 	mov	r20,r2
    c984:	003fb606 	br	c860 <__call_exitprocs+0x50>
    c988:	0005883a 	mov	r2,zero
    c98c:	003ffb06 	br	c97c <__call_exitprocs+0x16c>

0000c990 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c990:	defffd04 	addi	sp,sp,-12
    c994:	df000215 	stw	fp,8(sp)
    c998:	df000204 	addi	fp,sp,8
    c99c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c9a0:	0001883a 	nop
    c9a4:	e0bfff17 	ldw	r2,-4(fp)
    c9a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c9ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c9b0:	10000226 	beq	r2,zero,c9bc <_exit+0x2c>
    ALT_SIM_FAIL();
    c9b4:	002af070 	cmpltui	zero,zero,43969
    c9b8:	00000106 	br	c9c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c9bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c9c0:	003fff06 	br	c9c0 <_exit+0x30>
